
MQ_135.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055f0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080056b0  080056b0  000156b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057d8  080057d8  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080057d8  080057d8  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057d8  080057d8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057d8  080057d8  000157d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057dc  080057dc  000157dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080057e0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000080  08005860  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08005860  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004314  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001225  00000000  00000000  000243ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000480  00000000  00000000  00025628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000350  00000000  00000000  00025aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000f057  00000000  00000000  00025df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005ed4  00000000  00000000  00034e4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005b270  00000000  00000000  0003ad23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000015b8  00000000  00000000  00095f94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0009754c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000080 	.word	0x20000080
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005698 	.word	0x08005698

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000084 	.word	0x20000084
 8000104:	08005698 	.word	0x08005698

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0010      	movs	r0, r2
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	0019      	movs	r1, r3
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f001 f975 	bl	8001520 <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f001 f8c5 	bl	80013d0 <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f001 f967 	bl	8001520 <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f001 f95d 	bl	8001520 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 f8ed 	bl	8001454 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 f8e3 	bl	8001454 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_cfrcmple>:
 800029c:	4684      	mov	ip, r0
 800029e:	0008      	movs	r0, r1
 80002a0:	4661      	mov	r1, ip
 80002a2:	e7ff      	b.n	80002a4 <__aeabi_cfcmpeq>

080002a4 <__aeabi_cfcmpeq>:
 80002a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002a6:	f000 f9b9 	bl	800061c <__lesf2>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	d401      	bmi.n	80002b2 <__aeabi_cfcmpeq+0xe>
 80002ae:	2100      	movs	r1, #0
 80002b0:	42c8      	cmn	r0, r1
 80002b2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002b4 <__aeabi_fcmpeq>:
 80002b4:	b510      	push	{r4, lr}
 80002b6:	f000 f945 	bl	8000544 <__eqsf2>
 80002ba:	4240      	negs	r0, r0
 80002bc:	3001      	adds	r0, #1
 80002be:	bd10      	pop	{r4, pc}

080002c0 <__aeabi_fcmplt>:
 80002c0:	b510      	push	{r4, lr}
 80002c2:	f000 f9ab 	bl	800061c <__lesf2>
 80002c6:	2800      	cmp	r0, #0
 80002c8:	db01      	blt.n	80002ce <__aeabi_fcmplt+0xe>
 80002ca:	2000      	movs	r0, #0
 80002cc:	bd10      	pop	{r4, pc}
 80002ce:	2001      	movs	r0, #1
 80002d0:	bd10      	pop	{r4, pc}
 80002d2:	46c0      	nop			; (mov r8, r8)

080002d4 <__aeabi_fcmple>:
 80002d4:	b510      	push	{r4, lr}
 80002d6:	f000 f9a1 	bl	800061c <__lesf2>
 80002da:	2800      	cmp	r0, #0
 80002dc:	dd01      	ble.n	80002e2 <__aeabi_fcmple+0xe>
 80002de:	2000      	movs	r0, #0
 80002e0:	bd10      	pop	{r4, pc}
 80002e2:	2001      	movs	r0, #1
 80002e4:	bd10      	pop	{r4, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)

080002e8 <__aeabi_fcmpgt>:
 80002e8:	b510      	push	{r4, lr}
 80002ea:	f000 f951 	bl	8000590 <__gesf2>
 80002ee:	2800      	cmp	r0, #0
 80002f0:	dc01      	bgt.n	80002f6 <__aeabi_fcmpgt+0xe>
 80002f2:	2000      	movs	r0, #0
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	2001      	movs	r0, #1
 80002f8:	bd10      	pop	{r4, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)

080002fc <__aeabi_fcmpge>:
 80002fc:	b510      	push	{r4, lr}
 80002fe:	f000 f947 	bl	8000590 <__gesf2>
 8000302:	2800      	cmp	r0, #0
 8000304:	da01      	bge.n	800030a <__aeabi_fcmpge+0xe>
 8000306:	2000      	movs	r0, #0
 8000308:	bd10      	pop	{r4, pc}
 800030a:	2001      	movs	r0, #1
 800030c:	bd10      	pop	{r4, pc}
 800030e:	46c0      	nop			; (mov r8, r8)

08000310 <__aeabi_fdiv>:
 8000310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000312:	464f      	mov	r7, r9
 8000314:	4646      	mov	r6, r8
 8000316:	46d6      	mov	lr, sl
 8000318:	0245      	lsls	r5, r0, #9
 800031a:	b5c0      	push	{r6, r7, lr}
 800031c:	0047      	lsls	r7, r0, #1
 800031e:	1c0c      	adds	r4, r1, #0
 8000320:	0a6d      	lsrs	r5, r5, #9
 8000322:	0e3f      	lsrs	r7, r7, #24
 8000324:	0fc6      	lsrs	r6, r0, #31
 8000326:	2f00      	cmp	r7, #0
 8000328:	d100      	bne.n	800032c <__aeabi_fdiv+0x1c>
 800032a:	e06f      	b.n	800040c <__aeabi_fdiv+0xfc>
 800032c:	2fff      	cmp	r7, #255	; 0xff
 800032e:	d100      	bne.n	8000332 <__aeabi_fdiv+0x22>
 8000330:	e074      	b.n	800041c <__aeabi_fdiv+0x10c>
 8000332:	2300      	movs	r3, #0
 8000334:	2280      	movs	r2, #128	; 0x80
 8000336:	4699      	mov	r9, r3
 8000338:	469a      	mov	sl, r3
 800033a:	00ed      	lsls	r5, r5, #3
 800033c:	04d2      	lsls	r2, r2, #19
 800033e:	4315      	orrs	r5, r2
 8000340:	3f7f      	subs	r7, #127	; 0x7f
 8000342:	0263      	lsls	r3, r4, #9
 8000344:	0a5b      	lsrs	r3, r3, #9
 8000346:	4698      	mov	r8, r3
 8000348:	0063      	lsls	r3, r4, #1
 800034a:	0e1b      	lsrs	r3, r3, #24
 800034c:	0fe4      	lsrs	r4, r4, #31
 800034e:	2b00      	cmp	r3, #0
 8000350:	d04d      	beq.n	80003ee <__aeabi_fdiv+0xde>
 8000352:	2bff      	cmp	r3, #255	; 0xff
 8000354:	d045      	beq.n	80003e2 <__aeabi_fdiv+0xd2>
 8000356:	4642      	mov	r2, r8
 8000358:	2180      	movs	r1, #128	; 0x80
 800035a:	00d2      	lsls	r2, r2, #3
 800035c:	04c9      	lsls	r1, r1, #19
 800035e:	4311      	orrs	r1, r2
 8000360:	4688      	mov	r8, r1
 8000362:	2200      	movs	r2, #0
 8000364:	3b7f      	subs	r3, #127	; 0x7f
 8000366:	0031      	movs	r1, r6
 8000368:	1aff      	subs	r7, r7, r3
 800036a:	464b      	mov	r3, r9
 800036c:	4061      	eors	r1, r4
 800036e:	b2c9      	uxtb	r1, r1
 8000370:	2b0f      	cmp	r3, #15
 8000372:	d900      	bls.n	8000376 <__aeabi_fdiv+0x66>
 8000374:	e0b8      	b.n	80004e8 <__aeabi_fdiv+0x1d8>
 8000376:	4870      	ldr	r0, [pc, #448]	; (8000538 <__aeabi_fdiv+0x228>)
 8000378:	009b      	lsls	r3, r3, #2
 800037a:	58c3      	ldr	r3, [r0, r3]
 800037c:	469f      	mov	pc, r3
 800037e:	2300      	movs	r3, #0
 8000380:	4698      	mov	r8, r3
 8000382:	0026      	movs	r6, r4
 8000384:	4645      	mov	r5, r8
 8000386:	4692      	mov	sl, r2
 8000388:	4653      	mov	r3, sl
 800038a:	2b02      	cmp	r3, #2
 800038c:	d100      	bne.n	8000390 <__aeabi_fdiv+0x80>
 800038e:	e08d      	b.n	80004ac <__aeabi_fdiv+0x19c>
 8000390:	2b03      	cmp	r3, #3
 8000392:	d100      	bne.n	8000396 <__aeabi_fdiv+0x86>
 8000394:	e0a1      	b.n	80004da <__aeabi_fdiv+0x1ca>
 8000396:	2b01      	cmp	r3, #1
 8000398:	d018      	beq.n	80003cc <__aeabi_fdiv+0xbc>
 800039a:	003b      	movs	r3, r7
 800039c:	337f      	adds	r3, #127	; 0x7f
 800039e:	2b00      	cmp	r3, #0
 80003a0:	dd6d      	ble.n	800047e <__aeabi_fdiv+0x16e>
 80003a2:	076a      	lsls	r2, r5, #29
 80003a4:	d004      	beq.n	80003b0 <__aeabi_fdiv+0xa0>
 80003a6:	220f      	movs	r2, #15
 80003a8:	402a      	ands	r2, r5
 80003aa:	2a04      	cmp	r2, #4
 80003ac:	d000      	beq.n	80003b0 <__aeabi_fdiv+0xa0>
 80003ae:	3504      	adds	r5, #4
 80003b0:	012a      	lsls	r2, r5, #4
 80003b2:	d503      	bpl.n	80003bc <__aeabi_fdiv+0xac>
 80003b4:	4b61      	ldr	r3, [pc, #388]	; (800053c <__aeabi_fdiv+0x22c>)
 80003b6:	401d      	ands	r5, r3
 80003b8:	003b      	movs	r3, r7
 80003ba:	3380      	adds	r3, #128	; 0x80
 80003bc:	2bfe      	cmp	r3, #254	; 0xfe
 80003be:	dd00      	ble.n	80003c2 <__aeabi_fdiv+0xb2>
 80003c0:	e074      	b.n	80004ac <__aeabi_fdiv+0x19c>
 80003c2:	01aa      	lsls	r2, r5, #6
 80003c4:	0a52      	lsrs	r2, r2, #9
 80003c6:	b2d8      	uxtb	r0, r3
 80003c8:	e002      	b.n	80003d0 <__aeabi_fdiv+0xc0>
 80003ca:	000e      	movs	r6, r1
 80003cc:	2000      	movs	r0, #0
 80003ce:	2200      	movs	r2, #0
 80003d0:	05c0      	lsls	r0, r0, #23
 80003d2:	07f6      	lsls	r6, r6, #31
 80003d4:	4310      	orrs	r0, r2
 80003d6:	4330      	orrs	r0, r6
 80003d8:	bce0      	pop	{r5, r6, r7}
 80003da:	46ba      	mov	sl, r7
 80003dc:	46b1      	mov	r9, r6
 80003de:	46a8      	mov	r8, r5
 80003e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003e2:	4643      	mov	r3, r8
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d13f      	bne.n	8000468 <__aeabi_fdiv+0x158>
 80003e8:	2202      	movs	r2, #2
 80003ea:	3fff      	subs	r7, #255	; 0xff
 80003ec:	e003      	b.n	80003f6 <__aeabi_fdiv+0xe6>
 80003ee:	4643      	mov	r3, r8
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d12d      	bne.n	8000450 <__aeabi_fdiv+0x140>
 80003f4:	2201      	movs	r2, #1
 80003f6:	0031      	movs	r1, r6
 80003f8:	464b      	mov	r3, r9
 80003fa:	4061      	eors	r1, r4
 80003fc:	b2c9      	uxtb	r1, r1
 80003fe:	4313      	orrs	r3, r2
 8000400:	2b0f      	cmp	r3, #15
 8000402:	d838      	bhi.n	8000476 <__aeabi_fdiv+0x166>
 8000404:	484e      	ldr	r0, [pc, #312]	; (8000540 <__aeabi_fdiv+0x230>)
 8000406:	009b      	lsls	r3, r3, #2
 8000408:	58c3      	ldr	r3, [r0, r3]
 800040a:	469f      	mov	pc, r3
 800040c:	2d00      	cmp	r5, #0
 800040e:	d113      	bne.n	8000438 <__aeabi_fdiv+0x128>
 8000410:	2304      	movs	r3, #4
 8000412:	4699      	mov	r9, r3
 8000414:	3b03      	subs	r3, #3
 8000416:	2700      	movs	r7, #0
 8000418:	469a      	mov	sl, r3
 800041a:	e792      	b.n	8000342 <__aeabi_fdiv+0x32>
 800041c:	2d00      	cmp	r5, #0
 800041e:	d105      	bne.n	800042c <__aeabi_fdiv+0x11c>
 8000420:	2308      	movs	r3, #8
 8000422:	4699      	mov	r9, r3
 8000424:	3b06      	subs	r3, #6
 8000426:	27ff      	movs	r7, #255	; 0xff
 8000428:	469a      	mov	sl, r3
 800042a:	e78a      	b.n	8000342 <__aeabi_fdiv+0x32>
 800042c:	230c      	movs	r3, #12
 800042e:	4699      	mov	r9, r3
 8000430:	3b09      	subs	r3, #9
 8000432:	27ff      	movs	r7, #255	; 0xff
 8000434:	469a      	mov	sl, r3
 8000436:	e784      	b.n	8000342 <__aeabi_fdiv+0x32>
 8000438:	0028      	movs	r0, r5
 800043a:	f002 f835 	bl	80024a8 <__clzsi2>
 800043e:	2776      	movs	r7, #118	; 0x76
 8000440:	1f43      	subs	r3, r0, #5
 8000442:	409d      	lsls	r5, r3
 8000444:	2300      	movs	r3, #0
 8000446:	427f      	negs	r7, r7
 8000448:	4699      	mov	r9, r3
 800044a:	469a      	mov	sl, r3
 800044c:	1a3f      	subs	r7, r7, r0
 800044e:	e778      	b.n	8000342 <__aeabi_fdiv+0x32>
 8000450:	4640      	mov	r0, r8
 8000452:	f002 f829 	bl	80024a8 <__clzsi2>
 8000456:	4642      	mov	r2, r8
 8000458:	1f43      	subs	r3, r0, #5
 800045a:	409a      	lsls	r2, r3
 800045c:	2376      	movs	r3, #118	; 0x76
 800045e:	425b      	negs	r3, r3
 8000460:	4690      	mov	r8, r2
 8000462:	1a1b      	subs	r3, r3, r0
 8000464:	2200      	movs	r2, #0
 8000466:	e77e      	b.n	8000366 <__aeabi_fdiv+0x56>
 8000468:	2303      	movs	r3, #3
 800046a:	464a      	mov	r2, r9
 800046c:	431a      	orrs	r2, r3
 800046e:	4691      	mov	r9, r2
 8000470:	33fc      	adds	r3, #252	; 0xfc
 8000472:	2203      	movs	r2, #3
 8000474:	e777      	b.n	8000366 <__aeabi_fdiv+0x56>
 8000476:	000e      	movs	r6, r1
 8000478:	20ff      	movs	r0, #255	; 0xff
 800047a:	2200      	movs	r2, #0
 800047c:	e7a8      	b.n	80003d0 <__aeabi_fdiv+0xc0>
 800047e:	2201      	movs	r2, #1
 8000480:	1ad3      	subs	r3, r2, r3
 8000482:	2b1b      	cmp	r3, #27
 8000484:	dca2      	bgt.n	80003cc <__aeabi_fdiv+0xbc>
 8000486:	379e      	adds	r7, #158	; 0x9e
 8000488:	002a      	movs	r2, r5
 800048a:	40bd      	lsls	r5, r7
 800048c:	40da      	lsrs	r2, r3
 800048e:	1e6b      	subs	r3, r5, #1
 8000490:	419d      	sbcs	r5, r3
 8000492:	4315      	orrs	r5, r2
 8000494:	076a      	lsls	r2, r5, #29
 8000496:	d004      	beq.n	80004a2 <__aeabi_fdiv+0x192>
 8000498:	220f      	movs	r2, #15
 800049a:	402a      	ands	r2, r5
 800049c:	2a04      	cmp	r2, #4
 800049e:	d000      	beq.n	80004a2 <__aeabi_fdiv+0x192>
 80004a0:	3504      	adds	r5, #4
 80004a2:	016a      	lsls	r2, r5, #5
 80004a4:	d544      	bpl.n	8000530 <__aeabi_fdiv+0x220>
 80004a6:	2001      	movs	r0, #1
 80004a8:	2200      	movs	r2, #0
 80004aa:	e791      	b.n	80003d0 <__aeabi_fdiv+0xc0>
 80004ac:	20ff      	movs	r0, #255	; 0xff
 80004ae:	2200      	movs	r2, #0
 80004b0:	e78e      	b.n	80003d0 <__aeabi_fdiv+0xc0>
 80004b2:	2280      	movs	r2, #128	; 0x80
 80004b4:	2600      	movs	r6, #0
 80004b6:	20ff      	movs	r0, #255	; 0xff
 80004b8:	03d2      	lsls	r2, r2, #15
 80004ba:	e789      	b.n	80003d0 <__aeabi_fdiv+0xc0>
 80004bc:	2300      	movs	r3, #0
 80004be:	4698      	mov	r8, r3
 80004c0:	2280      	movs	r2, #128	; 0x80
 80004c2:	03d2      	lsls	r2, r2, #15
 80004c4:	4215      	tst	r5, r2
 80004c6:	d008      	beq.n	80004da <__aeabi_fdiv+0x1ca>
 80004c8:	4643      	mov	r3, r8
 80004ca:	4213      	tst	r3, r2
 80004cc:	d105      	bne.n	80004da <__aeabi_fdiv+0x1ca>
 80004ce:	431a      	orrs	r2, r3
 80004d0:	0252      	lsls	r2, r2, #9
 80004d2:	0026      	movs	r6, r4
 80004d4:	20ff      	movs	r0, #255	; 0xff
 80004d6:	0a52      	lsrs	r2, r2, #9
 80004d8:	e77a      	b.n	80003d0 <__aeabi_fdiv+0xc0>
 80004da:	2280      	movs	r2, #128	; 0x80
 80004dc:	03d2      	lsls	r2, r2, #15
 80004de:	432a      	orrs	r2, r5
 80004e0:	0252      	lsls	r2, r2, #9
 80004e2:	20ff      	movs	r0, #255	; 0xff
 80004e4:	0a52      	lsrs	r2, r2, #9
 80004e6:	e773      	b.n	80003d0 <__aeabi_fdiv+0xc0>
 80004e8:	4642      	mov	r2, r8
 80004ea:	016b      	lsls	r3, r5, #5
 80004ec:	0155      	lsls	r5, r2, #5
 80004ee:	42ab      	cmp	r3, r5
 80004f0:	d21a      	bcs.n	8000528 <__aeabi_fdiv+0x218>
 80004f2:	201b      	movs	r0, #27
 80004f4:	2200      	movs	r2, #0
 80004f6:	3f01      	subs	r7, #1
 80004f8:	2601      	movs	r6, #1
 80004fa:	001c      	movs	r4, r3
 80004fc:	0052      	lsls	r2, r2, #1
 80004fe:	005b      	lsls	r3, r3, #1
 8000500:	2c00      	cmp	r4, #0
 8000502:	db01      	blt.n	8000508 <__aeabi_fdiv+0x1f8>
 8000504:	429d      	cmp	r5, r3
 8000506:	d801      	bhi.n	800050c <__aeabi_fdiv+0x1fc>
 8000508:	1b5b      	subs	r3, r3, r5
 800050a:	4332      	orrs	r2, r6
 800050c:	3801      	subs	r0, #1
 800050e:	2800      	cmp	r0, #0
 8000510:	d1f3      	bne.n	80004fa <__aeabi_fdiv+0x1ea>
 8000512:	1e58      	subs	r0, r3, #1
 8000514:	4183      	sbcs	r3, r0
 8000516:	4313      	orrs	r3, r2
 8000518:	001d      	movs	r5, r3
 800051a:	003b      	movs	r3, r7
 800051c:	337f      	adds	r3, #127	; 0x7f
 800051e:	000e      	movs	r6, r1
 8000520:	2b00      	cmp	r3, #0
 8000522:	dd00      	ble.n	8000526 <__aeabi_fdiv+0x216>
 8000524:	e73d      	b.n	80003a2 <__aeabi_fdiv+0x92>
 8000526:	e7aa      	b.n	800047e <__aeabi_fdiv+0x16e>
 8000528:	201a      	movs	r0, #26
 800052a:	2201      	movs	r2, #1
 800052c:	1b5b      	subs	r3, r3, r5
 800052e:	e7e3      	b.n	80004f8 <__aeabi_fdiv+0x1e8>
 8000530:	01aa      	lsls	r2, r5, #6
 8000532:	2000      	movs	r0, #0
 8000534:	0a52      	lsrs	r2, r2, #9
 8000536:	e74b      	b.n	80003d0 <__aeabi_fdiv+0xc0>
 8000538:	080056b0 	.word	0x080056b0
 800053c:	f7ffffff 	.word	0xf7ffffff
 8000540:	080056f0 	.word	0x080056f0

08000544 <__eqsf2>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	0042      	lsls	r2, r0, #1
 8000548:	0245      	lsls	r5, r0, #9
 800054a:	024e      	lsls	r6, r1, #9
 800054c:	004c      	lsls	r4, r1, #1
 800054e:	0fc3      	lsrs	r3, r0, #31
 8000550:	0a6d      	lsrs	r5, r5, #9
 8000552:	2001      	movs	r0, #1
 8000554:	0e12      	lsrs	r2, r2, #24
 8000556:	0a76      	lsrs	r6, r6, #9
 8000558:	0e24      	lsrs	r4, r4, #24
 800055a:	0fc9      	lsrs	r1, r1, #31
 800055c:	2aff      	cmp	r2, #255	; 0xff
 800055e:	d006      	beq.n	800056e <__eqsf2+0x2a>
 8000560:	2cff      	cmp	r4, #255	; 0xff
 8000562:	d003      	beq.n	800056c <__eqsf2+0x28>
 8000564:	42a2      	cmp	r2, r4
 8000566:	d101      	bne.n	800056c <__eqsf2+0x28>
 8000568:	42b5      	cmp	r5, r6
 800056a:	d006      	beq.n	800057a <__eqsf2+0x36>
 800056c:	bd70      	pop	{r4, r5, r6, pc}
 800056e:	2d00      	cmp	r5, #0
 8000570:	d1fc      	bne.n	800056c <__eqsf2+0x28>
 8000572:	2cff      	cmp	r4, #255	; 0xff
 8000574:	d1fa      	bne.n	800056c <__eqsf2+0x28>
 8000576:	2e00      	cmp	r6, #0
 8000578:	d1f8      	bne.n	800056c <__eqsf2+0x28>
 800057a:	428b      	cmp	r3, r1
 800057c:	d006      	beq.n	800058c <__eqsf2+0x48>
 800057e:	2001      	movs	r0, #1
 8000580:	2a00      	cmp	r2, #0
 8000582:	d1f3      	bne.n	800056c <__eqsf2+0x28>
 8000584:	0028      	movs	r0, r5
 8000586:	1e43      	subs	r3, r0, #1
 8000588:	4198      	sbcs	r0, r3
 800058a:	e7ef      	b.n	800056c <__eqsf2+0x28>
 800058c:	2000      	movs	r0, #0
 800058e:	e7ed      	b.n	800056c <__eqsf2+0x28>

08000590 <__gesf2>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	0042      	lsls	r2, r0, #1
 8000594:	0245      	lsls	r5, r0, #9
 8000596:	024e      	lsls	r6, r1, #9
 8000598:	004c      	lsls	r4, r1, #1
 800059a:	0fc3      	lsrs	r3, r0, #31
 800059c:	0a6d      	lsrs	r5, r5, #9
 800059e:	0e12      	lsrs	r2, r2, #24
 80005a0:	0a76      	lsrs	r6, r6, #9
 80005a2:	0e24      	lsrs	r4, r4, #24
 80005a4:	0fc8      	lsrs	r0, r1, #31
 80005a6:	2aff      	cmp	r2, #255	; 0xff
 80005a8:	d01b      	beq.n	80005e2 <__gesf2+0x52>
 80005aa:	2cff      	cmp	r4, #255	; 0xff
 80005ac:	d00e      	beq.n	80005cc <__gesf2+0x3c>
 80005ae:	2a00      	cmp	r2, #0
 80005b0:	d11b      	bne.n	80005ea <__gesf2+0x5a>
 80005b2:	2c00      	cmp	r4, #0
 80005b4:	d101      	bne.n	80005ba <__gesf2+0x2a>
 80005b6:	2e00      	cmp	r6, #0
 80005b8:	d01c      	beq.n	80005f4 <__gesf2+0x64>
 80005ba:	2d00      	cmp	r5, #0
 80005bc:	d00c      	beq.n	80005d8 <__gesf2+0x48>
 80005be:	4283      	cmp	r3, r0
 80005c0:	d01c      	beq.n	80005fc <__gesf2+0x6c>
 80005c2:	2102      	movs	r1, #2
 80005c4:	1e58      	subs	r0, r3, #1
 80005c6:	4008      	ands	r0, r1
 80005c8:	3801      	subs	r0, #1
 80005ca:	bd70      	pop	{r4, r5, r6, pc}
 80005cc:	2e00      	cmp	r6, #0
 80005ce:	d122      	bne.n	8000616 <__gesf2+0x86>
 80005d0:	2a00      	cmp	r2, #0
 80005d2:	d1f4      	bne.n	80005be <__gesf2+0x2e>
 80005d4:	2d00      	cmp	r5, #0
 80005d6:	d1f2      	bne.n	80005be <__gesf2+0x2e>
 80005d8:	2800      	cmp	r0, #0
 80005da:	d1f6      	bne.n	80005ca <__gesf2+0x3a>
 80005dc:	2001      	movs	r0, #1
 80005de:	4240      	negs	r0, r0
 80005e0:	e7f3      	b.n	80005ca <__gesf2+0x3a>
 80005e2:	2d00      	cmp	r5, #0
 80005e4:	d117      	bne.n	8000616 <__gesf2+0x86>
 80005e6:	2cff      	cmp	r4, #255	; 0xff
 80005e8:	d0f0      	beq.n	80005cc <__gesf2+0x3c>
 80005ea:	2c00      	cmp	r4, #0
 80005ec:	d1e7      	bne.n	80005be <__gesf2+0x2e>
 80005ee:	2e00      	cmp	r6, #0
 80005f0:	d1e5      	bne.n	80005be <__gesf2+0x2e>
 80005f2:	e7e6      	b.n	80005c2 <__gesf2+0x32>
 80005f4:	2000      	movs	r0, #0
 80005f6:	2d00      	cmp	r5, #0
 80005f8:	d0e7      	beq.n	80005ca <__gesf2+0x3a>
 80005fa:	e7e2      	b.n	80005c2 <__gesf2+0x32>
 80005fc:	42a2      	cmp	r2, r4
 80005fe:	dc05      	bgt.n	800060c <__gesf2+0x7c>
 8000600:	dbea      	blt.n	80005d8 <__gesf2+0x48>
 8000602:	42b5      	cmp	r5, r6
 8000604:	d802      	bhi.n	800060c <__gesf2+0x7c>
 8000606:	d3e7      	bcc.n	80005d8 <__gesf2+0x48>
 8000608:	2000      	movs	r0, #0
 800060a:	e7de      	b.n	80005ca <__gesf2+0x3a>
 800060c:	4243      	negs	r3, r0
 800060e:	4158      	adcs	r0, r3
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	3801      	subs	r0, #1
 8000614:	e7d9      	b.n	80005ca <__gesf2+0x3a>
 8000616:	2002      	movs	r0, #2
 8000618:	4240      	negs	r0, r0
 800061a:	e7d6      	b.n	80005ca <__gesf2+0x3a>

0800061c <__lesf2>:
 800061c:	b570      	push	{r4, r5, r6, lr}
 800061e:	0042      	lsls	r2, r0, #1
 8000620:	0245      	lsls	r5, r0, #9
 8000622:	024e      	lsls	r6, r1, #9
 8000624:	004c      	lsls	r4, r1, #1
 8000626:	0fc3      	lsrs	r3, r0, #31
 8000628:	0a6d      	lsrs	r5, r5, #9
 800062a:	0e12      	lsrs	r2, r2, #24
 800062c:	0a76      	lsrs	r6, r6, #9
 800062e:	0e24      	lsrs	r4, r4, #24
 8000630:	0fc8      	lsrs	r0, r1, #31
 8000632:	2aff      	cmp	r2, #255	; 0xff
 8000634:	d00b      	beq.n	800064e <__lesf2+0x32>
 8000636:	2cff      	cmp	r4, #255	; 0xff
 8000638:	d00d      	beq.n	8000656 <__lesf2+0x3a>
 800063a:	2a00      	cmp	r2, #0
 800063c:	d11f      	bne.n	800067e <__lesf2+0x62>
 800063e:	2c00      	cmp	r4, #0
 8000640:	d116      	bne.n	8000670 <__lesf2+0x54>
 8000642:	2e00      	cmp	r6, #0
 8000644:	d114      	bne.n	8000670 <__lesf2+0x54>
 8000646:	2000      	movs	r0, #0
 8000648:	2d00      	cmp	r5, #0
 800064a:	d010      	beq.n	800066e <__lesf2+0x52>
 800064c:	e009      	b.n	8000662 <__lesf2+0x46>
 800064e:	2d00      	cmp	r5, #0
 8000650:	d10c      	bne.n	800066c <__lesf2+0x50>
 8000652:	2cff      	cmp	r4, #255	; 0xff
 8000654:	d113      	bne.n	800067e <__lesf2+0x62>
 8000656:	2e00      	cmp	r6, #0
 8000658:	d108      	bne.n	800066c <__lesf2+0x50>
 800065a:	2a00      	cmp	r2, #0
 800065c:	d008      	beq.n	8000670 <__lesf2+0x54>
 800065e:	4283      	cmp	r3, r0
 8000660:	d012      	beq.n	8000688 <__lesf2+0x6c>
 8000662:	2102      	movs	r1, #2
 8000664:	1e58      	subs	r0, r3, #1
 8000666:	4008      	ands	r0, r1
 8000668:	3801      	subs	r0, #1
 800066a:	e000      	b.n	800066e <__lesf2+0x52>
 800066c:	2002      	movs	r0, #2
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	2d00      	cmp	r5, #0
 8000672:	d1f4      	bne.n	800065e <__lesf2+0x42>
 8000674:	2800      	cmp	r0, #0
 8000676:	d1fa      	bne.n	800066e <__lesf2+0x52>
 8000678:	2001      	movs	r0, #1
 800067a:	4240      	negs	r0, r0
 800067c:	e7f7      	b.n	800066e <__lesf2+0x52>
 800067e:	2c00      	cmp	r4, #0
 8000680:	d1ed      	bne.n	800065e <__lesf2+0x42>
 8000682:	2e00      	cmp	r6, #0
 8000684:	d1eb      	bne.n	800065e <__lesf2+0x42>
 8000686:	e7ec      	b.n	8000662 <__lesf2+0x46>
 8000688:	42a2      	cmp	r2, r4
 800068a:	dc05      	bgt.n	8000698 <__lesf2+0x7c>
 800068c:	dbf2      	blt.n	8000674 <__lesf2+0x58>
 800068e:	42b5      	cmp	r5, r6
 8000690:	d802      	bhi.n	8000698 <__lesf2+0x7c>
 8000692:	d3ef      	bcc.n	8000674 <__lesf2+0x58>
 8000694:	2000      	movs	r0, #0
 8000696:	e7ea      	b.n	800066e <__lesf2+0x52>
 8000698:	4243      	negs	r3, r0
 800069a:	4158      	adcs	r0, r3
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	3801      	subs	r0, #1
 80006a0:	e7e5      	b.n	800066e <__lesf2+0x52>
 80006a2:	46c0      	nop			; (mov r8, r8)

080006a4 <__aeabi_ui2f>:
 80006a4:	b570      	push	{r4, r5, r6, lr}
 80006a6:	1e04      	subs	r4, r0, #0
 80006a8:	d00e      	beq.n	80006c8 <__aeabi_ui2f+0x24>
 80006aa:	f001 fefd 	bl	80024a8 <__clzsi2>
 80006ae:	239e      	movs	r3, #158	; 0x9e
 80006b0:	0001      	movs	r1, r0
 80006b2:	1a1b      	subs	r3, r3, r0
 80006b4:	2b96      	cmp	r3, #150	; 0x96
 80006b6:	dc0c      	bgt.n	80006d2 <__aeabi_ui2f+0x2e>
 80006b8:	2808      	cmp	r0, #8
 80006ba:	d02c      	beq.n	8000716 <__aeabi_ui2f+0x72>
 80006bc:	3908      	subs	r1, #8
 80006be:	408c      	lsls	r4, r1
 80006c0:	0264      	lsls	r4, r4, #9
 80006c2:	0a64      	lsrs	r4, r4, #9
 80006c4:	b2d8      	uxtb	r0, r3
 80006c6:	e001      	b.n	80006cc <__aeabi_ui2f+0x28>
 80006c8:	2000      	movs	r0, #0
 80006ca:	2400      	movs	r4, #0
 80006cc:	05c0      	lsls	r0, r0, #23
 80006ce:	4320      	orrs	r0, r4
 80006d0:	bd70      	pop	{r4, r5, r6, pc}
 80006d2:	2b99      	cmp	r3, #153	; 0x99
 80006d4:	dd0a      	ble.n	80006ec <__aeabi_ui2f+0x48>
 80006d6:	0002      	movs	r2, r0
 80006d8:	0020      	movs	r0, r4
 80006da:	321b      	adds	r2, #27
 80006dc:	4090      	lsls	r0, r2
 80006de:	0002      	movs	r2, r0
 80006e0:	1e50      	subs	r0, r2, #1
 80006e2:	4182      	sbcs	r2, r0
 80006e4:	2005      	movs	r0, #5
 80006e6:	1a40      	subs	r0, r0, r1
 80006e8:	40c4      	lsrs	r4, r0
 80006ea:	4314      	orrs	r4, r2
 80006ec:	2905      	cmp	r1, #5
 80006ee:	dc16      	bgt.n	800071e <__aeabi_ui2f+0x7a>
 80006f0:	0022      	movs	r2, r4
 80006f2:	480f      	ldr	r0, [pc, #60]	; (8000730 <__aeabi_ui2f+0x8c>)
 80006f4:	4002      	ands	r2, r0
 80006f6:	0765      	lsls	r5, r4, #29
 80006f8:	d009      	beq.n	800070e <__aeabi_ui2f+0x6a>
 80006fa:	250f      	movs	r5, #15
 80006fc:	402c      	ands	r4, r5
 80006fe:	2c04      	cmp	r4, #4
 8000700:	d005      	beq.n	800070e <__aeabi_ui2f+0x6a>
 8000702:	3204      	adds	r2, #4
 8000704:	0154      	lsls	r4, r2, #5
 8000706:	d502      	bpl.n	800070e <__aeabi_ui2f+0x6a>
 8000708:	239f      	movs	r3, #159	; 0x9f
 800070a:	4002      	ands	r2, r0
 800070c:	1a5b      	subs	r3, r3, r1
 800070e:	0192      	lsls	r2, r2, #6
 8000710:	0a54      	lsrs	r4, r2, #9
 8000712:	b2d8      	uxtb	r0, r3
 8000714:	e7da      	b.n	80006cc <__aeabi_ui2f+0x28>
 8000716:	0264      	lsls	r4, r4, #9
 8000718:	2096      	movs	r0, #150	; 0x96
 800071a:	0a64      	lsrs	r4, r4, #9
 800071c:	e7d6      	b.n	80006cc <__aeabi_ui2f+0x28>
 800071e:	1f4a      	subs	r2, r1, #5
 8000720:	4094      	lsls	r4, r2
 8000722:	0022      	movs	r2, r4
 8000724:	4802      	ldr	r0, [pc, #8]	; (8000730 <__aeabi_ui2f+0x8c>)
 8000726:	4002      	ands	r2, r0
 8000728:	0765      	lsls	r5, r4, #29
 800072a:	d0f0      	beq.n	800070e <__aeabi_ui2f+0x6a>
 800072c:	e7e5      	b.n	80006fa <__aeabi_ui2f+0x56>
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	fbffffff 	.word	0xfbffffff

08000734 <__aeabi_dadd>:
 8000734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000736:	464f      	mov	r7, r9
 8000738:	4646      	mov	r6, r8
 800073a:	46d6      	mov	lr, sl
 800073c:	0004      	movs	r4, r0
 800073e:	b5c0      	push	{r6, r7, lr}
 8000740:	001f      	movs	r7, r3
 8000742:	030b      	lsls	r3, r1, #12
 8000744:	0010      	movs	r0, r2
 8000746:	004e      	lsls	r6, r1, #1
 8000748:	0a5b      	lsrs	r3, r3, #9
 800074a:	0fcd      	lsrs	r5, r1, #31
 800074c:	0f61      	lsrs	r1, r4, #29
 800074e:	007a      	lsls	r2, r7, #1
 8000750:	4319      	orrs	r1, r3
 8000752:	00e3      	lsls	r3, r4, #3
 8000754:	033c      	lsls	r4, r7, #12
 8000756:	0fff      	lsrs	r7, r7, #31
 8000758:	46bc      	mov	ip, r7
 800075a:	0a64      	lsrs	r4, r4, #9
 800075c:	0f47      	lsrs	r7, r0, #29
 800075e:	4327      	orrs	r7, r4
 8000760:	0d76      	lsrs	r6, r6, #21
 8000762:	0d52      	lsrs	r2, r2, #21
 8000764:	00c0      	lsls	r0, r0, #3
 8000766:	46b9      	mov	r9, r7
 8000768:	4680      	mov	r8, r0
 800076a:	1ab7      	subs	r7, r6, r2
 800076c:	4565      	cmp	r5, ip
 800076e:	d100      	bne.n	8000772 <__aeabi_dadd+0x3e>
 8000770:	e09b      	b.n	80008aa <__aeabi_dadd+0x176>
 8000772:	2f00      	cmp	r7, #0
 8000774:	dc00      	bgt.n	8000778 <__aeabi_dadd+0x44>
 8000776:	e084      	b.n	8000882 <__aeabi_dadd+0x14e>
 8000778:	2a00      	cmp	r2, #0
 800077a:	d100      	bne.n	800077e <__aeabi_dadd+0x4a>
 800077c:	e0be      	b.n	80008fc <__aeabi_dadd+0x1c8>
 800077e:	4ac8      	ldr	r2, [pc, #800]	; (8000aa0 <__aeabi_dadd+0x36c>)
 8000780:	4296      	cmp	r6, r2
 8000782:	d100      	bne.n	8000786 <__aeabi_dadd+0x52>
 8000784:	e124      	b.n	80009d0 <__aeabi_dadd+0x29c>
 8000786:	2280      	movs	r2, #128	; 0x80
 8000788:	464c      	mov	r4, r9
 800078a:	0412      	lsls	r2, r2, #16
 800078c:	4314      	orrs	r4, r2
 800078e:	46a1      	mov	r9, r4
 8000790:	2f38      	cmp	r7, #56	; 0x38
 8000792:	dd00      	ble.n	8000796 <__aeabi_dadd+0x62>
 8000794:	e167      	b.n	8000a66 <__aeabi_dadd+0x332>
 8000796:	2f1f      	cmp	r7, #31
 8000798:	dd00      	ble.n	800079c <__aeabi_dadd+0x68>
 800079a:	e1d6      	b.n	8000b4a <__aeabi_dadd+0x416>
 800079c:	2220      	movs	r2, #32
 800079e:	464c      	mov	r4, r9
 80007a0:	1bd2      	subs	r2, r2, r7
 80007a2:	4094      	lsls	r4, r2
 80007a4:	46a2      	mov	sl, r4
 80007a6:	4644      	mov	r4, r8
 80007a8:	40fc      	lsrs	r4, r7
 80007aa:	0020      	movs	r0, r4
 80007ac:	4654      	mov	r4, sl
 80007ae:	4304      	orrs	r4, r0
 80007b0:	4640      	mov	r0, r8
 80007b2:	4090      	lsls	r0, r2
 80007b4:	1e42      	subs	r2, r0, #1
 80007b6:	4190      	sbcs	r0, r2
 80007b8:	464a      	mov	r2, r9
 80007ba:	40fa      	lsrs	r2, r7
 80007bc:	4304      	orrs	r4, r0
 80007be:	1a89      	subs	r1, r1, r2
 80007c0:	1b1c      	subs	r4, r3, r4
 80007c2:	42a3      	cmp	r3, r4
 80007c4:	4192      	sbcs	r2, r2
 80007c6:	4252      	negs	r2, r2
 80007c8:	1a8b      	subs	r3, r1, r2
 80007ca:	469a      	mov	sl, r3
 80007cc:	4653      	mov	r3, sl
 80007ce:	021b      	lsls	r3, r3, #8
 80007d0:	d400      	bmi.n	80007d4 <__aeabi_dadd+0xa0>
 80007d2:	e0d4      	b.n	800097e <__aeabi_dadd+0x24a>
 80007d4:	4653      	mov	r3, sl
 80007d6:	025a      	lsls	r2, r3, #9
 80007d8:	0a53      	lsrs	r3, r2, #9
 80007da:	469a      	mov	sl, r3
 80007dc:	4653      	mov	r3, sl
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d100      	bne.n	80007e4 <__aeabi_dadd+0xb0>
 80007e2:	e104      	b.n	80009ee <__aeabi_dadd+0x2ba>
 80007e4:	4650      	mov	r0, sl
 80007e6:	f001 fe5f 	bl	80024a8 <__clzsi2>
 80007ea:	0003      	movs	r3, r0
 80007ec:	3b08      	subs	r3, #8
 80007ee:	2220      	movs	r2, #32
 80007f0:	0020      	movs	r0, r4
 80007f2:	1ad2      	subs	r2, r2, r3
 80007f4:	4651      	mov	r1, sl
 80007f6:	40d0      	lsrs	r0, r2
 80007f8:	4099      	lsls	r1, r3
 80007fa:	0002      	movs	r2, r0
 80007fc:	409c      	lsls	r4, r3
 80007fe:	430a      	orrs	r2, r1
 8000800:	42b3      	cmp	r3, r6
 8000802:	da00      	bge.n	8000806 <__aeabi_dadd+0xd2>
 8000804:	e102      	b.n	8000a0c <__aeabi_dadd+0x2d8>
 8000806:	1b9b      	subs	r3, r3, r6
 8000808:	1c59      	adds	r1, r3, #1
 800080a:	291f      	cmp	r1, #31
 800080c:	dd00      	ble.n	8000810 <__aeabi_dadd+0xdc>
 800080e:	e0a7      	b.n	8000960 <__aeabi_dadd+0x22c>
 8000810:	2320      	movs	r3, #32
 8000812:	0010      	movs	r0, r2
 8000814:	0026      	movs	r6, r4
 8000816:	1a5b      	subs	r3, r3, r1
 8000818:	409c      	lsls	r4, r3
 800081a:	4098      	lsls	r0, r3
 800081c:	40ce      	lsrs	r6, r1
 800081e:	40ca      	lsrs	r2, r1
 8000820:	1e63      	subs	r3, r4, #1
 8000822:	419c      	sbcs	r4, r3
 8000824:	4330      	orrs	r0, r6
 8000826:	4692      	mov	sl, r2
 8000828:	2600      	movs	r6, #0
 800082a:	4304      	orrs	r4, r0
 800082c:	0763      	lsls	r3, r4, #29
 800082e:	d009      	beq.n	8000844 <__aeabi_dadd+0x110>
 8000830:	230f      	movs	r3, #15
 8000832:	4023      	ands	r3, r4
 8000834:	2b04      	cmp	r3, #4
 8000836:	d005      	beq.n	8000844 <__aeabi_dadd+0x110>
 8000838:	1d23      	adds	r3, r4, #4
 800083a:	42a3      	cmp	r3, r4
 800083c:	41a4      	sbcs	r4, r4
 800083e:	4264      	negs	r4, r4
 8000840:	44a2      	add	sl, r4
 8000842:	001c      	movs	r4, r3
 8000844:	4653      	mov	r3, sl
 8000846:	021b      	lsls	r3, r3, #8
 8000848:	d400      	bmi.n	800084c <__aeabi_dadd+0x118>
 800084a:	e09b      	b.n	8000984 <__aeabi_dadd+0x250>
 800084c:	4b94      	ldr	r3, [pc, #592]	; (8000aa0 <__aeabi_dadd+0x36c>)
 800084e:	3601      	adds	r6, #1
 8000850:	429e      	cmp	r6, r3
 8000852:	d100      	bne.n	8000856 <__aeabi_dadd+0x122>
 8000854:	e0b8      	b.n	80009c8 <__aeabi_dadd+0x294>
 8000856:	4653      	mov	r3, sl
 8000858:	4992      	ldr	r1, [pc, #584]	; (8000aa4 <__aeabi_dadd+0x370>)
 800085a:	08e4      	lsrs	r4, r4, #3
 800085c:	400b      	ands	r3, r1
 800085e:	0019      	movs	r1, r3
 8000860:	075b      	lsls	r3, r3, #29
 8000862:	4323      	orrs	r3, r4
 8000864:	0572      	lsls	r2, r6, #21
 8000866:	024c      	lsls	r4, r1, #9
 8000868:	0b24      	lsrs	r4, r4, #12
 800086a:	0d52      	lsrs	r2, r2, #21
 800086c:	0512      	lsls	r2, r2, #20
 800086e:	07ed      	lsls	r5, r5, #31
 8000870:	4322      	orrs	r2, r4
 8000872:	432a      	orrs	r2, r5
 8000874:	0018      	movs	r0, r3
 8000876:	0011      	movs	r1, r2
 8000878:	bce0      	pop	{r5, r6, r7}
 800087a:	46ba      	mov	sl, r7
 800087c:	46b1      	mov	r9, r6
 800087e:	46a8      	mov	r8, r5
 8000880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000882:	2f00      	cmp	r7, #0
 8000884:	d048      	beq.n	8000918 <__aeabi_dadd+0x1e4>
 8000886:	1b97      	subs	r7, r2, r6
 8000888:	2e00      	cmp	r6, #0
 800088a:	d000      	beq.n	800088e <__aeabi_dadd+0x15a>
 800088c:	e10e      	b.n	8000aac <__aeabi_dadd+0x378>
 800088e:	000c      	movs	r4, r1
 8000890:	431c      	orrs	r4, r3
 8000892:	d100      	bne.n	8000896 <__aeabi_dadd+0x162>
 8000894:	e1b7      	b.n	8000c06 <__aeabi_dadd+0x4d2>
 8000896:	1e7c      	subs	r4, r7, #1
 8000898:	2f01      	cmp	r7, #1
 800089a:	d100      	bne.n	800089e <__aeabi_dadd+0x16a>
 800089c:	e226      	b.n	8000cec <__aeabi_dadd+0x5b8>
 800089e:	4d80      	ldr	r5, [pc, #512]	; (8000aa0 <__aeabi_dadd+0x36c>)
 80008a0:	42af      	cmp	r7, r5
 80008a2:	d100      	bne.n	80008a6 <__aeabi_dadd+0x172>
 80008a4:	e1d5      	b.n	8000c52 <__aeabi_dadd+0x51e>
 80008a6:	0027      	movs	r7, r4
 80008a8:	e107      	b.n	8000aba <__aeabi_dadd+0x386>
 80008aa:	2f00      	cmp	r7, #0
 80008ac:	dc00      	bgt.n	80008b0 <__aeabi_dadd+0x17c>
 80008ae:	e0b2      	b.n	8000a16 <__aeabi_dadd+0x2e2>
 80008b0:	2a00      	cmp	r2, #0
 80008b2:	d047      	beq.n	8000944 <__aeabi_dadd+0x210>
 80008b4:	4a7a      	ldr	r2, [pc, #488]	; (8000aa0 <__aeabi_dadd+0x36c>)
 80008b6:	4296      	cmp	r6, r2
 80008b8:	d100      	bne.n	80008bc <__aeabi_dadd+0x188>
 80008ba:	e089      	b.n	80009d0 <__aeabi_dadd+0x29c>
 80008bc:	2280      	movs	r2, #128	; 0x80
 80008be:	464c      	mov	r4, r9
 80008c0:	0412      	lsls	r2, r2, #16
 80008c2:	4314      	orrs	r4, r2
 80008c4:	46a1      	mov	r9, r4
 80008c6:	2f38      	cmp	r7, #56	; 0x38
 80008c8:	dc6b      	bgt.n	80009a2 <__aeabi_dadd+0x26e>
 80008ca:	2f1f      	cmp	r7, #31
 80008cc:	dc00      	bgt.n	80008d0 <__aeabi_dadd+0x19c>
 80008ce:	e16e      	b.n	8000bae <__aeabi_dadd+0x47a>
 80008d0:	003a      	movs	r2, r7
 80008d2:	4648      	mov	r0, r9
 80008d4:	3a20      	subs	r2, #32
 80008d6:	40d0      	lsrs	r0, r2
 80008d8:	4684      	mov	ip, r0
 80008da:	2f20      	cmp	r7, #32
 80008dc:	d007      	beq.n	80008ee <__aeabi_dadd+0x1ba>
 80008de:	2240      	movs	r2, #64	; 0x40
 80008e0:	4648      	mov	r0, r9
 80008e2:	1bd2      	subs	r2, r2, r7
 80008e4:	4090      	lsls	r0, r2
 80008e6:	0002      	movs	r2, r0
 80008e8:	4640      	mov	r0, r8
 80008ea:	4310      	orrs	r0, r2
 80008ec:	4680      	mov	r8, r0
 80008ee:	4640      	mov	r0, r8
 80008f0:	1e42      	subs	r2, r0, #1
 80008f2:	4190      	sbcs	r0, r2
 80008f4:	4662      	mov	r2, ip
 80008f6:	0004      	movs	r4, r0
 80008f8:	4314      	orrs	r4, r2
 80008fa:	e057      	b.n	80009ac <__aeabi_dadd+0x278>
 80008fc:	464a      	mov	r2, r9
 80008fe:	4302      	orrs	r2, r0
 8000900:	d100      	bne.n	8000904 <__aeabi_dadd+0x1d0>
 8000902:	e103      	b.n	8000b0c <__aeabi_dadd+0x3d8>
 8000904:	1e7a      	subs	r2, r7, #1
 8000906:	2f01      	cmp	r7, #1
 8000908:	d100      	bne.n	800090c <__aeabi_dadd+0x1d8>
 800090a:	e193      	b.n	8000c34 <__aeabi_dadd+0x500>
 800090c:	4c64      	ldr	r4, [pc, #400]	; (8000aa0 <__aeabi_dadd+0x36c>)
 800090e:	42a7      	cmp	r7, r4
 8000910:	d100      	bne.n	8000914 <__aeabi_dadd+0x1e0>
 8000912:	e18a      	b.n	8000c2a <__aeabi_dadd+0x4f6>
 8000914:	0017      	movs	r7, r2
 8000916:	e73b      	b.n	8000790 <__aeabi_dadd+0x5c>
 8000918:	4c63      	ldr	r4, [pc, #396]	; (8000aa8 <__aeabi_dadd+0x374>)
 800091a:	1c72      	adds	r2, r6, #1
 800091c:	4222      	tst	r2, r4
 800091e:	d000      	beq.n	8000922 <__aeabi_dadd+0x1ee>
 8000920:	e0e0      	b.n	8000ae4 <__aeabi_dadd+0x3b0>
 8000922:	000a      	movs	r2, r1
 8000924:	431a      	orrs	r2, r3
 8000926:	2e00      	cmp	r6, #0
 8000928:	d000      	beq.n	800092c <__aeabi_dadd+0x1f8>
 800092a:	e174      	b.n	8000c16 <__aeabi_dadd+0x4e2>
 800092c:	2a00      	cmp	r2, #0
 800092e:	d100      	bne.n	8000932 <__aeabi_dadd+0x1fe>
 8000930:	e1d0      	b.n	8000cd4 <__aeabi_dadd+0x5a0>
 8000932:	464a      	mov	r2, r9
 8000934:	4302      	orrs	r2, r0
 8000936:	d000      	beq.n	800093a <__aeabi_dadd+0x206>
 8000938:	e1e3      	b.n	8000d02 <__aeabi_dadd+0x5ce>
 800093a:	074a      	lsls	r2, r1, #29
 800093c:	08db      	lsrs	r3, r3, #3
 800093e:	4313      	orrs	r3, r2
 8000940:	08c9      	lsrs	r1, r1, #3
 8000942:	e029      	b.n	8000998 <__aeabi_dadd+0x264>
 8000944:	464a      	mov	r2, r9
 8000946:	4302      	orrs	r2, r0
 8000948:	d100      	bne.n	800094c <__aeabi_dadd+0x218>
 800094a:	e17d      	b.n	8000c48 <__aeabi_dadd+0x514>
 800094c:	1e7a      	subs	r2, r7, #1
 800094e:	2f01      	cmp	r7, #1
 8000950:	d100      	bne.n	8000954 <__aeabi_dadd+0x220>
 8000952:	e0e0      	b.n	8000b16 <__aeabi_dadd+0x3e2>
 8000954:	4c52      	ldr	r4, [pc, #328]	; (8000aa0 <__aeabi_dadd+0x36c>)
 8000956:	42a7      	cmp	r7, r4
 8000958:	d100      	bne.n	800095c <__aeabi_dadd+0x228>
 800095a:	e166      	b.n	8000c2a <__aeabi_dadd+0x4f6>
 800095c:	0017      	movs	r7, r2
 800095e:	e7b2      	b.n	80008c6 <__aeabi_dadd+0x192>
 8000960:	0010      	movs	r0, r2
 8000962:	3b1f      	subs	r3, #31
 8000964:	40d8      	lsrs	r0, r3
 8000966:	2920      	cmp	r1, #32
 8000968:	d003      	beq.n	8000972 <__aeabi_dadd+0x23e>
 800096a:	2340      	movs	r3, #64	; 0x40
 800096c:	1a5b      	subs	r3, r3, r1
 800096e:	409a      	lsls	r2, r3
 8000970:	4314      	orrs	r4, r2
 8000972:	1e63      	subs	r3, r4, #1
 8000974:	419c      	sbcs	r4, r3
 8000976:	2300      	movs	r3, #0
 8000978:	2600      	movs	r6, #0
 800097a:	469a      	mov	sl, r3
 800097c:	4304      	orrs	r4, r0
 800097e:	0763      	lsls	r3, r4, #29
 8000980:	d000      	beq.n	8000984 <__aeabi_dadd+0x250>
 8000982:	e755      	b.n	8000830 <__aeabi_dadd+0xfc>
 8000984:	4652      	mov	r2, sl
 8000986:	08e3      	lsrs	r3, r4, #3
 8000988:	0752      	lsls	r2, r2, #29
 800098a:	4313      	orrs	r3, r2
 800098c:	4652      	mov	r2, sl
 800098e:	0037      	movs	r7, r6
 8000990:	08d1      	lsrs	r1, r2, #3
 8000992:	4a43      	ldr	r2, [pc, #268]	; (8000aa0 <__aeabi_dadd+0x36c>)
 8000994:	4297      	cmp	r7, r2
 8000996:	d01f      	beq.n	80009d8 <__aeabi_dadd+0x2a4>
 8000998:	0309      	lsls	r1, r1, #12
 800099a:	057a      	lsls	r2, r7, #21
 800099c:	0b0c      	lsrs	r4, r1, #12
 800099e:	0d52      	lsrs	r2, r2, #21
 80009a0:	e764      	b.n	800086c <__aeabi_dadd+0x138>
 80009a2:	4642      	mov	r2, r8
 80009a4:	464c      	mov	r4, r9
 80009a6:	4314      	orrs	r4, r2
 80009a8:	1e62      	subs	r2, r4, #1
 80009aa:	4194      	sbcs	r4, r2
 80009ac:	18e4      	adds	r4, r4, r3
 80009ae:	429c      	cmp	r4, r3
 80009b0:	4192      	sbcs	r2, r2
 80009b2:	4252      	negs	r2, r2
 80009b4:	4692      	mov	sl, r2
 80009b6:	448a      	add	sl, r1
 80009b8:	4653      	mov	r3, sl
 80009ba:	021b      	lsls	r3, r3, #8
 80009bc:	d5df      	bpl.n	800097e <__aeabi_dadd+0x24a>
 80009be:	4b38      	ldr	r3, [pc, #224]	; (8000aa0 <__aeabi_dadd+0x36c>)
 80009c0:	3601      	adds	r6, #1
 80009c2:	429e      	cmp	r6, r3
 80009c4:	d000      	beq.n	80009c8 <__aeabi_dadd+0x294>
 80009c6:	e0b3      	b.n	8000b30 <__aeabi_dadd+0x3fc>
 80009c8:	0032      	movs	r2, r6
 80009ca:	2400      	movs	r4, #0
 80009cc:	2300      	movs	r3, #0
 80009ce:	e74d      	b.n	800086c <__aeabi_dadd+0x138>
 80009d0:	074a      	lsls	r2, r1, #29
 80009d2:	08db      	lsrs	r3, r3, #3
 80009d4:	4313      	orrs	r3, r2
 80009d6:	08c9      	lsrs	r1, r1, #3
 80009d8:	001a      	movs	r2, r3
 80009da:	430a      	orrs	r2, r1
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x2ac>
 80009de:	e200      	b.n	8000de2 <__aeabi_dadd+0x6ae>
 80009e0:	2480      	movs	r4, #128	; 0x80
 80009e2:	0324      	lsls	r4, r4, #12
 80009e4:	430c      	orrs	r4, r1
 80009e6:	0324      	lsls	r4, r4, #12
 80009e8:	4a2d      	ldr	r2, [pc, #180]	; (8000aa0 <__aeabi_dadd+0x36c>)
 80009ea:	0b24      	lsrs	r4, r4, #12
 80009ec:	e73e      	b.n	800086c <__aeabi_dadd+0x138>
 80009ee:	0020      	movs	r0, r4
 80009f0:	f001 fd5a 	bl	80024a8 <__clzsi2>
 80009f4:	0003      	movs	r3, r0
 80009f6:	3318      	adds	r3, #24
 80009f8:	2b1f      	cmp	r3, #31
 80009fa:	dc00      	bgt.n	80009fe <__aeabi_dadd+0x2ca>
 80009fc:	e6f7      	b.n	80007ee <__aeabi_dadd+0xba>
 80009fe:	0022      	movs	r2, r4
 8000a00:	3808      	subs	r0, #8
 8000a02:	4082      	lsls	r2, r0
 8000a04:	2400      	movs	r4, #0
 8000a06:	42b3      	cmp	r3, r6
 8000a08:	db00      	blt.n	8000a0c <__aeabi_dadd+0x2d8>
 8000a0a:	e6fc      	b.n	8000806 <__aeabi_dadd+0xd2>
 8000a0c:	1af6      	subs	r6, r6, r3
 8000a0e:	4b25      	ldr	r3, [pc, #148]	; (8000aa4 <__aeabi_dadd+0x370>)
 8000a10:	401a      	ands	r2, r3
 8000a12:	4692      	mov	sl, r2
 8000a14:	e70a      	b.n	800082c <__aeabi_dadd+0xf8>
 8000a16:	2f00      	cmp	r7, #0
 8000a18:	d02b      	beq.n	8000a72 <__aeabi_dadd+0x33e>
 8000a1a:	1b97      	subs	r7, r2, r6
 8000a1c:	2e00      	cmp	r6, #0
 8000a1e:	d100      	bne.n	8000a22 <__aeabi_dadd+0x2ee>
 8000a20:	e0b8      	b.n	8000b94 <__aeabi_dadd+0x460>
 8000a22:	4c1f      	ldr	r4, [pc, #124]	; (8000aa0 <__aeabi_dadd+0x36c>)
 8000a24:	42a2      	cmp	r2, r4
 8000a26:	d100      	bne.n	8000a2a <__aeabi_dadd+0x2f6>
 8000a28:	e11c      	b.n	8000c64 <__aeabi_dadd+0x530>
 8000a2a:	2480      	movs	r4, #128	; 0x80
 8000a2c:	0424      	lsls	r4, r4, #16
 8000a2e:	4321      	orrs	r1, r4
 8000a30:	2f38      	cmp	r7, #56	; 0x38
 8000a32:	dd00      	ble.n	8000a36 <__aeabi_dadd+0x302>
 8000a34:	e11e      	b.n	8000c74 <__aeabi_dadd+0x540>
 8000a36:	2f1f      	cmp	r7, #31
 8000a38:	dd00      	ble.n	8000a3c <__aeabi_dadd+0x308>
 8000a3a:	e19e      	b.n	8000d7a <__aeabi_dadd+0x646>
 8000a3c:	2620      	movs	r6, #32
 8000a3e:	000c      	movs	r4, r1
 8000a40:	1bf6      	subs	r6, r6, r7
 8000a42:	0018      	movs	r0, r3
 8000a44:	40b3      	lsls	r3, r6
 8000a46:	40b4      	lsls	r4, r6
 8000a48:	40f8      	lsrs	r0, r7
 8000a4a:	1e5e      	subs	r6, r3, #1
 8000a4c:	41b3      	sbcs	r3, r6
 8000a4e:	40f9      	lsrs	r1, r7
 8000a50:	4304      	orrs	r4, r0
 8000a52:	431c      	orrs	r4, r3
 8000a54:	4489      	add	r9, r1
 8000a56:	4444      	add	r4, r8
 8000a58:	4544      	cmp	r4, r8
 8000a5a:	419b      	sbcs	r3, r3
 8000a5c:	425b      	negs	r3, r3
 8000a5e:	444b      	add	r3, r9
 8000a60:	469a      	mov	sl, r3
 8000a62:	0016      	movs	r6, r2
 8000a64:	e7a8      	b.n	80009b8 <__aeabi_dadd+0x284>
 8000a66:	4642      	mov	r2, r8
 8000a68:	464c      	mov	r4, r9
 8000a6a:	4314      	orrs	r4, r2
 8000a6c:	1e62      	subs	r2, r4, #1
 8000a6e:	4194      	sbcs	r4, r2
 8000a70:	e6a6      	b.n	80007c0 <__aeabi_dadd+0x8c>
 8000a72:	4c0d      	ldr	r4, [pc, #52]	; (8000aa8 <__aeabi_dadd+0x374>)
 8000a74:	1c72      	adds	r2, r6, #1
 8000a76:	4222      	tst	r2, r4
 8000a78:	d000      	beq.n	8000a7c <__aeabi_dadd+0x348>
 8000a7a:	e0a8      	b.n	8000bce <__aeabi_dadd+0x49a>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	431a      	orrs	r2, r3
 8000a80:	2e00      	cmp	r6, #0
 8000a82:	d000      	beq.n	8000a86 <__aeabi_dadd+0x352>
 8000a84:	e10a      	b.n	8000c9c <__aeabi_dadd+0x568>
 8000a86:	2a00      	cmp	r2, #0
 8000a88:	d100      	bne.n	8000a8c <__aeabi_dadd+0x358>
 8000a8a:	e15e      	b.n	8000d4a <__aeabi_dadd+0x616>
 8000a8c:	464a      	mov	r2, r9
 8000a8e:	4302      	orrs	r2, r0
 8000a90:	d000      	beq.n	8000a94 <__aeabi_dadd+0x360>
 8000a92:	e161      	b.n	8000d58 <__aeabi_dadd+0x624>
 8000a94:	074a      	lsls	r2, r1, #29
 8000a96:	08db      	lsrs	r3, r3, #3
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	08c9      	lsrs	r1, r1, #3
 8000a9c:	e77c      	b.n	8000998 <__aeabi_dadd+0x264>
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	000007ff 	.word	0x000007ff
 8000aa4:	ff7fffff 	.word	0xff7fffff
 8000aa8:	000007fe 	.word	0x000007fe
 8000aac:	4ccf      	ldr	r4, [pc, #828]	; (8000dec <__aeabi_dadd+0x6b8>)
 8000aae:	42a2      	cmp	r2, r4
 8000ab0:	d100      	bne.n	8000ab4 <__aeabi_dadd+0x380>
 8000ab2:	e0ce      	b.n	8000c52 <__aeabi_dadd+0x51e>
 8000ab4:	2480      	movs	r4, #128	; 0x80
 8000ab6:	0424      	lsls	r4, r4, #16
 8000ab8:	4321      	orrs	r1, r4
 8000aba:	2f38      	cmp	r7, #56	; 0x38
 8000abc:	dc5b      	bgt.n	8000b76 <__aeabi_dadd+0x442>
 8000abe:	2f1f      	cmp	r7, #31
 8000ac0:	dd00      	ble.n	8000ac4 <__aeabi_dadd+0x390>
 8000ac2:	e0dc      	b.n	8000c7e <__aeabi_dadd+0x54a>
 8000ac4:	2520      	movs	r5, #32
 8000ac6:	000c      	movs	r4, r1
 8000ac8:	1bed      	subs	r5, r5, r7
 8000aca:	001e      	movs	r6, r3
 8000acc:	40ab      	lsls	r3, r5
 8000ace:	40ac      	lsls	r4, r5
 8000ad0:	40fe      	lsrs	r6, r7
 8000ad2:	1e5d      	subs	r5, r3, #1
 8000ad4:	41ab      	sbcs	r3, r5
 8000ad6:	4334      	orrs	r4, r6
 8000ad8:	40f9      	lsrs	r1, r7
 8000ada:	431c      	orrs	r4, r3
 8000adc:	464b      	mov	r3, r9
 8000ade:	1a5b      	subs	r3, r3, r1
 8000ae0:	4699      	mov	r9, r3
 8000ae2:	e04c      	b.n	8000b7e <__aeabi_dadd+0x44a>
 8000ae4:	464a      	mov	r2, r9
 8000ae6:	1a1c      	subs	r4, r3, r0
 8000ae8:	1a88      	subs	r0, r1, r2
 8000aea:	42a3      	cmp	r3, r4
 8000aec:	4192      	sbcs	r2, r2
 8000aee:	4252      	negs	r2, r2
 8000af0:	4692      	mov	sl, r2
 8000af2:	0002      	movs	r2, r0
 8000af4:	4650      	mov	r0, sl
 8000af6:	1a12      	subs	r2, r2, r0
 8000af8:	4692      	mov	sl, r2
 8000afa:	0212      	lsls	r2, r2, #8
 8000afc:	d478      	bmi.n	8000bf0 <__aeabi_dadd+0x4bc>
 8000afe:	4653      	mov	r3, sl
 8000b00:	4323      	orrs	r3, r4
 8000b02:	d000      	beq.n	8000b06 <__aeabi_dadd+0x3d2>
 8000b04:	e66a      	b.n	80007dc <__aeabi_dadd+0xa8>
 8000b06:	2100      	movs	r1, #0
 8000b08:	2500      	movs	r5, #0
 8000b0a:	e745      	b.n	8000998 <__aeabi_dadd+0x264>
 8000b0c:	074a      	lsls	r2, r1, #29
 8000b0e:	08db      	lsrs	r3, r3, #3
 8000b10:	4313      	orrs	r3, r2
 8000b12:	08c9      	lsrs	r1, r1, #3
 8000b14:	e73d      	b.n	8000992 <__aeabi_dadd+0x25e>
 8000b16:	181c      	adds	r4, r3, r0
 8000b18:	429c      	cmp	r4, r3
 8000b1a:	419b      	sbcs	r3, r3
 8000b1c:	4449      	add	r1, r9
 8000b1e:	468a      	mov	sl, r1
 8000b20:	425b      	negs	r3, r3
 8000b22:	449a      	add	sl, r3
 8000b24:	4653      	mov	r3, sl
 8000b26:	2601      	movs	r6, #1
 8000b28:	021b      	lsls	r3, r3, #8
 8000b2a:	d400      	bmi.n	8000b2e <__aeabi_dadd+0x3fa>
 8000b2c:	e727      	b.n	800097e <__aeabi_dadd+0x24a>
 8000b2e:	2602      	movs	r6, #2
 8000b30:	4652      	mov	r2, sl
 8000b32:	4baf      	ldr	r3, [pc, #700]	; (8000df0 <__aeabi_dadd+0x6bc>)
 8000b34:	2101      	movs	r1, #1
 8000b36:	401a      	ands	r2, r3
 8000b38:	0013      	movs	r3, r2
 8000b3a:	4021      	ands	r1, r4
 8000b3c:	0862      	lsrs	r2, r4, #1
 8000b3e:	430a      	orrs	r2, r1
 8000b40:	07dc      	lsls	r4, r3, #31
 8000b42:	085b      	lsrs	r3, r3, #1
 8000b44:	469a      	mov	sl, r3
 8000b46:	4314      	orrs	r4, r2
 8000b48:	e670      	b.n	800082c <__aeabi_dadd+0xf8>
 8000b4a:	003a      	movs	r2, r7
 8000b4c:	464c      	mov	r4, r9
 8000b4e:	3a20      	subs	r2, #32
 8000b50:	40d4      	lsrs	r4, r2
 8000b52:	46a4      	mov	ip, r4
 8000b54:	2f20      	cmp	r7, #32
 8000b56:	d007      	beq.n	8000b68 <__aeabi_dadd+0x434>
 8000b58:	2240      	movs	r2, #64	; 0x40
 8000b5a:	4648      	mov	r0, r9
 8000b5c:	1bd2      	subs	r2, r2, r7
 8000b5e:	4090      	lsls	r0, r2
 8000b60:	0002      	movs	r2, r0
 8000b62:	4640      	mov	r0, r8
 8000b64:	4310      	orrs	r0, r2
 8000b66:	4680      	mov	r8, r0
 8000b68:	4640      	mov	r0, r8
 8000b6a:	1e42      	subs	r2, r0, #1
 8000b6c:	4190      	sbcs	r0, r2
 8000b6e:	4662      	mov	r2, ip
 8000b70:	0004      	movs	r4, r0
 8000b72:	4314      	orrs	r4, r2
 8000b74:	e624      	b.n	80007c0 <__aeabi_dadd+0x8c>
 8000b76:	4319      	orrs	r1, r3
 8000b78:	000c      	movs	r4, r1
 8000b7a:	1e63      	subs	r3, r4, #1
 8000b7c:	419c      	sbcs	r4, r3
 8000b7e:	4643      	mov	r3, r8
 8000b80:	1b1c      	subs	r4, r3, r4
 8000b82:	45a0      	cmp	r8, r4
 8000b84:	419b      	sbcs	r3, r3
 8000b86:	4649      	mov	r1, r9
 8000b88:	425b      	negs	r3, r3
 8000b8a:	1acb      	subs	r3, r1, r3
 8000b8c:	469a      	mov	sl, r3
 8000b8e:	4665      	mov	r5, ip
 8000b90:	0016      	movs	r6, r2
 8000b92:	e61b      	b.n	80007cc <__aeabi_dadd+0x98>
 8000b94:	000c      	movs	r4, r1
 8000b96:	431c      	orrs	r4, r3
 8000b98:	d100      	bne.n	8000b9c <__aeabi_dadd+0x468>
 8000b9a:	e0c7      	b.n	8000d2c <__aeabi_dadd+0x5f8>
 8000b9c:	1e7c      	subs	r4, r7, #1
 8000b9e:	2f01      	cmp	r7, #1
 8000ba0:	d100      	bne.n	8000ba4 <__aeabi_dadd+0x470>
 8000ba2:	e0f9      	b.n	8000d98 <__aeabi_dadd+0x664>
 8000ba4:	4e91      	ldr	r6, [pc, #580]	; (8000dec <__aeabi_dadd+0x6b8>)
 8000ba6:	42b7      	cmp	r7, r6
 8000ba8:	d05c      	beq.n	8000c64 <__aeabi_dadd+0x530>
 8000baa:	0027      	movs	r7, r4
 8000bac:	e740      	b.n	8000a30 <__aeabi_dadd+0x2fc>
 8000bae:	2220      	movs	r2, #32
 8000bb0:	464c      	mov	r4, r9
 8000bb2:	4640      	mov	r0, r8
 8000bb4:	1bd2      	subs	r2, r2, r7
 8000bb6:	4094      	lsls	r4, r2
 8000bb8:	40f8      	lsrs	r0, r7
 8000bba:	4304      	orrs	r4, r0
 8000bbc:	4640      	mov	r0, r8
 8000bbe:	4090      	lsls	r0, r2
 8000bc0:	1e42      	subs	r2, r0, #1
 8000bc2:	4190      	sbcs	r0, r2
 8000bc4:	464a      	mov	r2, r9
 8000bc6:	40fa      	lsrs	r2, r7
 8000bc8:	4304      	orrs	r4, r0
 8000bca:	1889      	adds	r1, r1, r2
 8000bcc:	e6ee      	b.n	80009ac <__aeabi_dadd+0x278>
 8000bce:	4c87      	ldr	r4, [pc, #540]	; (8000dec <__aeabi_dadd+0x6b8>)
 8000bd0:	42a2      	cmp	r2, r4
 8000bd2:	d100      	bne.n	8000bd6 <__aeabi_dadd+0x4a2>
 8000bd4:	e6f9      	b.n	80009ca <__aeabi_dadd+0x296>
 8000bd6:	1818      	adds	r0, r3, r0
 8000bd8:	4298      	cmp	r0, r3
 8000bda:	419b      	sbcs	r3, r3
 8000bdc:	4449      	add	r1, r9
 8000bde:	425b      	negs	r3, r3
 8000be0:	18cb      	adds	r3, r1, r3
 8000be2:	07dc      	lsls	r4, r3, #31
 8000be4:	0840      	lsrs	r0, r0, #1
 8000be6:	085b      	lsrs	r3, r3, #1
 8000be8:	469a      	mov	sl, r3
 8000bea:	0016      	movs	r6, r2
 8000bec:	4304      	orrs	r4, r0
 8000bee:	e6c6      	b.n	800097e <__aeabi_dadd+0x24a>
 8000bf0:	4642      	mov	r2, r8
 8000bf2:	1ad4      	subs	r4, r2, r3
 8000bf4:	45a0      	cmp	r8, r4
 8000bf6:	4180      	sbcs	r0, r0
 8000bf8:	464b      	mov	r3, r9
 8000bfa:	4240      	negs	r0, r0
 8000bfc:	1a59      	subs	r1, r3, r1
 8000bfe:	1a0b      	subs	r3, r1, r0
 8000c00:	469a      	mov	sl, r3
 8000c02:	4665      	mov	r5, ip
 8000c04:	e5ea      	b.n	80007dc <__aeabi_dadd+0xa8>
 8000c06:	464b      	mov	r3, r9
 8000c08:	464a      	mov	r2, r9
 8000c0a:	08c0      	lsrs	r0, r0, #3
 8000c0c:	075b      	lsls	r3, r3, #29
 8000c0e:	4665      	mov	r5, ip
 8000c10:	4303      	orrs	r3, r0
 8000c12:	08d1      	lsrs	r1, r2, #3
 8000c14:	e6bd      	b.n	8000992 <__aeabi_dadd+0x25e>
 8000c16:	2a00      	cmp	r2, #0
 8000c18:	d000      	beq.n	8000c1c <__aeabi_dadd+0x4e8>
 8000c1a:	e08e      	b.n	8000d3a <__aeabi_dadd+0x606>
 8000c1c:	464b      	mov	r3, r9
 8000c1e:	4303      	orrs	r3, r0
 8000c20:	d117      	bne.n	8000c52 <__aeabi_dadd+0x51e>
 8000c22:	2180      	movs	r1, #128	; 0x80
 8000c24:	2500      	movs	r5, #0
 8000c26:	0309      	lsls	r1, r1, #12
 8000c28:	e6da      	b.n	80009e0 <__aeabi_dadd+0x2ac>
 8000c2a:	074a      	lsls	r2, r1, #29
 8000c2c:	08db      	lsrs	r3, r3, #3
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	08c9      	lsrs	r1, r1, #3
 8000c32:	e6d1      	b.n	80009d8 <__aeabi_dadd+0x2a4>
 8000c34:	1a1c      	subs	r4, r3, r0
 8000c36:	464a      	mov	r2, r9
 8000c38:	42a3      	cmp	r3, r4
 8000c3a:	419b      	sbcs	r3, r3
 8000c3c:	1a89      	subs	r1, r1, r2
 8000c3e:	425b      	negs	r3, r3
 8000c40:	1acb      	subs	r3, r1, r3
 8000c42:	469a      	mov	sl, r3
 8000c44:	2601      	movs	r6, #1
 8000c46:	e5c1      	b.n	80007cc <__aeabi_dadd+0x98>
 8000c48:	074a      	lsls	r2, r1, #29
 8000c4a:	08db      	lsrs	r3, r3, #3
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	08c9      	lsrs	r1, r1, #3
 8000c50:	e69f      	b.n	8000992 <__aeabi_dadd+0x25e>
 8000c52:	4643      	mov	r3, r8
 8000c54:	08d8      	lsrs	r0, r3, #3
 8000c56:	464b      	mov	r3, r9
 8000c58:	464a      	mov	r2, r9
 8000c5a:	075b      	lsls	r3, r3, #29
 8000c5c:	4665      	mov	r5, ip
 8000c5e:	4303      	orrs	r3, r0
 8000c60:	08d1      	lsrs	r1, r2, #3
 8000c62:	e6b9      	b.n	80009d8 <__aeabi_dadd+0x2a4>
 8000c64:	4643      	mov	r3, r8
 8000c66:	08d8      	lsrs	r0, r3, #3
 8000c68:	464b      	mov	r3, r9
 8000c6a:	464a      	mov	r2, r9
 8000c6c:	075b      	lsls	r3, r3, #29
 8000c6e:	4303      	orrs	r3, r0
 8000c70:	08d1      	lsrs	r1, r2, #3
 8000c72:	e6b1      	b.n	80009d8 <__aeabi_dadd+0x2a4>
 8000c74:	4319      	orrs	r1, r3
 8000c76:	000c      	movs	r4, r1
 8000c78:	1e63      	subs	r3, r4, #1
 8000c7a:	419c      	sbcs	r4, r3
 8000c7c:	e6eb      	b.n	8000a56 <__aeabi_dadd+0x322>
 8000c7e:	003c      	movs	r4, r7
 8000c80:	000d      	movs	r5, r1
 8000c82:	3c20      	subs	r4, #32
 8000c84:	40e5      	lsrs	r5, r4
 8000c86:	2f20      	cmp	r7, #32
 8000c88:	d003      	beq.n	8000c92 <__aeabi_dadd+0x55e>
 8000c8a:	2440      	movs	r4, #64	; 0x40
 8000c8c:	1be4      	subs	r4, r4, r7
 8000c8e:	40a1      	lsls	r1, r4
 8000c90:	430b      	orrs	r3, r1
 8000c92:	001c      	movs	r4, r3
 8000c94:	1e63      	subs	r3, r4, #1
 8000c96:	419c      	sbcs	r4, r3
 8000c98:	432c      	orrs	r4, r5
 8000c9a:	e770      	b.n	8000b7e <__aeabi_dadd+0x44a>
 8000c9c:	2a00      	cmp	r2, #0
 8000c9e:	d0e1      	beq.n	8000c64 <__aeabi_dadd+0x530>
 8000ca0:	464a      	mov	r2, r9
 8000ca2:	4302      	orrs	r2, r0
 8000ca4:	d0c1      	beq.n	8000c2a <__aeabi_dadd+0x4f6>
 8000ca6:	074a      	lsls	r2, r1, #29
 8000ca8:	08db      	lsrs	r3, r3, #3
 8000caa:	4313      	orrs	r3, r2
 8000cac:	2280      	movs	r2, #128	; 0x80
 8000cae:	08c9      	lsrs	r1, r1, #3
 8000cb0:	0312      	lsls	r2, r2, #12
 8000cb2:	4211      	tst	r1, r2
 8000cb4:	d008      	beq.n	8000cc8 <__aeabi_dadd+0x594>
 8000cb6:	4648      	mov	r0, r9
 8000cb8:	08c4      	lsrs	r4, r0, #3
 8000cba:	4214      	tst	r4, r2
 8000cbc:	d104      	bne.n	8000cc8 <__aeabi_dadd+0x594>
 8000cbe:	4643      	mov	r3, r8
 8000cc0:	0021      	movs	r1, r4
 8000cc2:	08db      	lsrs	r3, r3, #3
 8000cc4:	0742      	lsls	r2, r0, #29
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	0f5a      	lsrs	r2, r3, #29
 8000cca:	00db      	lsls	r3, r3, #3
 8000ccc:	0752      	lsls	r2, r2, #29
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	e681      	b.n	80009d8 <__aeabi_dadd+0x2a4>
 8000cd4:	464b      	mov	r3, r9
 8000cd6:	4303      	orrs	r3, r0
 8000cd8:	d100      	bne.n	8000cdc <__aeabi_dadd+0x5a8>
 8000cda:	e714      	b.n	8000b06 <__aeabi_dadd+0x3d2>
 8000cdc:	464b      	mov	r3, r9
 8000cde:	464a      	mov	r2, r9
 8000ce0:	08c0      	lsrs	r0, r0, #3
 8000ce2:	075b      	lsls	r3, r3, #29
 8000ce4:	4665      	mov	r5, ip
 8000ce6:	4303      	orrs	r3, r0
 8000ce8:	08d1      	lsrs	r1, r2, #3
 8000cea:	e655      	b.n	8000998 <__aeabi_dadd+0x264>
 8000cec:	1ac4      	subs	r4, r0, r3
 8000cee:	45a0      	cmp	r8, r4
 8000cf0:	4180      	sbcs	r0, r0
 8000cf2:	464b      	mov	r3, r9
 8000cf4:	4240      	negs	r0, r0
 8000cf6:	1a59      	subs	r1, r3, r1
 8000cf8:	1a0b      	subs	r3, r1, r0
 8000cfa:	469a      	mov	sl, r3
 8000cfc:	4665      	mov	r5, ip
 8000cfe:	2601      	movs	r6, #1
 8000d00:	e564      	b.n	80007cc <__aeabi_dadd+0x98>
 8000d02:	1a1c      	subs	r4, r3, r0
 8000d04:	464a      	mov	r2, r9
 8000d06:	42a3      	cmp	r3, r4
 8000d08:	4180      	sbcs	r0, r0
 8000d0a:	1a8a      	subs	r2, r1, r2
 8000d0c:	4240      	negs	r0, r0
 8000d0e:	1a12      	subs	r2, r2, r0
 8000d10:	4692      	mov	sl, r2
 8000d12:	0212      	lsls	r2, r2, #8
 8000d14:	d549      	bpl.n	8000daa <__aeabi_dadd+0x676>
 8000d16:	4642      	mov	r2, r8
 8000d18:	1ad4      	subs	r4, r2, r3
 8000d1a:	45a0      	cmp	r8, r4
 8000d1c:	4180      	sbcs	r0, r0
 8000d1e:	464b      	mov	r3, r9
 8000d20:	4240      	negs	r0, r0
 8000d22:	1a59      	subs	r1, r3, r1
 8000d24:	1a0b      	subs	r3, r1, r0
 8000d26:	469a      	mov	sl, r3
 8000d28:	4665      	mov	r5, ip
 8000d2a:	e57f      	b.n	800082c <__aeabi_dadd+0xf8>
 8000d2c:	464b      	mov	r3, r9
 8000d2e:	464a      	mov	r2, r9
 8000d30:	08c0      	lsrs	r0, r0, #3
 8000d32:	075b      	lsls	r3, r3, #29
 8000d34:	4303      	orrs	r3, r0
 8000d36:	08d1      	lsrs	r1, r2, #3
 8000d38:	e62b      	b.n	8000992 <__aeabi_dadd+0x25e>
 8000d3a:	464a      	mov	r2, r9
 8000d3c:	08db      	lsrs	r3, r3, #3
 8000d3e:	4302      	orrs	r2, r0
 8000d40:	d138      	bne.n	8000db4 <__aeabi_dadd+0x680>
 8000d42:	074a      	lsls	r2, r1, #29
 8000d44:	4313      	orrs	r3, r2
 8000d46:	08c9      	lsrs	r1, r1, #3
 8000d48:	e646      	b.n	80009d8 <__aeabi_dadd+0x2a4>
 8000d4a:	464b      	mov	r3, r9
 8000d4c:	464a      	mov	r2, r9
 8000d4e:	08c0      	lsrs	r0, r0, #3
 8000d50:	075b      	lsls	r3, r3, #29
 8000d52:	4303      	orrs	r3, r0
 8000d54:	08d1      	lsrs	r1, r2, #3
 8000d56:	e61f      	b.n	8000998 <__aeabi_dadd+0x264>
 8000d58:	181c      	adds	r4, r3, r0
 8000d5a:	429c      	cmp	r4, r3
 8000d5c:	419b      	sbcs	r3, r3
 8000d5e:	4449      	add	r1, r9
 8000d60:	468a      	mov	sl, r1
 8000d62:	425b      	negs	r3, r3
 8000d64:	449a      	add	sl, r3
 8000d66:	4653      	mov	r3, sl
 8000d68:	021b      	lsls	r3, r3, #8
 8000d6a:	d400      	bmi.n	8000d6e <__aeabi_dadd+0x63a>
 8000d6c:	e607      	b.n	800097e <__aeabi_dadd+0x24a>
 8000d6e:	4652      	mov	r2, sl
 8000d70:	4b1f      	ldr	r3, [pc, #124]	; (8000df0 <__aeabi_dadd+0x6bc>)
 8000d72:	2601      	movs	r6, #1
 8000d74:	401a      	ands	r2, r3
 8000d76:	4692      	mov	sl, r2
 8000d78:	e601      	b.n	800097e <__aeabi_dadd+0x24a>
 8000d7a:	003c      	movs	r4, r7
 8000d7c:	000e      	movs	r6, r1
 8000d7e:	3c20      	subs	r4, #32
 8000d80:	40e6      	lsrs	r6, r4
 8000d82:	2f20      	cmp	r7, #32
 8000d84:	d003      	beq.n	8000d8e <__aeabi_dadd+0x65a>
 8000d86:	2440      	movs	r4, #64	; 0x40
 8000d88:	1be4      	subs	r4, r4, r7
 8000d8a:	40a1      	lsls	r1, r4
 8000d8c:	430b      	orrs	r3, r1
 8000d8e:	001c      	movs	r4, r3
 8000d90:	1e63      	subs	r3, r4, #1
 8000d92:	419c      	sbcs	r4, r3
 8000d94:	4334      	orrs	r4, r6
 8000d96:	e65e      	b.n	8000a56 <__aeabi_dadd+0x322>
 8000d98:	4443      	add	r3, r8
 8000d9a:	4283      	cmp	r3, r0
 8000d9c:	4180      	sbcs	r0, r0
 8000d9e:	4449      	add	r1, r9
 8000da0:	468a      	mov	sl, r1
 8000da2:	4240      	negs	r0, r0
 8000da4:	001c      	movs	r4, r3
 8000da6:	4482      	add	sl, r0
 8000da8:	e6bc      	b.n	8000b24 <__aeabi_dadd+0x3f0>
 8000daa:	4653      	mov	r3, sl
 8000dac:	4323      	orrs	r3, r4
 8000dae:	d100      	bne.n	8000db2 <__aeabi_dadd+0x67e>
 8000db0:	e6a9      	b.n	8000b06 <__aeabi_dadd+0x3d2>
 8000db2:	e5e4      	b.n	800097e <__aeabi_dadd+0x24a>
 8000db4:	074a      	lsls	r2, r1, #29
 8000db6:	4313      	orrs	r3, r2
 8000db8:	2280      	movs	r2, #128	; 0x80
 8000dba:	08c9      	lsrs	r1, r1, #3
 8000dbc:	0312      	lsls	r2, r2, #12
 8000dbe:	4211      	tst	r1, r2
 8000dc0:	d009      	beq.n	8000dd6 <__aeabi_dadd+0x6a2>
 8000dc2:	4648      	mov	r0, r9
 8000dc4:	08c4      	lsrs	r4, r0, #3
 8000dc6:	4214      	tst	r4, r2
 8000dc8:	d105      	bne.n	8000dd6 <__aeabi_dadd+0x6a2>
 8000dca:	4643      	mov	r3, r8
 8000dcc:	4665      	mov	r5, ip
 8000dce:	0021      	movs	r1, r4
 8000dd0:	08db      	lsrs	r3, r3, #3
 8000dd2:	0742      	lsls	r2, r0, #29
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	0f5a      	lsrs	r2, r3, #29
 8000dd8:	00db      	lsls	r3, r3, #3
 8000dda:	08db      	lsrs	r3, r3, #3
 8000ddc:	0752      	lsls	r2, r2, #29
 8000dde:	4313      	orrs	r3, r2
 8000de0:	e5fa      	b.n	80009d8 <__aeabi_dadd+0x2a4>
 8000de2:	2300      	movs	r3, #0
 8000de4:	4a01      	ldr	r2, [pc, #4]	; (8000dec <__aeabi_dadd+0x6b8>)
 8000de6:	001c      	movs	r4, r3
 8000de8:	e540      	b.n	800086c <__aeabi_dadd+0x138>
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	000007ff 	.word	0x000007ff
 8000df0:	ff7fffff 	.word	0xff7fffff

08000df4 <__aeabi_ddiv>:
 8000df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000df6:	4657      	mov	r7, sl
 8000df8:	464e      	mov	r6, r9
 8000dfa:	4645      	mov	r5, r8
 8000dfc:	46de      	mov	lr, fp
 8000dfe:	b5e0      	push	{r5, r6, r7, lr}
 8000e00:	030c      	lsls	r4, r1, #12
 8000e02:	001f      	movs	r7, r3
 8000e04:	004b      	lsls	r3, r1, #1
 8000e06:	4681      	mov	r9, r0
 8000e08:	4692      	mov	sl, r2
 8000e0a:	0005      	movs	r5, r0
 8000e0c:	b085      	sub	sp, #20
 8000e0e:	0b24      	lsrs	r4, r4, #12
 8000e10:	0d5b      	lsrs	r3, r3, #21
 8000e12:	0fce      	lsrs	r6, r1, #31
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d100      	bne.n	8000e1a <__aeabi_ddiv+0x26>
 8000e18:	e152      	b.n	80010c0 <__aeabi_ddiv+0x2cc>
 8000e1a:	4ad2      	ldr	r2, [pc, #840]	; (8001164 <__aeabi_ddiv+0x370>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d100      	bne.n	8000e22 <__aeabi_ddiv+0x2e>
 8000e20:	e16e      	b.n	8001100 <__aeabi_ddiv+0x30c>
 8000e22:	0f42      	lsrs	r2, r0, #29
 8000e24:	00e4      	lsls	r4, r4, #3
 8000e26:	4314      	orrs	r4, r2
 8000e28:	2280      	movs	r2, #128	; 0x80
 8000e2a:	0412      	lsls	r2, r2, #16
 8000e2c:	4322      	orrs	r2, r4
 8000e2e:	4690      	mov	r8, r2
 8000e30:	4acd      	ldr	r2, [pc, #820]	; (8001168 <__aeabi_ddiv+0x374>)
 8000e32:	00c5      	lsls	r5, r0, #3
 8000e34:	4693      	mov	fp, r2
 8000e36:	449b      	add	fp, r3
 8000e38:	2300      	movs	r3, #0
 8000e3a:	4699      	mov	r9, r3
 8000e3c:	9300      	str	r3, [sp, #0]
 8000e3e:	033c      	lsls	r4, r7, #12
 8000e40:	007b      	lsls	r3, r7, #1
 8000e42:	4650      	mov	r0, sl
 8000e44:	0b24      	lsrs	r4, r4, #12
 8000e46:	0d5b      	lsrs	r3, r3, #21
 8000e48:	0fff      	lsrs	r7, r7, #31
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d100      	bne.n	8000e50 <__aeabi_ddiv+0x5c>
 8000e4e:	e11a      	b.n	8001086 <__aeabi_ddiv+0x292>
 8000e50:	4ac4      	ldr	r2, [pc, #784]	; (8001164 <__aeabi_ddiv+0x370>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d100      	bne.n	8000e58 <__aeabi_ddiv+0x64>
 8000e56:	e15e      	b.n	8001116 <__aeabi_ddiv+0x322>
 8000e58:	0f42      	lsrs	r2, r0, #29
 8000e5a:	00e4      	lsls	r4, r4, #3
 8000e5c:	4322      	orrs	r2, r4
 8000e5e:	2480      	movs	r4, #128	; 0x80
 8000e60:	0424      	lsls	r4, r4, #16
 8000e62:	4314      	orrs	r4, r2
 8000e64:	4ac0      	ldr	r2, [pc, #768]	; (8001168 <__aeabi_ddiv+0x374>)
 8000e66:	00c1      	lsls	r1, r0, #3
 8000e68:	4694      	mov	ip, r2
 8000e6a:	465a      	mov	r2, fp
 8000e6c:	4463      	add	r3, ip
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	469b      	mov	fp, r3
 8000e72:	2000      	movs	r0, #0
 8000e74:	0033      	movs	r3, r6
 8000e76:	407b      	eors	r3, r7
 8000e78:	469a      	mov	sl, r3
 8000e7a:	464b      	mov	r3, r9
 8000e7c:	2b0f      	cmp	r3, #15
 8000e7e:	d827      	bhi.n	8000ed0 <__aeabi_ddiv+0xdc>
 8000e80:	4aba      	ldr	r2, [pc, #744]	; (800116c <__aeabi_ddiv+0x378>)
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	58d3      	ldr	r3, [r2, r3]
 8000e86:	469f      	mov	pc, r3
 8000e88:	46b2      	mov	sl, r6
 8000e8a:	9b00      	ldr	r3, [sp, #0]
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d016      	beq.n	8000ebe <__aeabi_ddiv+0xca>
 8000e90:	2b03      	cmp	r3, #3
 8000e92:	d100      	bne.n	8000e96 <__aeabi_ddiv+0xa2>
 8000e94:	e287      	b.n	80013a6 <__aeabi_ddiv+0x5b2>
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d000      	beq.n	8000e9c <__aeabi_ddiv+0xa8>
 8000e9a:	e0d5      	b.n	8001048 <__aeabi_ddiv+0x254>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2500      	movs	r5, #0
 8000ea2:	051b      	lsls	r3, r3, #20
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	4652      	mov	r2, sl
 8000ea8:	07d2      	lsls	r2, r2, #31
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	0028      	movs	r0, r5
 8000eae:	0019      	movs	r1, r3
 8000eb0:	b005      	add	sp, #20
 8000eb2:	bcf0      	pop	{r4, r5, r6, r7}
 8000eb4:	46bb      	mov	fp, r7
 8000eb6:	46b2      	mov	sl, r6
 8000eb8:	46a9      	mov	r9, r5
 8000eba:	46a0      	mov	r8, r4
 8000ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2500      	movs	r5, #0
 8000ec2:	4ba8      	ldr	r3, [pc, #672]	; (8001164 <__aeabi_ddiv+0x370>)
 8000ec4:	e7ed      	b.n	8000ea2 <__aeabi_ddiv+0xae>
 8000ec6:	46ba      	mov	sl, r7
 8000ec8:	46a0      	mov	r8, r4
 8000eca:	000d      	movs	r5, r1
 8000ecc:	9000      	str	r0, [sp, #0]
 8000ece:	e7dc      	b.n	8000e8a <__aeabi_ddiv+0x96>
 8000ed0:	4544      	cmp	r4, r8
 8000ed2:	d200      	bcs.n	8000ed6 <__aeabi_ddiv+0xe2>
 8000ed4:	e1c4      	b.n	8001260 <__aeabi_ddiv+0x46c>
 8000ed6:	d100      	bne.n	8000eda <__aeabi_ddiv+0xe6>
 8000ed8:	e1bf      	b.n	800125a <__aeabi_ddiv+0x466>
 8000eda:	2301      	movs	r3, #1
 8000edc:	425b      	negs	r3, r3
 8000ede:	469c      	mov	ip, r3
 8000ee0:	002e      	movs	r6, r5
 8000ee2:	4640      	mov	r0, r8
 8000ee4:	2500      	movs	r5, #0
 8000ee6:	44e3      	add	fp, ip
 8000ee8:	0223      	lsls	r3, r4, #8
 8000eea:	0e0c      	lsrs	r4, r1, #24
 8000eec:	431c      	orrs	r4, r3
 8000eee:	0c1b      	lsrs	r3, r3, #16
 8000ef0:	4699      	mov	r9, r3
 8000ef2:	0423      	lsls	r3, r4, #16
 8000ef4:	020a      	lsls	r2, r1, #8
 8000ef6:	0c1f      	lsrs	r7, r3, #16
 8000ef8:	4649      	mov	r1, r9
 8000efa:	9200      	str	r2, [sp, #0]
 8000efc:	9701      	str	r7, [sp, #4]
 8000efe:	f7ff f989 	bl	8000214 <__aeabi_uidivmod>
 8000f02:	0002      	movs	r2, r0
 8000f04:	437a      	muls	r2, r7
 8000f06:	040b      	lsls	r3, r1, #16
 8000f08:	0c31      	lsrs	r1, r6, #16
 8000f0a:	4680      	mov	r8, r0
 8000f0c:	4319      	orrs	r1, r3
 8000f0e:	428a      	cmp	r2, r1
 8000f10:	d907      	bls.n	8000f22 <__aeabi_ddiv+0x12e>
 8000f12:	2301      	movs	r3, #1
 8000f14:	425b      	negs	r3, r3
 8000f16:	469c      	mov	ip, r3
 8000f18:	1909      	adds	r1, r1, r4
 8000f1a:	44e0      	add	r8, ip
 8000f1c:	428c      	cmp	r4, r1
 8000f1e:	d800      	bhi.n	8000f22 <__aeabi_ddiv+0x12e>
 8000f20:	e201      	b.n	8001326 <__aeabi_ddiv+0x532>
 8000f22:	1a88      	subs	r0, r1, r2
 8000f24:	4649      	mov	r1, r9
 8000f26:	f7ff f975 	bl	8000214 <__aeabi_uidivmod>
 8000f2a:	9a01      	ldr	r2, [sp, #4]
 8000f2c:	0436      	lsls	r6, r6, #16
 8000f2e:	4342      	muls	r2, r0
 8000f30:	0409      	lsls	r1, r1, #16
 8000f32:	0c36      	lsrs	r6, r6, #16
 8000f34:	0003      	movs	r3, r0
 8000f36:	430e      	orrs	r6, r1
 8000f38:	42b2      	cmp	r2, r6
 8000f3a:	d904      	bls.n	8000f46 <__aeabi_ddiv+0x152>
 8000f3c:	1936      	adds	r6, r6, r4
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	42b4      	cmp	r4, r6
 8000f42:	d800      	bhi.n	8000f46 <__aeabi_ddiv+0x152>
 8000f44:	e1e9      	b.n	800131a <__aeabi_ddiv+0x526>
 8000f46:	1ab0      	subs	r0, r6, r2
 8000f48:	4642      	mov	r2, r8
 8000f4a:	9e00      	ldr	r6, [sp, #0]
 8000f4c:	0412      	lsls	r2, r2, #16
 8000f4e:	431a      	orrs	r2, r3
 8000f50:	0c33      	lsrs	r3, r6, #16
 8000f52:	001f      	movs	r7, r3
 8000f54:	0c11      	lsrs	r1, r2, #16
 8000f56:	4690      	mov	r8, r2
 8000f58:	9302      	str	r3, [sp, #8]
 8000f5a:	0413      	lsls	r3, r2, #16
 8000f5c:	0432      	lsls	r2, r6, #16
 8000f5e:	0c16      	lsrs	r6, r2, #16
 8000f60:	0032      	movs	r2, r6
 8000f62:	0c1b      	lsrs	r3, r3, #16
 8000f64:	435a      	muls	r2, r3
 8000f66:	9603      	str	r6, [sp, #12]
 8000f68:	437b      	muls	r3, r7
 8000f6a:	434e      	muls	r6, r1
 8000f6c:	4379      	muls	r1, r7
 8000f6e:	0c17      	lsrs	r7, r2, #16
 8000f70:	46bc      	mov	ip, r7
 8000f72:	199b      	adds	r3, r3, r6
 8000f74:	4463      	add	r3, ip
 8000f76:	429e      	cmp	r6, r3
 8000f78:	d903      	bls.n	8000f82 <__aeabi_ddiv+0x18e>
 8000f7a:	2680      	movs	r6, #128	; 0x80
 8000f7c:	0276      	lsls	r6, r6, #9
 8000f7e:	46b4      	mov	ip, r6
 8000f80:	4461      	add	r1, ip
 8000f82:	0c1e      	lsrs	r6, r3, #16
 8000f84:	1871      	adds	r1, r6, r1
 8000f86:	0416      	lsls	r6, r2, #16
 8000f88:	041b      	lsls	r3, r3, #16
 8000f8a:	0c36      	lsrs	r6, r6, #16
 8000f8c:	199e      	adds	r6, r3, r6
 8000f8e:	4288      	cmp	r0, r1
 8000f90:	d302      	bcc.n	8000f98 <__aeabi_ddiv+0x1a4>
 8000f92:	d112      	bne.n	8000fba <__aeabi_ddiv+0x1c6>
 8000f94:	42b5      	cmp	r5, r6
 8000f96:	d210      	bcs.n	8000fba <__aeabi_ddiv+0x1c6>
 8000f98:	4643      	mov	r3, r8
 8000f9a:	1e5a      	subs	r2, r3, #1
 8000f9c:	9b00      	ldr	r3, [sp, #0]
 8000f9e:	469c      	mov	ip, r3
 8000fa0:	4465      	add	r5, ip
 8000fa2:	001f      	movs	r7, r3
 8000fa4:	429d      	cmp	r5, r3
 8000fa6:	419b      	sbcs	r3, r3
 8000fa8:	425b      	negs	r3, r3
 8000faa:	191b      	adds	r3, r3, r4
 8000fac:	18c0      	adds	r0, r0, r3
 8000fae:	4284      	cmp	r4, r0
 8000fb0:	d200      	bcs.n	8000fb4 <__aeabi_ddiv+0x1c0>
 8000fb2:	e19e      	b.n	80012f2 <__aeabi_ddiv+0x4fe>
 8000fb4:	d100      	bne.n	8000fb8 <__aeabi_ddiv+0x1c4>
 8000fb6:	e199      	b.n	80012ec <__aeabi_ddiv+0x4f8>
 8000fb8:	4690      	mov	r8, r2
 8000fba:	1bae      	subs	r6, r5, r6
 8000fbc:	42b5      	cmp	r5, r6
 8000fbe:	41ad      	sbcs	r5, r5
 8000fc0:	1a40      	subs	r0, r0, r1
 8000fc2:	426d      	negs	r5, r5
 8000fc4:	1b40      	subs	r0, r0, r5
 8000fc6:	4284      	cmp	r4, r0
 8000fc8:	d100      	bne.n	8000fcc <__aeabi_ddiv+0x1d8>
 8000fca:	e1d2      	b.n	8001372 <__aeabi_ddiv+0x57e>
 8000fcc:	4649      	mov	r1, r9
 8000fce:	f7ff f921 	bl	8000214 <__aeabi_uidivmod>
 8000fd2:	9a01      	ldr	r2, [sp, #4]
 8000fd4:	040b      	lsls	r3, r1, #16
 8000fd6:	4342      	muls	r2, r0
 8000fd8:	0c31      	lsrs	r1, r6, #16
 8000fda:	0005      	movs	r5, r0
 8000fdc:	4319      	orrs	r1, r3
 8000fde:	428a      	cmp	r2, r1
 8000fe0:	d900      	bls.n	8000fe4 <__aeabi_ddiv+0x1f0>
 8000fe2:	e16c      	b.n	80012be <__aeabi_ddiv+0x4ca>
 8000fe4:	1a88      	subs	r0, r1, r2
 8000fe6:	4649      	mov	r1, r9
 8000fe8:	f7ff f914 	bl	8000214 <__aeabi_uidivmod>
 8000fec:	9a01      	ldr	r2, [sp, #4]
 8000fee:	0436      	lsls	r6, r6, #16
 8000ff0:	4342      	muls	r2, r0
 8000ff2:	0409      	lsls	r1, r1, #16
 8000ff4:	0c36      	lsrs	r6, r6, #16
 8000ff6:	0003      	movs	r3, r0
 8000ff8:	430e      	orrs	r6, r1
 8000ffa:	42b2      	cmp	r2, r6
 8000ffc:	d900      	bls.n	8001000 <__aeabi_ddiv+0x20c>
 8000ffe:	e153      	b.n	80012a8 <__aeabi_ddiv+0x4b4>
 8001000:	9803      	ldr	r0, [sp, #12]
 8001002:	1ab6      	subs	r6, r6, r2
 8001004:	0002      	movs	r2, r0
 8001006:	042d      	lsls	r5, r5, #16
 8001008:	431d      	orrs	r5, r3
 800100a:	9f02      	ldr	r7, [sp, #8]
 800100c:	042b      	lsls	r3, r5, #16
 800100e:	0c1b      	lsrs	r3, r3, #16
 8001010:	435a      	muls	r2, r3
 8001012:	437b      	muls	r3, r7
 8001014:	469c      	mov	ip, r3
 8001016:	0c29      	lsrs	r1, r5, #16
 8001018:	4348      	muls	r0, r1
 800101a:	0c13      	lsrs	r3, r2, #16
 800101c:	4484      	add	ip, r0
 800101e:	4463      	add	r3, ip
 8001020:	4379      	muls	r1, r7
 8001022:	4298      	cmp	r0, r3
 8001024:	d903      	bls.n	800102e <__aeabi_ddiv+0x23a>
 8001026:	2080      	movs	r0, #128	; 0x80
 8001028:	0240      	lsls	r0, r0, #9
 800102a:	4684      	mov	ip, r0
 800102c:	4461      	add	r1, ip
 800102e:	0c18      	lsrs	r0, r3, #16
 8001030:	0412      	lsls	r2, r2, #16
 8001032:	041b      	lsls	r3, r3, #16
 8001034:	0c12      	lsrs	r2, r2, #16
 8001036:	1840      	adds	r0, r0, r1
 8001038:	189b      	adds	r3, r3, r2
 800103a:	4286      	cmp	r6, r0
 800103c:	d200      	bcs.n	8001040 <__aeabi_ddiv+0x24c>
 800103e:	e100      	b.n	8001242 <__aeabi_ddiv+0x44e>
 8001040:	d100      	bne.n	8001044 <__aeabi_ddiv+0x250>
 8001042:	e0fb      	b.n	800123c <__aeabi_ddiv+0x448>
 8001044:	2301      	movs	r3, #1
 8001046:	431d      	orrs	r5, r3
 8001048:	4b49      	ldr	r3, [pc, #292]	; (8001170 <__aeabi_ddiv+0x37c>)
 800104a:	445b      	add	r3, fp
 800104c:	2b00      	cmp	r3, #0
 800104e:	dc00      	bgt.n	8001052 <__aeabi_ddiv+0x25e>
 8001050:	e0aa      	b.n	80011a8 <__aeabi_ddiv+0x3b4>
 8001052:	076a      	lsls	r2, r5, #29
 8001054:	d000      	beq.n	8001058 <__aeabi_ddiv+0x264>
 8001056:	e13d      	b.n	80012d4 <__aeabi_ddiv+0x4e0>
 8001058:	08e9      	lsrs	r1, r5, #3
 800105a:	4642      	mov	r2, r8
 800105c:	01d2      	lsls	r2, r2, #7
 800105e:	d506      	bpl.n	800106e <__aeabi_ddiv+0x27a>
 8001060:	4642      	mov	r2, r8
 8001062:	4b44      	ldr	r3, [pc, #272]	; (8001174 <__aeabi_ddiv+0x380>)
 8001064:	401a      	ands	r2, r3
 8001066:	2380      	movs	r3, #128	; 0x80
 8001068:	4690      	mov	r8, r2
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	445b      	add	r3, fp
 800106e:	4a42      	ldr	r2, [pc, #264]	; (8001178 <__aeabi_ddiv+0x384>)
 8001070:	4293      	cmp	r3, r2
 8001072:	dd00      	ble.n	8001076 <__aeabi_ddiv+0x282>
 8001074:	e723      	b.n	8000ebe <__aeabi_ddiv+0xca>
 8001076:	4642      	mov	r2, r8
 8001078:	055b      	lsls	r3, r3, #21
 800107a:	0755      	lsls	r5, r2, #29
 800107c:	0252      	lsls	r2, r2, #9
 800107e:	430d      	orrs	r5, r1
 8001080:	0b12      	lsrs	r2, r2, #12
 8001082:	0d5b      	lsrs	r3, r3, #21
 8001084:	e70d      	b.n	8000ea2 <__aeabi_ddiv+0xae>
 8001086:	4651      	mov	r1, sl
 8001088:	4321      	orrs	r1, r4
 800108a:	d100      	bne.n	800108e <__aeabi_ddiv+0x29a>
 800108c:	e07c      	b.n	8001188 <__aeabi_ddiv+0x394>
 800108e:	2c00      	cmp	r4, #0
 8001090:	d100      	bne.n	8001094 <__aeabi_ddiv+0x2a0>
 8001092:	e0fb      	b.n	800128c <__aeabi_ddiv+0x498>
 8001094:	0020      	movs	r0, r4
 8001096:	f001 fa07 	bl	80024a8 <__clzsi2>
 800109a:	0002      	movs	r2, r0
 800109c:	3a0b      	subs	r2, #11
 800109e:	231d      	movs	r3, #29
 80010a0:	1a9b      	subs	r3, r3, r2
 80010a2:	4652      	mov	r2, sl
 80010a4:	0001      	movs	r1, r0
 80010a6:	40da      	lsrs	r2, r3
 80010a8:	4653      	mov	r3, sl
 80010aa:	3908      	subs	r1, #8
 80010ac:	408b      	lsls	r3, r1
 80010ae:	408c      	lsls	r4, r1
 80010b0:	0019      	movs	r1, r3
 80010b2:	4314      	orrs	r4, r2
 80010b4:	4b31      	ldr	r3, [pc, #196]	; (800117c <__aeabi_ddiv+0x388>)
 80010b6:	4458      	add	r0, fp
 80010b8:	469b      	mov	fp, r3
 80010ba:	4483      	add	fp, r0
 80010bc:	2000      	movs	r0, #0
 80010be:	e6d9      	b.n	8000e74 <__aeabi_ddiv+0x80>
 80010c0:	0003      	movs	r3, r0
 80010c2:	4323      	orrs	r3, r4
 80010c4:	4698      	mov	r8, r3
 80010c6:	d044      	beq.n	8001152 <__aeabi_ddiv+0x35e>
 80010c8:	2c00      	cmp	r4, #0
 80010ca:	d100      	bne.n	80010ce <__aeabi_ddiv+0x2da>
 80010cc:	e0cf      	b.n	800126e <__aeabi_ddiv+0x47a>
 80010ce:	0020      	movs	r0, r4
 80010d0:	f001 f9ea 	bl	80024a8 <__clzsi2>
 80010d4:	0001      	movs	r1, r0
 80010d6:	0002      	movs	r2, r0
 80010d8:	390b      	subs	r1, #11
 80010da:	231d      	movs	r3, #29
 80010dc:	1a5b      	subs	r3, r3, r1
 80010de:	4649      	mov	r1, r9
 80010e0:	0010      	movs	r0, r2
 80010e2:	40d9      	lsrs	r1, r3
 80010e4:	3808      	subs	r0, #8
 80010e6:	4084      	lsls	r4, r0
 80010e8:	000b      	movs	r3, r1
 80010ea:	464d      	mov	r5, r9
 80010ec:	4323      	orrs	r3, r4
 80010ee:	4698      	mov	r8, r3
 80010f0:	4085      	lsls	r5, r0
 80010f2:	4b23      	ldr	r3, [pc, #140]	; (8001180 <__aeabi_ddiv+0x38c>)
 80010f4:	1a9b      	subs	r3, r3, r2
 80010f6:	469b      	mov	fp, r3
 80010f8:	2300      	movs	r3, #0
 80010fa:	4699      	mov	r9, r3
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	e69e      	b.n	8000e3e <__aeabi_ddiv+0x4a>
 8001100:	0002      	movs	r2, r0
 8001102:	4322      	orrs	r2, r4
 8001104:	4690      	mov	r8, r2
 8001106:	d11d      	bne.n	8001144 <__aeabi_ddiv+0x350>
 8001108:	2208      	movs	r2, #8
 800110a:	469b      	mov	fp, r3
 800110c:	2302      	movs	r3, #2
 800110e:	2500      	movs	r5, #0
 8001110:	4691      	mov	r9, r2
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	e693      	b.n	8000e3e <__aeabi_ddiv+0x4a>
 8001116:	4651      	mov	r1, sl
 8001118:	4321      	orrs	r1, r4
 800111a:	d109      	bne.n	8001130 <__aeabi_ddiv+0x33c>
 800111c:	2302      	movs	r3, #2
 800111e:	464a      	mov	r2, r9
 8001120:	431a      	orrs	r2, r3
 8001122:	4b18      	ldr	r3, [pc, #96]	; (8001184 <__aeabi_ddiv+0x390>)
 8001124:	4691      	mov	r9, r2
 8001126:	469c      	mov	ip, r3
 8001128:	2400      	movs	r4, #0
 800112a:	2002      	movs	r0, #2
 800112c:	44e3      	add	fp, ip
 800112e:	e6a1      	b.n	8000e74 <__aeabi_ddiv+0x80>
 8001130:	2303      	movs	r3, #3
 8001132:	464a      	mov	r2, r9
 8001134:	431a      	orrs	r2, r3
 8001136:	4b13      	ldr	r3, [pc, #76]	; (8001184 <__aeabi_ddiv+0x390>)
 8001138:	4691      	mov	r9, r2
 800113a:	469c      	mov	ip, r3
 800113c:	4651      	mov	r1, sl
 800113e:	2003      	movs	r0, #3
 8001140:	44e3      	add	fp, ip
 8001142:	e697      	b.n	8000e74 <__aeabi_ddiv+0x80>
 8001144:	220c      	movs	r2, #12
 8001146:	469b      	mov	fp, r3
 8001148:	2303      	movs	r3, #3
 800114a:	46a0      	mov	r8, r4
 800114c:	4691      	mov	r9, r2
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	e675      	b.n	8000e3e <__aeabi_ddiv+0x4a>
 8001152:	2304      	movs	r3, #4
 8001154:	4699      	mov	r9, r3
 8001156:	2300      	movs	r3, #0
 8001158:	469b      	mov	fp, r3
 800115a:	3301      	adds	r3, #1
 800115c:	2500      	movs	r5, #0
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	e66d      	b.n	8000e3e <__aeabi_ddiv+0x4a>
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	000007ff 	.word	0x000007ff
 8001168:	fffffc01 	.word	0xfffffc01
 800116c:	08005730 	.word	0x08005730
 8001170:	000003ff 	.word	0x000003ff
 8001174:	feffffff 	.word	0xfeffffff
 8001178:	000007fe 	.word	0x000007fe
 800117c:	000003f3 	.word	0x000003f3
 8001180:	fffffc0d 	.word	0xfffffc0d
 8001184:	fffff801 	.word	0xfffff801
 8001188:	464a      	mov	r2, r9
 800118a:	2301      	movs	r3, #1
 800118c:	431a      	orrs	r2, r3
 800118e:	4691      	mov	r9, r2
 8001190:	2400      	movs	r4, #0
 8001192:	2001      	movs	r0, #1
 8001194:	e66e      	b.n	8000e74 <__aeabi_ddiv+0x80>
 8001196:	2300      	movs	r3, #0
 8001198:	2280      	movs	r2, #128	; 0x80
 800119a:	469a      	mov	sl, r3
 800119c:	2500      	movs	r5, #0
 800119e:	4b88      	ldr	r3, [pc, #544]	; (80013c0 <__aeabi_ddiv+0x5cc>)
 80011a0:	0312      	lsls	r2, r2, #12
 80011a2:	e67e      	b.n	8000ea2 <__aeabi_ddiv+0xae>
 80011a4:	2501      	movs	r5, #1
 80011a6:	426d      	negs	r5, r5
 80011a8:	2201      	movs	r2, #1
 80011aa:	1ad2      	subs	r2, r2, r3
 80011ac:	2a38      	cmp	r2, #56	; 0x38
 80011ae:	dd00      	ble.n	80011b2 <__aeabi_ddiv+0x3be>
 80011b0:	e674      	b.n	8000e9c <__aeabi_ddiv+0xa8>
 80011b2:	2a1f      	cmp	r2, #31
 80011b4:	dc00      	bgt.n	80011b8 <__aeabi_ddiv+0x3c4>
 80011b6:	e0bd      	b.n	8001334 <__aeabi_ddiv+0x540>
 80011b8:	211f      	movs	r1, #31
 80011ba:	4249      	negs	r1, r1
 80011bc:	1acb      	subs	r3, r1, r3
 80011be:	4641      	mov	r1, r8
 80011c0:	40d9      	lsrs	r1, r3
 80011c2:	000b      	movs	r3, r1
 80011c4:	2a20      	cmp	r2, #32
 80011c6:	d004      	beq.n	80011d2 <__aeabi_ddiv+0x3de>
 80011c8:	4641      	mov	r1, r8
 80011ca:	4a7e      	ldr	r2, [pc, #504]	; (80013c4 <__aeabi_ddiv+0x5d0>)
 80011cc:	445a      	add	r2, fp
 80011ce:	4091      	lsls	r1, r2
 80011d0:	430d      	orrs	r5, r1
 80011d2:	0029      	movs	r1, r5
 80011d4:	1e4a      	subs	r2, r1, #1
 80011d6:	4191      	sbcs	r1, r2
 80011d8:	4319      	orrs	r1, r3
 80011da:	2307      	movs	r3, #7
 80011dc:	001d      	movs	r5, r3
 80011de:	2200      	movs	r2, #0
 80011e0:	400d      	ands	r5, r1
 80011e2:	420b      	tst	r3, r1
 80011e4:	d100      	bne.n	80011e8 <__aeabi_ddiv+0x3f4>
 80011e6:	e0d0      	b.n	800138a <__aeabi_ddiv+0x596>
 80011e8:	220f      	movs	r2, #15
 80011ea:	2300      	movs	r3, #0
 80011ec:	400a      	ands	r2, r1
 80011ee:	2a04      	cmp	r2, #4
 80011f0:	d100      	bne.n	80011f4 <__aeabi_ddiv+0x400>
 80011f2:	e0c7      	b.n	8001384 <__aeabi_ddiv+0x590>
 80011f4:	1d0a      	adds	r2, r1, #4
 80011f6:	428a      	cmp	r2, r1
 80011f8:	4189      	sbcs	r1, r1
 80011fa:	4249      	negs	r1, r1
 80011fc:	185b      	adds	r3, r3, r1
 80011fe:	0011      	movs	r1, r2
 8001200:	021a      	lsls	r2, r3, #8
 8001202:	d400      	bmi.n	8001206 <__aeabi_ddiv+0x412>
 8001204:	e0be      	b.n	8001384 <__aeabi_ddiv+0x590>
 8001206:	2301      	movs	r3, #1
 8001208:	2200      	movs	r2, #0
 800120a:	2500      	movs	r5, #0
 800120c:	e649      	b.n	8000ea2 <__aeabi_ddiv+0xae>
 800120e:	2280      	movs	r2, #128	; 0x80
 8001210:	4643      	mov	r3, r8
 8001212:	0312      	lsls	r2, r2, #12
 8001214:	4213      	tst	r3, r2
 8001216:	d008      	beq.n	800122a <__aeabi_ddiv+0x436>
 8001218:	4214      	tst	r4, r2
 800121a:	d106      	bne.n	800122a <__aeabi_ddiv+0x436>
 800121c:	4322      	orrs	r2, r4
 800121e:	0312      	lsls	r2, r2, #12
 8001220:	46ba      	mov	sl, r7
 8001222:	000d      	movs	r5, r1
 8001224:	4b66      	ldr	r3, [pc, #408]	; (80013c0 <__aeabi_ddiv+0x5cc>)
 8001226:	0b12      	lsrs	r2, r2, #12
 8001228:	e63b      	b.n	8000ea2 <__aeabi_ddiv+0xae>
 800122a:	2280      	movs	r2, #128	; 0x80
 800122c:	4643      	mov	r3, r8
 800122e:	0312      	lsls	r2, r2, #12
 8001230:	431a      	orrs	r2, r3
 8001232:	0312      	lsls	r2, r2, #12
 8001234:	46b2      	mov	sl, r6
 8001236:	4b62      	ldr	r3, [pc, #392]	; (80013c0 <__aeabi_ddiv+0x5cc>)
 8001238:	0b12      	lsrs	r2, r2, #12
 800123a:	e632      	b.n	8000ea2 <__aeabi_ddiv+0xae>
 800123c:	2b00      	cmp	r3, #0
 800123e:	d100      	bne.n	8001242 <__aeabi_ddiv+0x44e>
 8001240:	e702      	b.n	8001048 <__aeabi_ddiv+0x254>
 8001242:	19a6      	adds	r6, r4, r6
 8001244:	1e6a      	subs	r2, r5, #1
 8001246:	42a6      	cmp	r6, r4
 8001248:	d200      	bcs.n	800124c <__aeabi_ddiv+0x458>
 800124a:	e089      	b.n	8001360 <__aeabi_ddiv+0x56c>
 800124c:	4286      	cmp	r6, r0
 800124e:	d200      	bcs.n	8001252 <__aeabi_ddiv+0x45e>
 8001250:	e09f      	b.n	8001392 <__aeabi_ddiv+0x59e>
 8001252:	d100      	bne.n	8001256 <__aeabi_ddiv+0x462>
 8001254:	e0af      	b.n	80013b6 <__aeabi_ddiv+0x5c2>
 8001256:	0015      	movs	r5, r2
 8001258:	e6f4      	b.n	8001044 <__aeabi_ddiv+0x250>
 800125a:	42a9      	cmp	r1, r5
 800125c:	d900      	bls.n	8001260 <__aeabi_ddiv+0x46c>
 800125e:	e63c      	b.n	8000eda <__aeabi_ddiv+0xe6>
 8001260:	4643      	mov	r3, r8
 8001262:	07de      	lsls	r6, r3, #31
 8001264:	0858      	lsrs	r0, r3, #1
 8001266:	086b      	lsrs	r3, r5, #1
 8001268:	431e      	orrs	r6, r3
 800126a:	07ed      	lsls	r5, r5, #31
 800126c:	e63c      	b.n	8000ee8 <__aeabi_ddiv+0xf4>
 800126e:	f001 f91b 	bl	80024a8 <__clzsi2>
 8001272:	0001      	movs	r1, r0
 8001274:	0002      	movs	r2, r0
 8001276:	3115      	adds	r1, #21
 8001278:	3220      	adds	r2, #32
 800127a:	291c      	cmp	r1, #28
 800127c:	dc00      	bgt.n	8001280 <__aeabi_ddiv+0x48c>
 800127e:	e72c      	b.n	80010da <__aeabi_ddiv+0x2e6>
 8001280:	464b      	mov	r3, r9
 8001282:	3808      	subs	r0, #8
 8001284:	4083      	lsls	r3, r0
 8001286:	2500      	movs	r5, #0
 8001288:	4698      	mov	r8, r3
 800128a:	e732      	b.n	80010f2 <__aeabi_ddiv+0x2fe>
 800128c:	f001 f90c 	bl	80024a8 <__clzsi2>
 8001290:	0003      	movs	r3, r0
 8001292:	001a      	movs	r2, r3
 8001294:	3215      	adds	r2, #21
 8001296:	3020      	adds	r0, #32
 8001298:	2a1c      	cmp	r2, #28
 800129a:	dc00      	bgt.n	800129e <__aeabi_ddiv+0x4aa>
 800129c:	e6ff      	b.n	800109e <__aeabi_ddiv+0x2aa>
 800129e:	4654      	mov	r4, sl
 80012a0:	3b08      	subs	r3, #8
 80012a2:	2100      	movs	r1, #0
 80012a4:	409c      	lsls	r4, r3
 80012a6:	e705      	b.n	80010b4 <__aeabi_ddiv+0x2c0>
 80012a8:	1936      	adds	r6, r6, r4
 80012aa:	3b01      	subs	r3, #1
 80012ac:	42b4      	cmp	r4, r6
 80012ae:	d900      	bls.n	80012b2 <__aeabi_ddiv+0x4be>
 80012b0:	e6a6      	b.n	8001000 <__aeabi_ddiv+0x20c>
 80012b2:	42b2      	cmp	r2, r6
 80012b4:	d800      	bhi.n	80012b8 <__aeabi_ddiv+0x4c4>
 80012b6:	e6a3      	b.n	8001000 <__aeabi_ddiv+0x20c>
 80012b8:	1e83      	subs	r3, r0, #2
 80012ba:	1936      	adds	r6, r6, r4
 80012bc:	e6a0      	b.n	8001000 <__aeabi_ddiv+0x20c>
 80012be:	1909      	adds	r1, r1, r4
 80012c0:	3d01      	subs	r5, #1
 80012c2:	428c      	cmp	r4, r1
 80012c4:	d900      	bls.n	80012c8 <__aeabi_ddiv+0x4d4>
 80012c6:	e68d      	b.n	8000fe4 <__aeabi_ddiv+0x1f0>
 80012c8:	428a      	cmp	r2, r1
 80012ca:	d800      	bhi.n	80012ce <__aeabi_ddiv+0x4da>
 80012cc:	e68a      	b.n	8000fe4 <__aeabi_ddiv+0x1f0>
 80012ce:	1e85      	subs	r5, r0, #2
 80012d0:	1909      	adds	r1, r1, r4
 80012d2:	e687      	b.n	8000fe4 <__aeabi_ddiv+0x1f0>
 80012d4:	220f      	movs	r2, #15
 80012d6:	402a      	ands	r2, r5
 80012d8:	2a04      	cmp	r2, #4
 80012da:	d100      	bne.n	80012de <__aeabi_ddiv+0x4ea>
 80012dc:	e6bc      	b.n	8001058 <__aeabi_ddiv+0x264>
 80012de:	1d29      	adds	r1, r5, #4
 80012e0:	42a9      	cmp	r1, r5
 80012e2:	41ad      	sbcs	r5, r5
 80012e4:	426d      	negs	r5, r5
 80012e6:	08c9      	lsrs	r1, r1, #3
 80012e8:	44a8      	add	r8, r5
 80012ea:	e6b6      	b.n	800105a <__aeabi_ddiv+0x266>
 80012ec:	42af      	cmp	r7, r5
 80012ee:	d900      	bls.n	80012f2 <__aeabi_ddiv+0x4fe>
 80012f0:	e662      	b.n	8000fb8 <__aeabi_ddiv+0x1c4>
 80012f2:	4281      	cmp	r1, r0
 80012f4:	d804      	bhi.n	8001300 <__aeabi_ddiv+0x50c>
 80012f6:	d000      	beq.n	80012fa <__aeabi_ddiv+0x506>
 80012f8:	e65e      	b.n	8000fb8 <__aeabi_ddiv+0x1c4>
 80012fa:	42ae      	cmp	r6, r5
 80012fc:	d800      	bhi.n	8001300 <__aeabi_ddiv+0x50c>
 80012fe:	e65b      	b.n	8000fb8 <__aeabi_ddiv+0x1c4>
 8001300:	2302      	movs	r3, #2
 8001302:	425b      	negs	r3, r3
 8001304:	469c      	mov	ip, r3
 8001306:	9b00      	ldr	r3, [sp, #0]
 8001308:	44e0      	add	r8, ip
 800130a:	469c      	mov	ip, r3
 800130c:	4465      	add	r5, ip
 800130e:	429d      	cmp	r5, r3
 8001310:	419b      	sbcs	r3, r3
 8001312:	425b      	negs	r3, r3
 8001314:	191b      	adds	r3, r3, r4
 8001316:	18c0      	adds	r0, r0, r3
 8001318:	e64f      	b.n	8000fba <__aeabi_ddiv+0x1c6>
 800131a:	42b2      	cmp	r2, r6
 800131c:	d800      	bhi.n	8001320 <__aeabi_ddiv+0x52c>
 800131e:	e612      	b.n	8000f46 <__aeabi_ddiv+0x152>
 8001320:	1e83      	subs	r3, r0, #2
 8001322:	1936      	adds	r6, r6, r4
 8001324:	e60f      	b.n	8000f46 <__aeabi_ddiv+0x152>
 8001326:	428a      	cmp	r2, r1
 8001328:	d800      	bhi.n	800132c <__aeabi_ddiv+0x538>
 800132a:	e5fa      	b.n	8000f22 <__aeabi_ddiv+0x12e>
 800132c:	1e83      	subs	r3, r0, #2
 800132e:	4698      	mov	r8, r3
 8001330:	1909      	adds	r1, r1, r4
 8001332:	e5f6      	b.n	8000f22 <__aeabi_ddiv+0x12e>
 8001334:	4b24      	ldr	r3, [pc, #144]	; (80013c8 <__aeabi_ddiv+0x5d4>)
 8001336:	0028      	movs	r0, r5
 8001338:	445b      	add	r3, fp
 800133a:	4641      	mov	r1, r8
 800133c:	409d      	lsls	r5, r3
 800133e:	4099      	lsls	r1, r3
 8001340:	40d0      	lsrs	r0, r2
 8001342:	1e6b      	subs	r3, r5, #1
 8001344:	419d      	sbcs	r5, r3
 8001346:	4643      	mov	r3, r8
 8001348:	4301      	orrs	r1, r0
 800134a:	4329      	orrs	r1, r5
 800134c:	40d3      	lsrs	r3, r2
 800134e:	074a      	lsls	r2, r1, #29
 8001350:	d100      	bne.n	8001354 <__aeabi_ddiv+0x560>
 8001352:	e755      	b.n	8001200 <__aeabi_ddiv+0x40c>
 8001354:	220f      	movs	r2, #15
 8001356:	400a      	ands	r2, r1
 8001358:	2a04      	cmp	r2, #4
 800135a:	d000      	beq.n	800135e <__aeabi_ddiv+0x56a>
 800135c:	e74a      	b.n	80011f4 <__aeabi_ddiv+0x400>
 800135e:	e74f      	b.n	8001200 <__aeabi_ddiv+0x40c>
 8001360:	0015      	movs	r5, r2
 8001362:	4286      	cmp	r6, r0
 8001364:	d000      	beq.n	8001368 <__aeabi_ddiv+0x574>
 8001366:	e66d      	b.n	8001044 <__aeabi_ddiv+0x250>
 8001368:	9a00      	ldr	r2, [sp, #0]
 800136a:	429a      	cmp	r2, r3
 800136c:	d000      	beq.n	8001370 <__aeabi_ddiv+0x57c>
 800136e:	e669      	b.n	8001044 <__aeabi_ddiv+0x250>
 8001370:	e66a      	b.n	8001048 <__aeabi_ddiv+0x254>
 8001372:	4b16      	ldr	r3, [pc, #88]	; (80013cc <__aeabi_ddiv+0x5d8>)
 8001374:	445b      	add	r3, fp
 8001376:	2b00      	cmp	r3, #0
 8001378:	dc00      	bgt.n	800137c <__aeabi_ddiv+0x588>
 800137a:	e713      	b.n	80011a4 <__aeabi_ddiv+0x3b0>
 800137c:	2501      	movs	r5, #1
 800137e:	2100      	movs	r1, #0
 8001380:	44a8      	add	r8, r5
 8001382:	e66a      	b.n	800105a <__aeabi_ddiv+0x266>
 8001384:	075d      	lsls	r5, r3, #29
 8001386:	025b      	lsls	r3, r3, #9
 8001388:	0b1a      	lsrs	r2, r3, #12
 800138a:	08c9      	lsrs	r1, r1, #3
 800138c:	2300      	movs	r3, #0
 800138e:	430d      	orrs	r5, r1
 8001390:	e587      	b.n	8000ea2 <__aeabi_ddiv+0xae>
 8001392:	9900      	ldr	r1, [sp, #0]
 8001394:	3d02      	subs	r5, #2
 8001396:	004a      	lsls	r2, r1, #1
 8001398:	428a      	cmp	r2, r1
 800139a:	41bf      	sbcs	r7, r7
 800139c:	427f      	negs	r7, r7
 800139e:	193f      	adds	r7, r7, r4
 80013a0:	19f6      	adds	r6, r6, r7
 80013a2:	9200      	str	r2, [sp, #0]
 80013a4:	e7dd      	b.n	8001362 <__aeabi_ddiv+0x56e>
 80013a6:	2280      	movs	r2, #128	; 0x80
 80013a8:	4643      	mov	r3, r8
 80013aa:	0312      	lsls	r2, r2, #12
 80013ac:	431a      	orrs	r2, r3
 80013ae:	0312      	lsls	r2, r2, #12
 80013b0:	4b03      	ldr	r3, [pc, #12]	; (80013c0 <__aeabi_ddiv+0x5cc>)
 80013b2:	0b12      	lsrs	r2, r2, #12
 80013b4:	e575      	b.n	8000ea2 <__aeabi_ddiv+0xae>
 80013b6:	9900      	ldr	r1, [sp, #0]
 80013b8:	4299      	cmp	r1, r3
 80013ba:	d3ea      	bcc.n	8001392 <__aeabi_ddiv+0x59e>
 80013bc:	0015      	movs	r5, r2
 80013be:	e7d3      	b.n	8001368 <__aeabi_ddiv+0x574>
 80013c0:	000007ff 	.word	0x000007ff
 80013c4:	0000043e 	.word	0x0000043e
 80013c8:	0000041e 	.word	0x0000041e
 80013cc:	000003ff 	.word	0x000003ff

080013d0 <__eqdf2>:
 80013d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013d2:	464e      	mov	r6, r9
 80013d4:	4645      	mov	r5, r8
 80013d6:	46de      	mov	lr, fp
 80013d8:	4657      	mov	r7, sl
 80013da:	4690      	mov	r8, r2
 80013dc:	b5e0      	push	{r5, r6, r7, lr}
 80013de:	0017      	movs	r7, r2
 80013e0:	031a      	lsls	r2, r3, #12
 80013e2:	0b12      	lsrs	r2, r2, #12
 80013e4:	0005      	movs	r5, r0
 80013e6:	4684      	mov	ip, r0
 80013e8:	4819      	ldr	r0, [pc, #100]	; (8001450 <__eqdf2+0x80>)
 80013ea:	030e      	lsls	r6, r1, #12
 80013ec:	004c      	lsls	r4, r1, #1
 80013ee:	4691      	mov	r9, r2
 80013f0:	005a      	lsls	r2, r3, #1
 80013f2:	0fdb      	lsrs	r3, r3, #31
 80013f4:	469b      	mov	fp, r3
 80013f6:	0b36      	lsrs	r6, r6, #12
 80013f8:	0d64      	lsrs	r4, r4, #21
 80013fa:	0fc9      	lsrs	r1, r1, #31
 80013fc:	0d52      	lsrs	r2, r2, #21
 80013fe:	4284      	cmp	r4, r0
 8001400:	d019      	beq.n	8001436 <__eqdf2+0x66>
 8001402:	4282      	cmp	r2, r0
 8001404:	d010      	beq.n	8001428 <__eqdf2+0x58>
 8001406:	2001      	movs	r0, #1
 8001408:	4294      	cmp	r4, r2
 800140a:	d10e      	bne.n	800142a <__eqdf2+0x5a>
 800140c:	454e      	cmp	r6, r9
 800140e:	d10c      	bne.n	800142a <__eqdf2+0x5a>
 8001410:	2001      	movs	r0, #1
 8001412:	45c4      	cmp	ip, r8
 8001414:	d109      	bne.n	800142a <__eqdf2+0x5a>
 8001416:	4559      	cmp	r1, fp
 8001418:	d017      	beq.n	800144a <__eqdf2+0x7a>
 800141a:	2c00      	cmp	r4, #0
 800141c:	d105      	bne.n	800142a <__eqdf2+0x5a>
 800141e:	0030      	movs	r0, r6
 8001420:	4328      	orrs	r0, r5
 8001422:	1e43      	subs	r3, r0, #1
 8001424:	4198      	sbcs	r0, r3
 8001426:	e000      	b.n	800142a <__eqdf2+0x5a>
 8001428:	2001      	movs	r0, #1
 800142a:	bcf0      	pop	{r4, r5, r6, r7}
 800142c:	46bb      	mov	fp, r7
 800142e:	46b2      	mov	sl, r6
 8001430:	46a9      	mov	r9, r5
 8001432:	46a0      	mov	r8, r4
 8001434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001436:	0033      	movs	r3, r6
 8001438:	2001      	movs	r0, #1
 800143a:	432b      	orrs	r3, r5
 800143c:	d1f5      	bne.n	800142a <__eqdf2+0x5a>
 800143e:	42a2      	cmp	r2, r4
 8001440:	d1f3      	bne.n	800142a <__eqdf2+0x5a>
 8001442:	464b      	mov	r3, r9
 8001444:	433b      	orrs	r3, r7
 8001446:	d1f0      	bne.n	800142a <__eqdf2+0x5a>
 8001448:	e7e2      	b.n	8001410 <__eqdf2+0x40>
 800144a:	2000      	movs	r0, #0
 800144c:	e7ed      	b.n	800142a <__eqdf2+0x5a>
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	000007ff 	.word	0x000007ff

08001454 <__gedf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	4647      	mov	r7, r8
 8001458:	46ce      	mov	lr, r9
 800145a:	0004      	movs	r4, r0
 800145c:	0018      	movs	r0, r3
 800145e:	0016      	movs	r6, r2
 8001460:	031b      	lsls	r3, r3, #12
 8001462:	0b1b      	lsrs	r3, r3, #12
 8001464:	4d2d      	ldr	r5, [pc, #180]	; (800151c <__gedf2+0xc8>)
 8001466:	004a      	lsls	r2, r1, #1
 8001468:	4699      	mov	r9, r3
 800146a:	b580      	push	{r7, lr}
 800146c:	0043      	lsls	r3, r0, #1
 800146e:	030f      	lsls	r7, r1, #12
 8001470:	46a4      	mov	ip, r4
 8001472:	46b0      	mov	r8, r6
 8001474:	0b3f      	lsrs	r7, r7, #12
 8001476:	0d52      	lsrs	r2, r2, #21
 8001478:	0fc9      	lsrs	r1, r1, #31
 800147a:	0d5b      	lsrs	r3, r3, #21
 800147c:	0fc0      	lsrs	r0, r0, #31
 800147e:	42aa      	cmp	r2, r5
 8001480:	d021      	beq.n	80014c6 <__gedf2+0x72>
 8001482:	42ab      	cmp	r3, r5
 8001484:	d013      	beq.n	80014ae <__gedf2+0x5a>
 8001486:	2a00      	cmp	r2, #0
 8001488:	d122      	bne.n	80014d0 <__gedf2+0x7c>
 800148a:	433c      	orrs	r4, r7
 800148c:	2b00      	cmp	r3, #0
 800148e:	d102      	bne.n	8001496 <__gedf2+0x42>
 8001490:	464d      	mov	r5, r9
 8001492:	432e      	orrs	r6, r5
 8001494:	d022      	beq.n	80014dc <__gedf2+0x88>
 8001496:	2c00      	cmp	r4, #0
 8001498:	d010      	beq.n	80014bc <__gedf2+0x68>
 800149a:	4281      	cmp	r1, r0
 800149c:	d022      	beq.n	80014e4 <__gedf2+0x90>
 800149e:	2002      	movs	r0, #2
 80014a0:	3901      	subs	r1, #1
 80014a2:	4008      	ands	r0, r1
 80014a4:	3801      	subs	r0, #1
 80014a6:	bcc0      	pop	{r6, r7}
 80014a8:	46b9      	mov	r9, r7
 80014aa:	46b0      	mov	r8, r6
 80014ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ae:	464d      	mov	r5, r9
 80014b0:	432e      	orrs	r6, r5
 80014b2:	d129      	bne.n	8001508 <__gedf2+0xb4>
 80014b4:	2a00      	cmp	r2, #0
 80014b6:	d1f0      	bne.n	800149a <__gedf2+0x46>
 80014b8:	433c      	orrs	r4, r7
 80014ba:	d1ee      	bne.n	800149a <__gedf2+0x46>
 80014bc:	2800      	cmp	r0, #0
 80014be:	d1f2      	bne.n	80014a6 <__gedf2+0x52>
 80014c0:	2001      	movs	r0, #1
 80014c2:	4240      	negs	r0, r0
 80014c4:	e7ef      	b.n	80014a6 <__gedf2+0x52>
 80014c6:	003d      	movs	r5, r7
 80014c8:	4325      	orrs	r5, r4
 80014ca:	d11d      	bne.n	8001508 <__gedf2+0xb4>
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d0ee      	beq.n	80014ae <__gedf2+0x5a>
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1e2      	bne.n	800149a <__gedf2+0x46>
 80014d4:	464c      	mov	r4, r9
 80014d6:	4326      	orrs	r6, r4
 80014d8:	d1df      	bne.n	800149a <__gedf2+0x46>
 80014da:	e7e0      	b.n	800149e <__gedf2+0x4a>
 80014dc:	2000      	movs	r0, #0
 80014de:	2c00      	cmp	r4, #0
 80014e0:	d0e1      	beq.n	80014a6 <__gedf2+0x52>
 80014e2:	e7dc      	b.n	800149e <__gedf2+0x4a>
 80014e4:	429a      	cmp	r2, r3
 80014e6:	dc0a      	bgt.n	80014fe <__gedf2+0xaa>
 80014e8:	dbe8      	blt.n	80014bc <__gedf2+0x68>
 80014ea:	454f      	cmp	r7, r9
 80014ec:	d8d7      	bhi.n	800149e <__gedf2+0x4a>
 80014ee:	d00e      	beq.n	800150e <__gedf2+0xba>
 80014f0:	2000      	movs	r0, #0
 80014f2:	454f      	cmp	r7, r9
 80014f4:	d2d7      	bcs.n	80014a6 <__gedf2+0x52>
 80014f6:	2900      	cmp	r1, #0
 80014f8:	d0e2      	beq.n	80014c0 <__gedf2+0x6c>
 80014fa:	0008      	movs	r0, r1
 80014fc:	e7d3      	b.n	80014a6 <__gedf2+0x52>
 80014fe:	4243      	negs	r3, r0
 8001500:	4158      	adcs	r0, r3
 8001502:	0040      	lsls	r0, r0, #1
 8001504:	3801      	subs	r0, #1
 8001506:	e7ce      	b.n	80014a6 <__gedf2+0x52>
 8001508:	2002      	movs	r0, #2
 800150a:	4240      	negs	r0, r0
 800150c:	e7cb      	b.n	80014a6 <__gedf2+0x52>
 800150e:	45c4      	cmp	ip, r8
 8001510:	d8c5      	bhi.n	800149e <__gedf2+0x4a>
 8001512:	2000      	movs	r0, #0
 8001514:	45c4      	cmp	ip, r8
 8001516:	d2c6      	bcs.n	80014a6 <__gedf2+0x52>
 8001518:	e7ed      	b.n	80014f6 <__gedf2+0xa2>
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	000007ff 	.word	0x000007ff

08001520 <__ledf2>:
 8001520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001522:	4647      	mov	r7, r8
 8001524:	46ce      	mov	lr, r9
 8001526:	0004      	movs	r4, r0
 8001528:	0018      	movs	r0, r3
 800152a:	0016      	movs	r6, r2
 800152c:	031b      	lsls	r3, r3, #12
 800152e:	0b1b      	lsrs	r3, r3, #12
 8001530:	4d2c      	ldr	r5, [pc, #176]	; (80015e4 <__ledf2+0xc4>)
 8001532:	004a      	lsls	r2, r1, #1
 8001534:	4699      	mov	r9, r3
 8001536:	b580      	push	{r7, lr}
 8001538:	0043      	lsls	r3, r0, #1
 800153a:	030f      	lsls	r7, r1, #12
 800153c:	46a4      	mov	ip, r4
 800153e:	46b0      	mov	r8, r6
 8001540:	0b3f      	lsrs	r7, r7, #12
 8001542:	0d52      	lsrs	r2, r2, #21
 8001544:	0fc9      	lsrs	r1, r1, #31
 8001546:	0d5b      	lsrs	r3, r3, #21
 8001548:	0fc0      	lsrs	r0, r0, #31
 800154a:	42aa      	cmp	r2, r5
 800154c:	d00d      	beq.n	800156a <__ledf2+0x4a>
 800154e:	42ab      	cmp	r3, r5
 8001550:	d010      	beq.n	8001574 <__ledf2+0x54>
 8001552:	2a00      	cmp	r2, #0
 8001554:	d127      	bne.n	80015a6 <__ledf2+0x86>
 8001556:	433c      	orrs	r4, r7
 8001558:	2b00      	cmp	r3, #0
 800155a:	d111      	bne.n	8001580 <__ledf2+0x60>
 800155c:	464d      	mov	r5, r9
 800155e:	432e      	orrs	r6, r5
 8001560:	d10e      	bne.n	8001580 <__ledf2+0x60>
 8001562:	2000      	movs	r0, #0
 8001564:	2c00      	cmp	r4, #0
 8001566:	d015      	beq.n	8001594 <__ledf2+0x74>
 8001568:	e00e      	b.n	8001588 <__ledf2+0x68>
 800156a:	003d      	movs	r5, r7
 800156c:	4325      	orrs	r5, r4
 800156e:	d110      	bne.n	8001592 <__ledf2+0x72>
 8001570:	4293      	cmp	r3, r2
 8001572:	d118      	bne.n	80015a6 <__ledf2+0x86>
 8001574:	464d      	mov	r5, r9
 8001576:	432e      	orrs	r6, r5
 8001578:	d10b      	bne.n	8001592 <__ledf2+0x72>
 800157a:	2a00      	cmp	r2, #0
 800157c:	d102      	bne.n	8001584 <__ledf2+0x64>
 800157e:	433c      	orrs	r4, r7
 8001580:	2c00      	cmp	r4, #0
 8001582:	d00b      	beq.n	800159c <__ledf2+0x7c>
 8001584:	4281      	cmp	r1, r0
 8001586:	d014      	beq.n	80015b2 <__ledf2+0x92>
 8001588:	2002      	movs	r0, #2
 800158a:	3901      	subs	r1, #1
 800158c:	4008      	ands	r0, r1
 800158e:	3801      	subs	r0, #1
 8001590:	e000      	b.n	8001594 <__ledf2+0x74>
 8001592:	2002      	movs	r0, #2
 8001594:	bcc0      	pop	{r6, r7}
 8001596:	46b9      	mov	r9, r7
 8001598:	46b0      	mov	r8, r6
 800159a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800159c:	2800      	cmp	r0, #0
 800159e:	d1f9      	bne.n	8001594 <__ledf2+0x74>
 80015a0:	2001      	movs	r0, #1
 80015a2:	4240      	negs	r0, r0
 80015a4:	e7f6      	b.n	8001594 <__ledf2+0x74>
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1ec      	bne.n	8001584 <__ledf2+0x64>
 80015aa:	464c      	mov	r4, r9
 80015ac:	4326      	orrs	r6, r4
 80015ae:	d1e9      	bne.n	8001584 <__ledf2+0x64>
 80015b0:	e7ea      	b.n	8001588 <__ledf2+0x68>
 80015b2:	429a      	cmp	r2, r3
 80015b4:	dd04      	ble.n	80015c0 <__ledf2+0xa0>
 80015b6:	4243      	negs	r3, r0
 80015b8:	4158      	adcs	r0, r3
 80015ba:	0040      	lsls	r0, r0, #1
 80015bc:	3801      	subs	r0, #1
 80015be:	e7e9      	b.n	8001594 <__ledf2+0x74>
 80015c0:	429a      	cmp	r2, r3
 80015c2:	dbeb      	blt.n	800159c <__ledf2+0x7c>
 80015c4:	454f      	cmp	r7, r9
 80015c6:	d8df      	bhi.n	8001588 <__ledf2+0x68>
 80015c8:	d006      	beq.n	80015d8 <__ledf2+0xb8>
 80015ca:	2000      	movs	r0, #0
 80015cc:	454f      	cmp	r7, r9
 80015ce:	d2e1      	bcs.n	8001594 <__ledf2+0x74>
 80015d0:	2900      	cmp	r1, #0
 80015d2:	d0e5      	beq.n	80015a0 <__ledf2+0x80>
 80015d4:	0008      	movs	r0, r1
 80015d6:	e7dd      	b.n	8001594 <__ledf2+0x74>
 80015d8:	45c4      	cmp	ip, r8
 80015da:	d8d5      	bhi.n	8001588 <__ledf2+0x68>
 80015dc:	2000      	movs	r0, #0
 80015de:	45c4      	cmp	ip, r8
 80015e0:	d2d8      	bcs.n	8001594 <__ledf2+0x74>
 80015e2:	e7f5      	b.n	80015d0 <__ledf2+0xb0>
 80015e4:	000007ff 	.word	0x000007ff

080015e8 <__aeabi_dmul>:
 80015e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ea:	4645      	mov	r5, r8
 80015ec:	46de      	mov	lr, fp
 80015ee:	4657      	mov	r7, sl
 80015f0:	464e      	mov	r6, r9
 80015f2:	b5e0      	push	{r5, r6, r7, lr}
 80015f4:	001f      	movs	r7, r3
 80015f6:	030b      	lsls	r3, r1, #12
 80015f8:	0b1b      	lsrs	r3, r3, #12
 80015fa:	469b      	mov	fp, r3
 80015fc:	004d      	lsls	r5, r1, #1
 80015fe:	0fcb      	lsrs	r3, r1, #31
 8001600:	0004      	movs	r4, r0
 8001602:	4691      	mov	r9, r2
 8001604:	4698      	mov	r8, r3
 8001606:	b087      	sub	sp, #28
 8001608:	0d6d      	lsrs	r5, r5, #21
 800160a:	d100      	bne.n	800160e <__aeabi_dmul+0x26>
 800160c:	e1cd      	b.n	80019aa <__aeabi_dmul+0x3c2>
 800160e:	4bce      	ldr	r3, [pc, #824]	; (8001948 <__aeabi_dmul+0x360>)
 8001610:	429d      	cmp	r5, r3
 8001612:	d100      	bne.n	8001616 <__aeabi_dmul+0x2e>
 8001614:	e1e9      	b.n	80019ea <__aeabi_dmul+0x402>
 8001616:	465a      	mov	r2, fp
 8001618:	0f43      	lsrs	r3, r0, #29
 800161a:	00d2      	lsls	r2, r2, #3
 800161c:	4313      	orrs	r3, r2
 800161e:	2280      	movs	r2, #128	; 0x80
 8001620:	0412      	lsls	r2, r2, #16
 8001622:	431a      	orrs	r2, r3
 8001624:	00c3      	lsls	r3, r0, #3
 8001626:	469a      	mov	sl, r3
 8001628:	4bc8      	ldr	r3, [pc, #800]	; (800194c <__aeabi_dmul+0x364>)
 800162a:	4693      	mov	fp, r2
 800162c:	469c      	mov	ip, r3
 800162e:	2300      	movs	r3, #0
 8001630:	2600      	movs	r6, #0
 8001632:	4465      	add	r5, ip
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	033c      	lsls	r4, r7, #12
 8001638:	007b      	lsls	r3, r7, #1
 800163a:	4648      	mov	r0, r9
 800163c:	0b24      	lsrs	r4, r4, #12
 800163e:	0d5b      	lsrs	r3, r3, #21
 8001640:	0fff      	lsrs	r7, r7, #31
 8001642:	2b00      	cmp	r3, #0
 8001644:	d100      	bne.n	8001648 <__aeabi_dmul+0x60>
 8001646:	e189      	b.n	800195c <__aeabi_dmul+0x374>
 8001648:	4abf      	ldr	r2, [pc, #764]	; (8001948 <__aeabi_dmul+0x360>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d019      	beq.n	8001682 <__aeabi_dmul+0x9a>
 800164e:	0f42      	lsrs	r2, r0, #29
 8001650:	00e4      	lsls	r4, r4, #3
 8001652:	4322      	orrs	r2, r4
 8001654:	2480      	movs	r4, #128	; 0x80
 8001656:	0424      	lsls	r4, r4, #16
 8001658:	4314      	orrs	r4, r2
 800165a:	4abc      	ldr	r2, [pc, #752]	; (800194c <__aeabi_dmul+0x364>)
 800165c:	2100      	movs	r1, #0
 800165e:	4694      	mov	ip, r2
 8001660:	4642      	mov	r2, r8
 8001662:	4463      	add	r3, ip
 8001664:	195b      	adds	r3, r3, r5
 8001666:	9301      	str	r3, [sp, #4]
 8001668:	9b01      	ldr	r3, [sp, #4]
 800166a:	407a      	eors	r2, r7
 800166c:	3301      	adds	r3, #1
 800166e:	00c0      	lsls	r0, r0, #3
 8001670:	b2d2      	uxtb	r2, r2
 8001672:	9302      	str	r3, [sp, #8]
 8001674:	2e0a      	cmp	r6, #10
 8001676:	dd1c      	ble.n	80016b2 <__aeabi_dmul+0xca>
 8001678:	003a      	movs	r2, r7
 800167a:	2e0b      	cmp	r6, #11
 800167c:	d05e      	beq.n	800173c <__aeabi_dmul+0x154>
 800167e:	4647      	mov	r7, r8
 8001680:	e056      	b.n	8001730 <__aeabi_dmul+0x148>
 8001682:	4649      	mov	r1, r9
 8001684:	4bb0      	ldr	r3, [pc, #704]	; (8001948 <__aeabi_dmul+0x360>)
 8001686:	4321      	orrs	r1, r4
 8001688:	18eb      	adds	r3, r5, r3
 800168a:	9301      	str	r3, [sp, #4]
 800168c:	2900      	cmp	r1, #0
 800168e:	d12a      	bne.n	80016e6 <__aeabi_dmul+0xfe>
 8001690:	2080      	movs	r0, #128	; 0x80
 8001692:	2202      	movs	r2, #2
 8001694:	0100      	lsls	r0, r0, #4
 8001696:	002b      	movs	r3, r5
 8001698:	4684      	mov	ip, r0
 800169a:	4316      	orrs	r6, r2
 800169c:	4642      	mov	r2, r8
 800169e:	4463      	add	r3, ip
 80016a0:	407a      	eors	r2, r7
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	9302      	str	r3, [sp, #8]
 80016a6:	2e0a      	cmp	r6, #10
 80016a8:	dd00      	ble.n	80016ac <__aeabi_dmul+0xc4>
 80016aa:	e231      	b.n	8001b10 <__aeabi_dmul+0x528>
 80016ac:	2000      	movs	r0, #0
 80016ae:	2400      	movs	r4, #0
 80016b0:	2102      	movs	r1, #2
 80016b2:	2e02      	cmp	r6, #2
 80016b4:	dc26      	bgt.n	8001704 <__aeabi_dmul+0x11c>
 80016b6:	3e01      	subs	r6, #1
 80016b8:	2e01      	cmp	r6, #1
 80016ba:	d852      	bhi.n	8001762 <__aeabi_dmul+0x17a>
 80016bc:	2902      	cmp	r1, #2
 80016be:	d04c      	beq.n	800175a <__aeabi_dmul+0x172>
 80016c0:	2901      	cmp	r1, #1
 80016c2:	d000      	beq.n	80016c6 <__aeabi_dmul+0xde>
 80016c4:	e118      	b.n	80018f8 <__aeabi_dmul+0x310>
 80016c6:	2300      	movs	r3, #0
 80016c8:	2400      	movs	r4, #0
 80016ca:	2500      	movs	r5, #0
 80016cc:	051b      	lsls	r3, r3, #20
 80016ce:	4323      	orrs	r3, r4
 80016d0:	07d2      	lsls	r2, r2, #31
 80016d2:	4313      	orrs	r3, r2
 80016d4:	0028      	movs	r0, r5
 80016d6:	0019      	movs	r1, r3
 80016d8:	b007      	add	sp, #28
 80016da:	bcf0      	pop	{r4, r5, r6, r7}
 80016dc:	46bb      	mov	fp, r7
 80016de:	46b2      	mov	sl, r6
 80016e0:	46a9      	mov	r9, r5
 80016e2:	46a0      	mov	r8, r4
 80016e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016e6:	2180      	movs	r1, #128	; 0x80
 80016e8:	2203      	movs	r2, #3
 80016ea:	0109      	lsls	r1, r1, #4
 80016ec:	002b      	movs	r3, r5
 80016ee:	468c      	mov	ip, r1
 80016f0:	4316      	orrs	r6, r2
 80016f2:	4642      	mov	r2, r8
 80016f4:	4463      	add	r3, ip
 80016f6:	407a      	eors	r2, r7
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	9302      	str	r3, [sp, #8]
 80016fc:	2e0a      	cmp	r6, #10
 80016fe:	dd00      	ble.n	8001702 <__aeabi_dmul+0x11a>
 8001700:	e228      	b.n	8001b54 <__aeabi_dmul+0x56c>
 8001702:	2103      	movs	r1, #3
 8001704:	2501      	movs	r5, #1
 8001706:	40b5      	lsls	r5, r6
 8001708:	46ac      	mov	ip, r5
 800170a:	26a6      	movs	r6, #166	; 0xa6
 800170c:	4663      	mov	r3, ip
 800170e:	00f6      	lsls	r6, r6, #3
 8001710:	4035      	ands	r5, r6
 8001712:	4233      	tst	r3, r6
 8001714:	d10b      	bne.n	800172e <__aeabi_dmul+0x146>
 8001716:	2690      	movs	r6, #144	; 0x90
 8001718:	00b6      	lsls	r6, r6, #2
 800171a:	4233      	tst	r3, r6
 800171c:	d118      	bne.n	8001750 <__aeabi_dmul+0x168>
 800171e:	3eb9      	subs	r6, #185	; 0xb9
 8001720:	3eff      	subs	r6, #255	; 0xff
 8001722:	421e      	tst	r6, r3
 8001724:	d01d      	beq.n	8001762 <__aeabi_dmul+0x17a>
 8001726:	46a3      	mov	fp, r4
 8001728:	4682      	mov	sl, r0
 800172a:	9100      	str	r1, [sp, #0]
 800172c:	e000      	b.n	8001730 <__aeabi_dmul+0x148>
 800172e:	0017      	movs	r7, r2
 8001730:	9900      	ldr	r1, [sp, #0]
 8001732:	003a      	movs	r2, r7
 8001734:	2902      	cmp	r1, #2
 8001736:	d010      	beq.n	800175a <__aeabi_dmul+0x172>
 8001738:	465c      	mov	r4, fp
 800173a:	4650      	mov	r0, sl
 800173c:	2903      	cmp	r1, #3
 800173e:	d1bf      	bne.n	80016c0 <__aeabi_dmul+0xd8>
 8001740:	2380      	movs	r3, #128	; 0x80
 8001742:	031b      	lsls	r3, r3, #12
 8001744:	431c      	orrs	r4, r3
 8001746:	0324      	lsls	r4, r4, #12
 8001748:	0005      	movs	r5, r0
 800174a:	4b7f      	ldr	r3, [pc, #508]	; (8001948 <__aeabi_dmul+0x360>)
 800174c:	0b24      	lsrs	r4, r4, #12
 800174e:	e7bd      	b.n	80016cc <__aeabi_dmul+0xe4>
 8001750:	2480      	movs	r4, #128	; 0x80
 8001752:	2200      	movs	r2, #0
 8001754:	4b7c      	ldr	r3, [pc, #496]	; (8001948 <__aeabi_dmul+0x360>)
 8001756:	0324      	lsls	r4, r4, #12
 8001758:	e7b8      	b.n	80016cc <__aeabi_dmul+0xe4>
 800175a:	2400      	movs	r4, #0
 800175c:	2500      	movs	r5, #0
 800175e:	4b7a      	ldr	r3, [pc, #488]	; (8001948 <__aeabi_dmul+0x360>)
 8001760:	e7b4      	b.n	80016cc <__aeabi_dmul+0xe4>
 8001762:	4653      	mov	r3, sl
 8001764:	041e      	lsls	r6, r3, #16
 8001766:	0c36      	lsrs	r6, r6, #16
 8001768:	0c1f      	lsrs	r7, r3, #16
 800176a:	0033      	movs	r3, r6
 800176c:	0c01      	lsrs	r1, r0, #16
 800176e:	0400      	lsls	r0, r0, #16
 8001770:	0c00      	lsrs	r0, r0, #16
 8001772:	4343      	muls	r3, r0
 8001774:	4698      	mov	r8, r3
 8001776:	0003      	movs	r3, r0
 8001778:	437b      	muls	r3, r7
 800177a:	4699      	mov	r9, r3
 800177c:	0033      	movs	r3, r6
 800177e:	434b      	muls	r3, r1
 8001780:	469c      	mov	ip, r3
 8001782:	4643      	mov	r3, r8
 8001784:	000d      	movs	r5, r1
 8001786:	0c1b      	lsrs	r3, r3, #16
 8001788:	469a      	mov	sl, r3
 800178a:	437d      	muls	r5, r7
 800178c:	44cc      	add	ip, r9
 800178e:	44d4      	add	ip, sl
 8001790:	9500      	str	r5, [sp, #0]
 8001792:	45e1      	cmp	r9, ip
 8001794:	d904      	bls.n	80017a0 <__aeabi_dmul+0x1b8>
 8001796:	2380      	movs	r3, #128	; 0x80
 8001798:	025b      	lsls	r3, r3, #9
 800179a:	4699      	mov	r9, r3
 800179c:	444d      	add	r5, r9
 800179e:	9500      	str	r5, [sp, #0]
 80017a0:	4663      	mov	r3, ip
 80017a2:	0c1b      	lsrs	r3, r3, #16
 80017a4:	001d      	movs	r5, r3
 80017a6:	4663      	mov	r3, ip
 80017a8:	041b      	lsls	r3, r3, #16
 80017aa:	469c      	mov	ip, r3
 80017ac:	4643      	mov	r3, r8
 80017ae:	041b      	lsls	r3, r3, #16
 80017b0:	0c1b      	lsrs	r3, r3, #16
 80017b2:	4698      	mov	r8, r3
 80017b4:	4663      	mov	r3, ip
 80017b6:	4443      	add	r3, r8
 80017b8:	9303      	str	r3, [sp, #12]
 80017ba:	0c23      	lsrs	r3, r4, #16
 80017bc:	4698      	mov	r8, r3
 80017be:	0033      	movs	r3, r6
 80017c0:	0424      	lsls	r4, r4, #16
 80017c2:	0c24      	lsrs	r4, r4, #16
 80017c4:	4363      	muls	r3, r4
 80017c6:	469c      	mov	ip, r3
 80017c8:	0023      	movs	r3, r4
 80017ca:	437b      	muls	r3, r7
 80017cc:	4699      	mov	r9, r3
 80017ce:	4643      	mov	r3, r8
 80017d0:	435e      	muls	r6, r3
 80017d2:	435f      	muls	r7, r3
 80017d4:	444e      	add	r6, r9
 80017d6:	4663      	mov	r3, ip
 80017d8:	46b2      	mov	sl, r6
 80017da:	0c1e      	lsrs	r6, r3, #16
 80017dc:	4456      	add	r6, sl
 80017de:	45b1      	cmp	r9, r6
 80017e0:	d903      	bls.n	80017ea <__aeabi_dmul+0x202>
 80017e2:	2380      	movs	r3, #128	; 0x80
 80017e4:	025b      	lsls	r3, r3, #9
 80017e6:	4699      	mov	r9, r3
 80017e8:	444f      	add	r7, r9
 80017ea:	0c33      	lsrs	r3, r6, #16
 80017ec:	4699      	mov	r9, r3
 80017ee:	003b      	movs	r3, r7
 80017f0:	444b      	add	r3, r9
 80017f2:	9305      	str	r3, [sp, #20]
 80017f4:	4663      	mov	r3, ip
 80017f6:	46ac      	mov	ip, r5
 80017f8:	041f      	lsls	r7, r3, #16
 80017fa:	0c3f      	lsrs	r7, r7, #16
 80017fc:	0436      	lsls	r6, r6, #16
 80017fe:	19f6      	adds	r6, r6, r7
 8001800:	44b4      	add	ip, r6
 8001802:	4663      	mov	r3, ip
 8001804:	9304      	str	r3, [sp, #16]
 8001806:	465b      	mov	r3, fp
 8001808:	0c1b      	lsrs	r3, r3, #16
 800180a:	469c      	mov	ip, r3
 800180c:	465b      	mov	r3, fp
 800180e:	041f      	lsls	r7, r3, #16
 8001810:	0c3f      	lsrs	r7, r7, #16
 8001812:	003b      	movs	r3, r7
 8001814:	4343      	muls	r3, r0
 8001816:	4699      	mov	r9, r3
 8001818:	4663      	mov	r3, ip
 800181a:	4343      	muls	r3, r0
 800181c:	469a      	mov	sl, r3
 800181e:	464b      	mov	r3, r9
 8001820:	4660      	mov	r0, ip
 8001822:	0c1b      	lsrs	r3, r3, #16
 8001824:	469b      	mov	fp, r3
 8001826:	4348      	muls	r0, r1
 8001828:	4379      	muls	r1, r7
 800182a:	4451      	add	r1, sl
 800182c:	4459      	add	r1, fp
 800182e:	458a      	cmp	sl, r1
 8001830:	d903      	bls.n	800183a <__aeabi_dmul+0x252>
 8001832:	2380      	movs	r3, #128	; 0x80
 8001834:	025b      	lsls	r3, r3, #9
 8001836:	469a      	mov	sl, r3
 8001838:	4450      	add	r0, sl
 800183a:	0c0b      	lsrs	r3, r1, #16
 800183c:	469a      	mov	sl, r3
 800183e:	464b      	mov	r3, r9
 8001840:	041b      	lsls	r3, r3, #16
 8001842:	0c1b      	lsrs	r3, r3, #16
 8001844:	4699      	mov	r9, r3
 8001846:	003b      	movs	r3, r7
 8001848:	4363      	muls	r3, r4
 800184a:	0409      	lsls	r1, r1, #16
 800184c:	4645      	mov	r5, r8
 800184e:	4449      	add	r1, r9
 8001850:	4699      	mov	r9, r3
 8001852:	4663      	mov	r3, ip
 8001854:	435c      	muls	r4, r3
 8001856:	436b      	muls	r3, r5
 8001858:	469c      	mov	ip, r3
 800185a:	464b      	mov	r3, r9
 800185c:	0c1b      	lsrs	r3, r3, #16
 800185e:	4698      	mov	r8, r3
 8001860:	436f      	muls	r7, r5
 8001862:	193f      	adds	r7, r7, r4
 8001864:	4447      	add	r7, r8
 8001866:	4450      	add	r0, sl
 8001868:	42bc      	cmp	r4, r7
 800186a:	d903      	bls.n	8001874 <__aeabi_dmul+0x28c>
 800186c:	2380      	movs	r3, #128	; 0x80
 800186e:	025b      	lsls	r3, r3, #9
 8001870:	4698      	mov	r8, r3
 8001872:	44c4      	add	ip, r8
 8001874:	9b04      	ldr	r3, [sp, #16]
 8001876:	9d00      	ldr	r5, [sp, #0]
 8001878:	4698      	mov	r8, r3
 800187a:	4445      	add	r5, r8
 800187c:	42b5      	cmp	r5, r6
 800187e:	41b6      	sbcs	r6, r6
 8001880:	4273      	negs	r3, r6
 8001882:	4698      	mov	r8, r3
 8001884:	464b      	mov	r3, r9
 8001886:	041e      	lsls	r6, r3, #16
 8001888:	9b05      	ldr	r3, [sp, #20]
 800188a:	043c      	lsls	r4, r7, #16
 800188c:	4699      	mov	r9, r3
 800188e:	0c36      	lsrs	r6, r6, #16
 8001890:	19a4      	adds	r4, r4, r6
 8001892:	444c      	add	r4, r9
 8001894:	46a1      	mov	r9, r4
 8001896:	4683      	mov	fp, r0
 8001898:	186e      	adds	r6, r5, r1
 800189a:	44c1      	add	r9, r8
 800189c:	428e      	cmp	r6, r1
 800189e:	4189      	sbcs	r1, r1
 80018a0:	44cb      	add	fp, r9
 80018a2:	465d      	mov	r5, fp
 80018a4:	4249      	negs	r1, r1
 80018a6:	186d      	adds	r5, r5, r1
 80018a8:	429c      	cmp	r4, r3
 80018aa:	41a4      	sbcs	r4, r4
 80018ac:	45c1      	cmp	r9, r8
 80018ae:	419b      	sbcs	r3, r3
 80018b0:	4583      	cmp	fp, r0
 80018b2:	4180      	sbcs	r0, r0
 80018b4:	428d      	cmp	r5, r1
 80018b6:	4189      	sbcs	r1, r1
 80018b8:	425b      	negs	r3, r3
 80018ba:	4264      	negs	r4, r4
 80018bc:	431c      	orrs	r4, r3
 80018be:	4240      	negs	r0, r0
 80018c0:	9b03      	ldr	r3, [sp, #12]
 80018c2:	4249      	negs	r1, r1
 80018c4:	4301      	orrs	r1, r0
 80018c6:	0270      	lsls	r0, r6, #9
 80018c8:	0c3f      	lsrs	r7, r7, #16
 80018ca:	4318      	orrs	r0, r3
 80018cc:	19e4      	adds	r4, r4, r7
 80018ce:	1e47      	subs	r7, r0, #1
 80018d0:	41b8      	sbcs	r0, r7
 80018d2:	1864      	adds	r4, r4, r1
 80018d4:	4464      	add	r4, ip
 80018d6:	0df6      	lsrs	r6, r6, #23
 80018d8:	0261      	lsls	r1, r4, #9
 80018da:	4330      	orrs	r0, r6
 80018dc:	0dec      	lsrs	r4, r5, #23
 80018de:	026e      	lsls	r6, r5, #9
 80018e0:	430c      	orrs	r4, r1
 80018e2:	4330      	orrs	r0, r6
 80018e4:	01c9      	lsls	r1, r1, #7
 80018e6:	d400      	bmi.n	80018ea <__aeabi_dmul+0x302>
 80018e8:	e0f1      	b.n	8001ace <__aeabi_dmul+0x4e6>
 80018ea:	2101      	movs	r1, #1
 80018ec:	0843      	lsrs	r3, r0, #1
 80018ee:	4001      	ands	r1, r0
 80018f0:	430b      	orrs	r3, r1
 80018f2:	07e0      	lsls	r0, r4, #31
 80018f4:	4318      	orrs	r0, r3
 80018f6:	0864      	lsrs	r4, r4, #1
 80018f8:	4915      	ldr	r1, [pc, #84]	; (8001950 <__aeabi_dmul+0x368>)
 80018fa:	9b02      	ldr	r3, [sp, #8]
 80018fc:	468c      	mov	ip, r1
 80018fe:	4463      	add	r3, ip
 8001900:	2b00      	cmp	r3, #0
 8001902:	dc00      	bgt.n	8001906 <__aeabi_dmul+0x31e>
 8001904:	e097      	b.n	8001a36 <__aeabi_dmul+0x44e>
 8001906:	0741      	lsls	r1, r0, #29
 8001908:	d009      	beq.n	800191e <__aeabi_dmul+0x336>
 800190a:	210f      	movs	r1, #15
 800190c:	4001      	ands	r1, r0
 800190e:	2904      	cmp	r1, #4
 8001910:	d005      	beq.n	800191e <__aeabi_dmul+0x336>
 8001912:	1d01      	adds	r1, r0, #4
 8001914:	4281      	cmp	r1, r0
 8001916:	4180      	sbcs	r0, r0
 8001918:	4240      	negs	r0, r0
 800191a:	1824      	adds	r4, r4, r0
 800191c:	0008      	movs	r0, r1
 800191e:	01e1      	lsls	r1, r4, #7
 8001920:	d506      	bpl.n	8001930 <__aeabi_dmul+0x348>
 8001922:	2180      	movs	r1, #128	; 0x80
 8001924:	00c9      	lsls	r1, r1, #3
 8001926:	468c      	mov	ip, r1
 8001928:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <__aeabi_dmul+0x36c>)
 800192a:	401c      	ands	r4, r3
 800192c:	9b02      	ldr	r3, [sp, #8]
 800192e:	4463      	add	r3, ip
 8001930:	4909      	ldr	r1, [pc, #36]	; (8001958 <__aeabi_dmul+0x370>)
 8001932:	428b      	cmp	r3, r1
 8001934:	dd00      	ble.n	8001938 <__aeabi_dmul+0x350>
 8001936:	e710      	b.n	800175a <__aeabi_dmul+0x172>
 8001938:	0761      	lsls	r1, r4, #29
 800193a:	08c5      	lsrs	r5, r0, #3
 800193c:	0264      	lsls	r4, r4, #9
 800193e:	055b      	lsls	r3, r3, #21
 8001940:	430d      	orrs	r5, r1
 8001942:	0b24      	lsrs	r4, r4, #12
 8001944:	0d5b      	lsrs	r3, r3, #21
 8001946:	e6c1      	b.n	80016cc <__aeabi_dmul+0xe4>
 8001948:	000007ff 	.word	0x000007ff
 800194c:	fffffc01 	.word	0xfffffc01
 8001950:	000003ff 	.word	0x000003ff
 8001954:	feffffff 	.word	0xfeffffff
 8001958:	000007fe 	.word	0x000007fe
 800195c:	464b      	mov	r3, r9
 800195e:	4323      	orrs	r3, r4
 8001960:	d059      	beq.n	8001a16 <__aeabi_dmul+0x42e>
 8001962:	2c00      	cmp	r4, #0
 8001964:	d100      	bne.n	8001968 <__aeabi_dmul+0x380>
 8001966:	e0a3      	b.n	8001ab0 <__aeabi_dmul+0x4c8>
 8001968:	0020      	movs	r0, r4
 800196a:	f000 fd9d 	bl	80024a8 <__clzsi2>
 800196e:	0001      	movs	r1, r0
 8001970:	0003      	movs	r3, r0
 8001972:	390b      	subs	r1, #11
 8001974:	221d      	movs	r2, #29
 8001976:	1a52      	subs	r2, r2, r1
 8001978:	4649      	mov	r1, r9
 800197a:	0018      	movs	r0, r3
 800197c:	40d1      	lsrs	r1, r2
 800197e:	464a      	mov	r2, r9
 8001980:	3808      	subs	r0, #8
 8001982:	4082      	lsls	r2, r0
 8001984:	4084      	lsls	r4, r0
 8001986:	0010      	movs	r0, r2
 8001988:	430c      	orrs	r4, r1
 800198a:	4a74      	ldr	r2, [pc, #464]	; (8001b5c <__aeabi_dmul+0x574>)
 800198c:	1aeb      	subs	r3, r5, r3
 800198e:	4694      	mov	ip, r2
 8001990:	4642      	mov	r2, r8
 8001992:	4463      	add	r3, ip
 8001994:	9301      	str	r3, [sp, #4]
 8001996:	9b01      	ldr	r3, [sp, #4]
 8001998:	407a      	eors	r2, r7
 800199a:	3301      	adds	r3, #1
 800199c:	2100      	movs	r1, #0
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	9302      	str	r3, [sp, #8]
 80019a2:	2e0a      	cmp	r6, #10
 80019a4:	dd00      	ble.n	80019a8 <__aeabi_dmul+0x3c0>
 80019a6:	e667      	b.n	8001678 <__aeabi_dmul+0x90>
 80019a8:	e683      	b.n	80016b2 <__aeabi_dmul+0xca>
 80019aa:	465b      	mov	r3, fp
 80019ac:	4303      	orrs	r3, r0
 80019ae:	469a      	mov	sl, r3
 80019b0:	d02a      	beq.n	8001a08 <__aeabi_dmul+0x420>
 80019b2:	465b      	mov	r3, fp
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d06d      	beq.n	8001a94 <__aeabi_dmul+0x4ac>
 80019b8:	4658      	mov	r0, fp
 80019ba:	f000 fd75 	bl	80024a8 <__clzsi2>
 80019be:	0001      	movs	r1, r0
 80019c0:	0003      	movs	r3, r0
 80019c2:	390b      	subs	r1, #11
 80019c4:	221d      	movs	r2, #29
 80019c6:	1a52      	subs	r2, r2, r1
 80019c8:	0021      	movs	r1, r4
 80019ca:	0018      	movs	r0, r3
 80019cc:	465d      	mov	r5, fp
 80019ce:	40d1      	lsrs	r1, r2
 80019d0:	3808      	subs	r0, #8
 80019d2:	4085      	lsls	r5, r0
 80019d4:	000a      	movs	r2, r1
 80019d6:	4084      	lsls	r4, r0
 80019d8:	432a      	orrs	r2, r5
 80019da:	4693      	mov	fp, r2
 80019dc:	46a2      	mov	sl, r4
 80019de:	4d5f      	ldr	r5, [pc, #380]	; (8001b5c <__aeabi_dmul+0x574>)
 80019e0:	2600      	movs	r6, #0
 80019e2:	1aed      	subs	r5, r5, r3
 80019e4:	2300      	movs	r3, #0
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	e625      	b.n	8001636 <__aeabi_dmul+0x4e>
 80019ea:	465b      	mov	r3, fp
 80019ec:	4303      	orrs	r3, r0
 80019ee:	469a      	mov	sl, r3
 80019f0:	d105      	bne.n	80019fe <__aeabi_dmul+0x416>
 80019f2:	2300      	movs	r3, #0
 80019f4:	469b      	mov	fp, r3
 80019f6:	3302      	adds	r3, #2
 80019f8:	2608      	movs	r6, #8
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	e61b      	b.n	8001636 <__aeabi_dmul+0x4e>
 80019fe:	2303      	movs	r3, #3
 8001a00:	4682      	mov	sl, r0
 8001a02:	260c      	movs	r6, #12
 8001a04:	9300      	str	r3, [sp, #0]
 8001a06:	e616      	b.n	8001636 <__aeabi_dmul+0x4e>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	469b      	mov	fp, r3
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	2604      	movs	r6, #4
 8001a10:	2500      	movs	r5, #0
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	e60f      	b.n	8001636 <__aeabi_dmul+0x4e>
 8001a16:	4642      	mov	r2, r8
 8001a18:	3301      	adds	r3, #1
 8001a1a:	9501      	str	r5, [sp, #4]
 8001a1c:	431e      	orrs	r6, r3
 8001a1e:	9b01      	ldr	r3, [sp, #4]
 8001a20:	407a      	eors	r2, r7
 8001a22:	3301      	adds	r3, #1
 8001a24:	2400      	movs	r4, #0
 8001a26:	2000      	movs	r0, #0
 8001a28:	2101      	movs	r1, #1
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	9302      	str	r3, [sp, #8]
 8001a2e:	2e0a      	cmp	r6, #10
 8001a30:	dd00      	ble.n	8001a34 <__aeabi_dmul+0x44c>
 8001a32:	e621      	b.n	8001678 <__aeabi_dmul+0x90>
 8001a34:	e63d      	b.n	80016b2 <__aeabi_dmul+0xca>
 8001a36:	2101      	movs	r1, #1
 8001a38:	1ac9      	subs	r1, r1, r3
 8001a3a:	2938      	cmp	r1, #56	; 0x38
 8001a3c:	dd00      	ble.n	8001a40 <__aeabi_dmul+0x458>
 8001a3e:	e642      	b.n	80016c6 <__aeabi_dmul+0xde>
 8001a40:	291f      	cmp	r1, #31
 8001a42:	dd47      	ble.n	8001ad4 <__aeabi_dmul+0x4ec>
 8001a44:	261f      	movs	r6, #31
 8001a46:	0025      	movs	r5, r4
 8001a48:	4276      	negs	r6, r6
 8001a4a:	1af3      	subs	r3, r6, r3
 8001a4c:	40dd      	lsrs	r5, r3
 8001a4e:	002b      	movs	r3, r5
 8001a50:	2920      	cmp	r1, #32
 8001a52:	d005      	beq.n	8001a60 <__aeabi_dmul+0x478>
 8001a54:	4942      	ldr	r1, [pc, #264]	; (8001b60 <__aeabi_dmul+0x578>)
 8001a56:	9d02      	ldr	r5, [sp, #8]
 8001a58:	468c      	mov	ip, r1
 8001a5a:	4465      	add	r5, ip
 8001a5c:	40ac      	lsls	r4, r5
 8001a5e:	4320      	orrs	r0, r4
 8001a60:	1e41      	subs	r1, r0, #1
 8001a62:	4188      	sbcs	r0, r1
 8001a64:	4318      	orrs	r0, r3
 8001a66:	2307      	movs	r3, #7
 8001a68:	001d      	movs	r5, r3
 8001a6a:	2400      	movs	r4, #0
 8001a6c:	4005      	ands	r5, r0
 8001a6e:	4203      	tst	r3, r0
 8001a70:	d04a      	beq.n	8001b08 <__aeabi_dmul+0x520>
 8001a72:	230f      	movs	r3, #15
 8001a74:	2400      	movs	r4, #0
 8001a76:	4003      	ands	r3, r0
 8001a78:	2b04      	cmp	r3, #4
 8001a7a:	d042      	beq.n	8001b02 <__aeabi_dmul+0x51a>
 8001a7c:	1d03      	adds	r3, r0, #4
 8001a7e:	4283      	cmp	r3, r0
 8001a80:	4180      	sbcs	r0, r0
 8001a82:	4240      	negs	r0, r0
 8001a84:	1824      	adds	r4, r4, r0
 8001a86:	0018      	movs	r0, r3
 8001a88:	0223      	lsls	r3, r4, #8
 8001a8a:	d53a      	bpl.n	8001b02 <__aeabi_dmul+0x51a>
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	2400      	movs	r4, #0
 8001a90:	2500      	movs	r5, #0
 8001a92:	e61b      	b.n	80016cc <__aeabi_dmul+0xe4>
 8001a94:	f000 fd08 	bl	80024a8 <__clzsi2>
 8001a98:	0001      	movs	r1, r0
 8001a9a:	0003      	movs	r3, r0
 8001a9c:	3115      	adds	r1, #21
 8001a9e:	3320      	adds	r3, #32
 8001aa0:	291c      	cmp	r1, #28
 8001aa2:	dd8f      	ble.n	80019c4 <__aeabi_dmul+0x3dc>
 8001aa4:	3808      	subs	r0, #8
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	4084      	lsls	r4, r0
 8001aaa:	4692      	mov	sl, r2
 8001aac:	46a3      	mov	fp, r4
 8001aae:	e796      	b.n	80019de <__aeabi_dmul+0x3f6>
 8001ab0:	f000 fcfa 	bl	80024a8 <__clzsi2>
 8001ab4:	0001      	movs	r1, r0
 8001ab6:	0003      	movs	r3, r0
 8001ab8:	3115      	adds	r1, #21
 8001aba:	3320      	adds	r3, #32
 8001abc:	291c      	cmp	r1, #28
 8001abe:	dc00      	bgt.n	8001ac2 <__aeabi_dmul+0x4da>
 8001ac0:	e758      	b.n	8001974 <__aeabi_dmul+0x38c>
 8001ac2:	0002      	movs	r2, r0
 8001ac4:	464c      	mov	r4, r9
 8001ac6:	3a08      	subs	r2, #8
 8001ac8:	2000      	movs	r0, #0
 8001aca:	4094      	lsls	r4, r2
 8001acc:	e75d      	b.n	800198a <__aeabi_dmul+0x3a2>
 8001ace:	9b01      	ldr	r3, [sp, #4]
 8001ad0:	9302      	str	r3, [sp, #8]
 8001ad2:	e711      	b.n	80018f8 <__aeabi_dmul+0x310>
 8001ad4:	4b23      	ldr	r3, [pc, #140]	; (8001b64 <__aeabi_dmul+0x57c>)
 8001ad6:	0026      	movs	r6, r4
 8001ad8:	469c      	mov	ip, r3
 8001ada:	0003      	movs	r3, r0
 8001adc:	9d02      	ldr	r5, [sp, #8]
 8001ade:	40cb      	lsrs	r3, r1
 8001ae0:	4465      	add	r5, ip
 8001ae2:	40ae      	lsls	r6, r5
 8001ae4:	431e      	orrs	r6, r3
 8001ae6:	0003      	movs	r3, r0
 8001ae8:	40ab      	lsls	r3, r5
 8001aea:	1e58      	subs	r0, r3, #1
 8001aec:	4183      	sbcs	r3, r0
 8001aee:	0030      	movs	r0, r6
 8001af0:	4318      	orrs	r0, r3
 8001af2:	40cc      	lsrs	r4, r1
 8001af4:	0743      	lsls	r3, r0, #29
 8001af6:	d0c7      	beq.n	8001a88 <__aeabi_dmul+0x4a0>
 8001af8:	230f      	movs	r3, #15
 8001afa:	4003      	ands	r3, r0
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d1bd      	bne.n	8001a7c <__aeabi_dmul+0x494>
 8001b00:	e7c2      	b.n	8001a88 <__aeabi_dmul+0x4a0>
 8001b02:	0765      	lsls	r5, r4, #29
 8001b04:	0264      	lsls	r4, r4, #9
 8001b06:	0b24      	lsrs	r4, r4, #12
 8001b08:	08c0      	lsrs	r0, r0, #3
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	4305      	orrs	r5, r0
 8001b0e:	e5dd      	b.n	80016cc <__aeabi_dmul+0xe4>
 8001b10:	2500      	movs	r5, #0
 8001b12:	2302      	movs	r3, #2
 8001b14:	2e0f      	cmp	r6, #15
 8001b16:	d10c      	bne.n	8001b32 <__aeabi_dmul+0x54a>
 8001b18:	2480      	movs	r4, #128	; 0x80
 8001b1a:	465b      	mov	r3, fp
 8001b1c:	0324      	lsls	r4, r4, #12
 8001b1e:	4223      	tst	r3, r4
 8001b20:	d00e      	beq.n	8001b40 <__aeabi_dmul+0x558>
 8001b22:	4221      	tst	r1, r4
 8001b24:	d10c      	bne.n	8001b40 <__aeabi_dmul+0x558>
 8001b26:	430c      	orrs	r4, r1
 8001b28:	0324      	lsls	r4, r4, #12
 8001b2a:	003a      	movs	r2, r7
 8001b2c:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <__aeabi_dmul+0x580>)
 8001b2e:	0b24      	lsrs	r4, r4, #12
 8001b30:	e5cc      	b.n	80016cc <__aeabi_dmul+0xe4>
 8001b32:	2e0b      	cmp	r6, #11
 8001b34:	d000      	beq.n	8001b38 <__aeabi_dmul+0x550>
 8001b36:	e5a2      	b.n	800167e <__aeabi_dmul+0x96>
 8001b38:	468b      	mov	fp, r1
 8001b3a:	46aa      	mov	sl, r5
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	e5f7      	b.n	8001730 <__aeabi_dmul+0x148>
 8001b40:	2480      	movs	r4, #128	; 0x80
 8001b42:	465b      	mov	r3, fp
 8001b44:	0324      	lsls	r4, r4, #12
 8001b46:	431c      	orrs	r4, r3
 8001b48:	0324      	lsls	r4, r4, #12
 8001b4a:	4642      	mov	r2, r8
 8001b4c:	4655      	mov	r5, sl
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <__aeabi_dmul+0x580>)
 8001b50:	0b24      	lsrs	r4, r4, #12
 8001b52:	e5bb      	b.n	80016cc <__aeabi_dmul+0xe4>
 8001b54:	464d      	mov	r5, r9
 8001b56:	0021      	movs	r1, r4
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e7db      	b.n	8001b14 <__aeabi_dmul+0x52c>
 8001b5c:	fffffc0d 	.word	0xfffffc0d
 8001b60:	0000043e 	.word	0x0000043e
 8001b64:	0000041e 	.word	0x0000041e
 8001b68:	000007ff 	.word	0x000007ff

08001b6c <__aeabi_dsub>:
 8001b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b6e:	4657      	mov	r7, sl
 8001b70:	464e      	mov	r6, r9
 8001b72:	4645      	mov	r5, r8
 8001b74:	46de      	mov	lr, fp
 8001b76:	b5e0      	push	{r5, r6, r7, lr}
 8001b78:	000d      	movs	r5, r1
 8001b7a:	0004      	movs	r4, r0
 8001b7c:	0019      	movs	r1, r3
 8001b7e:	0010      	movs	r0, r2
 8001b80:	032b      	lsls	r3, r5, #12
 8001b82:	0a5b      	lsrs	r3, r3, #9
 8001b84:	0f62      	lsrs	r2, r4, #29
 8001b86:	431a      	orrs	r2, r3
 8001b88:	00e3      	lsls	r3, r4, #3
 8001b8a:	030c      	lsls	r4, r1, #12
 8001b8c:	0a64      	lsrs	r4, r4, #9
 8001b8e:	0f47      	lsrs	r7, r0, #29
 8001b90:	4327      	orrs	r7, r4
 8001b92:	4cd0      	ldr	r4, [pc, #832]	; (8001ed4 <__aeabi_dsub+0x368>)
 8001b94:	006e      	lsls	r6, r5, #1
 8001b96:	4691      	mov	r9, r2
 8001b98:	b083      	sub	sp, #12
 8001b9a:	004a      	lsls	r2, r1, #1
 8001b9c:	00c0      	lsls	r0, r0, #3
 8001b9e:	4698      	mov	r8, r3
 8001ba0:	46a2      	mov	sl, r4
 8001ba2:	0d76      	lsrs	r6, r6, #21
 8001ba4:	0fed      	lsrs	r5, r5, #31
 8001ba6:	0d52      	lsrs	r2, r2, #21
 8001ba8:	0fc9      	lsrs	r1, r1, #31
 8001baa:	9001      	str	r0, [sp, #4]
 8001bac:	42a2      	cmp	r2, r4
 8001bae:	d100      	bne.n	8001bb2 <__aeabi_dsub+0x46>
 8001bb0:	e0b9      	b.n	8001d26 <__aeabi_dsub+0x1ba>
 8001bb2:	2401      	movs	r4, #1
 8001bb4:	4061      	eors	r1, r4
 8001bb6:	468b      	mov	fp, r1
 8001bb8:	428d      	cmp	r5, r1
 8001bba:	d100      	bne.n	8001bbe <__aeabi_dsub+0x52>
 8001bbc:	e08d      	b.n	8001cda <__aeabi_dsub+0x16e>
 8001bbe:	1ab4      	subs	r4, r6, r2
 8001bc0:	46a4      	mov	ip, r4
 8001bc2:	2c00      	cmp	r4, #0
 8001bc4:	dc00      	bgt.n	8001bc8 <__aeabi_dsub+0x5c>
 8001bc6:	e0b7      	b.n	8001d38 <__aeabi_dsub+0x1cc>
 8001bc8:	2a00      	cmp	r2, #0
 8001bca:	d100      	bne.n	8001bce <__aeabi_dsub+0x62>
 8001bcc:	e0cb      	b.n	8001d66 <__aeabi_dsub+0x1fa>
 8001bce:	4ac1      	ldr	r2, [pc, #772]	; (8001ed4 <__aeabi_dsub+0x368>)
 8001bd0:	4296      	cmp	r6, r2
 8001bd2:	d100      	bne.n	8001bd6 <__aeabi_dsub+0x6a>
 8001bd4:	e186      	b.n	8001ee4 <__aeabi_dsub+0x378>
 8001bd6:	2280      	movs	r2, #128	; 0x80
 8001bd8:	0412      	lsls	r2, r2, #16
 8001bda:	4317      	orrs	r7, r2
 8001bdc:	4662      	mov	r2, ip
 8001bde:	2a38      	cmp	r2, #56	; 0x38
 8001be0:	dd00      	ble.n	8001be4 <__aeabi_dsub+0x78>
 8001be2:	e1a4      	b.n	8001f2e <__aeabi_dsub+0x3c2>
 8001be4:	2a1f      	cmp	r2, #31
 8001be6:	dd00      	ble.n	8001bea <__aeabi_dsub+0x7e>
 8001be8:	e21d      	b.n	8002026 <__aeabi_dsub+0x4ba>
 8001bea:	4661      	mov	r1, ip
 8001bec:	2220      	movs	r2, #32
 8001bee:	003c      	movs	r4, r7
 8001bf0:	1a52      	subs	r2, r2, r1
 8001bf2:	0001      	movs	r1, r0
 8001bf4:	4090      	lsls	r0, r2
 8001bf6:	4094      	lsls	r4, r2
 8001bf8:	1e42      	subs	r2, r0, #1
 8001bfa:	4190      	sbcs	r0, r2
 8001bfc:	4662      	mov	r2, ip
 8001bfe:	46a0      	mov	r8, r4
 8001c00:	4664      	mov	r4, ip
 8001c02:	40d7      	lsrs	r7, r2
 8001c04:	464a      	mov	r2, r9
 8001c06:	40e1      	lsrs	r1, r4
 8001c08:	4644      	mov	r4, r8
 8001c0a:	1bd2      	subs	r2, r2, r7
 8001c0c:	4691      	mov	r9, r2
 8001c0e:	430c      	orrs	r4, r1
 8001c10:	4304      	orrs	r4, r0
 8001c12:	1b1c      	subs	r4, r3, r4
 8001c14:	42a3      	cmp	r3, r4
 8001c16:	4192      	sbcs	r2, r2
 8001c18:	464b      	mov	r3, r9
 8001c1a:	4252      	negs	r2, r2
 8001c1c:	1a9b      	subs	r3, r3, r2
 8001c1e:	469a      	mov	sl, r3
 8001c20:	4653      	mov	r3, sl
 8001c22:	021b      	lsls	r3, r3, #8
 8001c24:	d400      	bmi.n	8001c28 <__aeabi_dsub+0xbc>
 8001c26:	e12b      	b.n	8001e80 <__aeabi_dsub+0x314>
 8001c28:	4653      	mov	r3, sl
 8001c2a:	025a      	lsls	r2, r3, #9
 8001c2c:	0a53      	lsrs	r3, r2, #9
 8001c2e:	469a      	mov	sl, r3
 8001c30:	4653      	mov	r3, sl
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d100      	bne.n	8001c38 <__aeabi_dsub+0xcc>
 8001c36:	e166      	b.n	8001f06 <__aeabi_dsub+0x39a>
 8001c38:	4650      	mov	r0, sl
 8001c3a:	f000 fc35 	bl	80024a8 <__clzsi2>
 8001c3e:	0003      	movs	r3, r0
 8001c40:	3b08      	subs	r3, #8
 8001c42:	2220      	movs	r2, #32
 8001c44:	0020      	movs	r0, r4
 8001c46:	1ad2      	subs	r2, r2, r3
 8001c48:	4651      	mov	r1, sl
 8001c4a:	40d0      	lsrs	r0, r2
 8001c4c:	4099      	lsls	r1, r3
 8001c4e:	0002      	movs	r2, r0
 8001c50:	409c      	lsls	r4, r3
 8001c52:	430a      	orrs	r2, r1
 8001c54:	429e      	cmp	r6, r3
 8001c56:	dd00      	ble.n	8001c5a <__aeabi_dsub+0xee>
 8001c58:	e164      	b.n	8001f24 <__aeabi_dsub+0x3b8>
 8001c5a:	1b9b      	subs	r3, r3, r6
 8001c5c:	1c59      	adds	r1, r3, #1
 8001c5e:	291f      	cmp	r1, #31
 8001c60:	dd00      	ble.n	8001c64 <__aeabi_dsub+0xf8>
 8001c62:	e0fe      	b.n	8001e62 <__aeabi_dsub+0x2f6>
 8001c64:	2320      	movs	r3, #32
 8001c66:	0010      	movs	r0, r2
 8001c68:	0026      	movs	r6, r4
 8001c6a:	1a5b      	subs	r3, r3, r1
 8001c6c:	409c      	lsls	r4, r3
 8001c6e:	4098      	lsls	r0, r3
 8001c70:	40ce      	lsrs	r6, r1
 8001c72:	40ca      	lsrs	r2, r1
 8001c74:	1e63      	subs	r3, r4, #1
 8001c76:	419c      	sbcs	r4, r3
 8001c78:	4330      	orrs	r0, r6
 8001c7a:	4692      	mov	sl, r2
 8001c7c:	2600      	movs	r6, #0
 8001c7e:	4304      	orrs	r4, r0
 8001c80:	0763      	lsls	r3, r4, #29
 8001c82:	d009      	beq.n	8001c98 <__aeabi_dsub+0x12c>
 8001c84:	230f      	movs	r3, #15
 8001c86:	4023      	ands	r3, r4
 8001c88:	2b04      	cmp	r3, #4
 8001c8a:	d005      	beq.n	8001c98 <__aeabi_dsub+0x12c>
 8001c8c:	1d23      	adds	r3, r4, #4
 8001c8e:	42a3      	cmp	r3, r4
 8001c90:	41a4      	sbcs	r4, r4
 8001c92:	4264      	negs	r4, r4
 8001c94:	44a2      	add	sl, r4
 8001c96:	001c      	movs	r4, r3
 8001c98:	4653      	mov	r3, sl
 8001c9a:	021b      	lsls	r3, r3, #8
 8001c9c:	d400      	bmi.n	8001ca0 <__aeabi_dsub+0x134>
 8001c9e:	e0f2      	b.n	8001e86 <__aeabi_dsub+0x31a>
 8001ca0:	4b8c      	ldr	r3, [pc, #560]	; (8001ed4 <__aeabi_dsub+0x368>)
 8001ca2:	3601      	adds	r6, #1
 8001ca4:	429e      	cmp	r6, r3
 8001ca6:	d100      	bne.n	8001caa <__aeabi_dsub+0x13e>
 8001ca8:	e10f      	b.n	8001eca <__aeabi_dsub+0x35e>
 8001caa:	4653      	mov	r3, sl
 8001cac:	498a      	ldr	r1, [pc, #552]	; (8001ed8 <__aeabi_dsub+0x36c>)
 8001cae:	08e4      	lsrs	r4, r4, #3
 8001cb0:	400b      	ands	r3, r1
 8001cb2:	0019      	movs	r1, r3
 8001cb4:	075b      	lsls	r3, r3, #29
 8001cb6:	4323      	orrs	r3, r4
 8001cb8:	0572      	lsls	r2, r6, #21
 8001cba:	024c      	lsls	r4, r1, #9
 8001cbc:	0b24      	lsrs	r4, r4, #12
 8001cbe:	0d52      	lsrs	r2, r2, #21
 8001cc0:	0512      	lsls	r2, r2, #20
 8001cc2:	4322      	orrs	r2, r4
 8001cc4:	07ed      	lsls	r5, r5, #31
 8001cc6:	432a      	orrs	r2, r5
 8001cc8:	0018      	movs	r0, r3
 8001cca:	0011      	movs	r1, r2
 8001ccc:	b003      	add	sp, #12
 8001cce:	bcf0      	pop	{r4, r5, r6, r7}
 8001cd0:	46bb      	mov	fp, r7
 8001cd2:	46b2      	mov	sl, r6
 8001cd4:	46a9      	mov	r9, r5
 8001cd6:	46a0      	mov	r8, r4
 8001cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cda:	1ab4      	subs	r4, r6, r2
 8001cdc:	46a4      	mov	ip, r4
 8001cde:	2c00      	cmp	r4, #0
 8001ce0:	dd59      	ble.n	8001d96 <__aeabi_dsub+0x22a>
 8001ce2:	2a00      	cmp	r2, #0
 8001ce4:	d100      	bne.n	8001ce8 <__aeabi_dsub+0x17c>
 8001ce6:	e0b0      	b.n	8001e4a <__aeabi_dsub+0x2de>
 8001ce8:	4556      	cmp	r6, sl
 8001cea:	d100      	bne.n	8001cee <__aeabi_dsub+0x182>
 8001cec:	e0fa      	b.n	8001ee4 <__aeabi_dsub+0x378>
 8001cee:	2280      	movs	r2, #128	; 0x80
 8001cf0:	0412      	lsls	r2, r2, #16
 8001cf2:	4317      	orrs	r7, r2
 8001cf4:	4662      	mov	r2, ip
 8001cf6:	2a38      	cmp	r2, #56	; 0x38
 8001cf8:	dd00      	ble.n	8001cfc <__aeabi_dsub+0x190>
 8001cfa:	e0d4      	b.n	8001ea6 <__aeabi_dsub+0x33a>
 8001cfc:	2a1f      	cmp	r2, #31
 8001cfe:	dc00      	bgt.n	8001d02 <__aeabi_dsub+0x196>
 8001d00:	e1c0      	b.n	8002084 <__aeabi_dsub+0x518>
 8001d02:	0039      	movs	r1, r7
 8001d04:	3a20      	subs	r2, #32
 8001d06:	40d1      	lsrs	r1, r2
 8001d08:	4662      	mov	r2, ip
 8001d0a:	2a20      	cmp	r2, #32
 8001d0c:	d006      	beq.n	8001d1c <__aeabi_dsub+0x1b0>
 8001d0e:	4664      	mov	r4, ip
 8001d10:	2240      	movs	r2, #64	; 0x40
 8001d12:	1b12      	subs	r2, r2, r4
 8001d14:	003c      	movs	r4, r7
 8001d16:	4094      	lsls	r4, r2
 8001d18:	4304      	orrs	r4, r0
 8001d1a:	9401      	str	r4, [sp, #4]
 8001d1c:	9c01      	ldr	r4, [sp, #4]
 8001d1e:	1e62      	subs	r2, r4, #1
 8001d20:	4194      	sbcs	r4, r2
 8001d22:	430c      	orrs	r4, r1
 8001d24:	e0c3      	b.n	8001eae <__aeabi_dsub+0x342>
 8001d26:	003c      	movs	r4, r7
 8001d28:	4304      	orrs	r4, r0
 8001d2a:	d02b      	beq.n	8001d84 <__aeabi_dsub+0x218>
 8001d2c:	468b      	mov	fp, r1
 8001d2e:	428d      	cmp	r5, r1
 8001d30:	d02e      	beq.n	8001d90 <__aeabi_dsub+0x224>
 8001d32:	4c6a      	ldr	r4, [pc, #424]	; (8001edc <__aeabi_dsub+0x370>)
 8001d34:	46a4      	mov	ip, r4
 8001d36:	44b4      	add	ip, r6
 8001d38:	4664      	mov	r4, ip
 8001d3a:	2c00      	cmp	r4, #0
 8001d3c:	d05f      	beq.n	8001dfe <__aeabi_dsub+0x292>
 8001d3e:	1b94      	subs	r4, r2, r6
 8001d40:	46a4      	mov	ip, r4
 8001d42:	2e00      	cmp	r6, #0
 8001d44:	d000      	beq.n	8001d48 <__aeabi_dsub+0x1dc>
 8001d46:	e120      	b.n	8001f8a <__aeabi_dsub+0x41e>
 8001d48:	464c      	mov	r4, r9
 8001d4a:	431c      	orrs	r4, r3
 8001d4c:	d100      	bne.n	8001d50 <__aeabi_dsub+0x1e4>
 8001d4e:	e1c7      	b.n	80020e0 <__aeabi_dsub+0x574>
 8001d50:	4661      	mov	r1, ip
 8001d52:	1e4c      	subs	r4, r1, #1
 8001d54:	2901      	cmp	r1, #1
 8001d56:	d100      	bne.n	8001d5a <__aeabi_dsub+0x1ee>
 8001d58:	e223      	b.n	80021a2 <__aeabi_dsub+0x636>
 8001d5a:	4d5e      	ldr	r5, [pc, #376]	; (8001ed4 <__aeabi_dsub+0x368>)
 8001d5c:	45ac      	cmp	ip, r5
 8001d5e:	d100      	bne.n	8001d62 <__aeabi_dsub+0x1f6>
 8001d60:	e1d8      	b.n	8002114 <__aeabi_dsub+0x5a8>
 8001d62:	46a4      	mov	ip, r4
 8001d64:	e11a      	b.n	8001f9c <__aeabi_dsub+0x430>
 8001d66:	003a      	movs	r2, r7
 8001d68:	4302      	orrs	r2, r0
 8001d6a:	d100      	bne.n	8001d6e <__aeabi_dsub+0x202>
 8001d6c:	e0e4      	b.n	8001f38 <__aeabi_dsub+0x3cc>
 8001d6e:	0022      	movs	r2, r4
 8001d70:	3a01      	subs	r2, #1
 8001d72:	2c01      	cmp	r4, #1
 8001d74:	d100      	bne.n	8001d78 <__aeabi_dsub+0x20c>
 8001d76:	e1c3      	b.n	8002100 <__aeabi_dsub+0x594>
 8001d78:	4956      	ldr	r1, [pc, #344]	; (8001ed4 <__aeabi_dsub+0x368>)
 8001d7a:	428c      	cmp	r4, r1
 8001d7c:	d100      	bne.n	8001d80 <__aeabi_dsub+0x214>
 8001d7e:	e0b1      	b.n	8001ee4 <__aeabi_dsub+0x378>
 8001d80:	4694      	mov	ip, r2
 8001d82:	e72b      	b.n	8001bdc <__aeabi_dsub+0x70>
 8001d84:	2401      	movs	r4, #1
 8001d86:	4061      	eors	r1, r4
 8001d88:	468b      	mov	fp, r1
 8001d8a:	428d      	cmp	r5, r1
 8001d8c:	d000      	beq.n	8001d90 <__aeabi_dsub+0x224>
 8001d8e:	e716      	b.n	8001bbe <__aeabi_dsub+0x52>
 8001d90:	4952      	ldr	r1, [pc, #328]	; (8001edc <__aeabi_dsub+0x370>)
 8001d92:	468c      	mov	ip, r1
 8001d94:	44b4      	add	ip, r6
 8001d96:	4664      	mov	r4, ip
 8001d98:	2c00      	cmp	r4, #0
 8001d9a:	d100      	bne.n	8001d9e <__aeabi_dsub+0x232>
 8001d9c:	e0d3      	b.n	8001f46 <__aeabi_dsub+0x3da>
 8001d9e:	1b91      	subs	r1, r2, r6
 8001da0:	468c      	mov	ip, r1
 8001da2:	2e00      	cmp	r6, #0
 8001da4:	d100      	bne.n	8001da8 <__aeabi_dsub+0x23c>
 8001da6:	e15e      	b.n	8002066 <__aeabi_dsub+0x4fa>
 8001da8:	494a      	ldr	r1, [pc, #296]	; (8001ed4 <__aeabi_dsub+0x368>)
 8001daa:	428a      	cmp	r2, r1
 8001dac:	d100      	bne.n	8001db0 <__aeabi_dsub+0x244>
 8001dae:	e1be      	b.n	800212e <__aeabi_dsub+0x5c2>
 8001db0:	2180      	movs	r1, #128	; 0x80
 8001db2:	464c      	mov	r4, r9
 8001db4:	0409      	lsls	r1, r1, #16
 8001db6:	430c      	orrs	r4, r1
 8001db8:	46a1      	mov	r9, r4
 8001dba:	4661      	mov	r1, ip
 8001dbc:	2938      	cmp	r1, #56	; 0x38
 8001dbe:	dd00      	ble.n	8001dc2 <__aeabi_dsub+0x256>
 8001dc0:	e1ba      	b.n	8002138 <__aeabi_dsub+0x5cc>
 8001dc2:	291f      	cmp	r1, #31
 8001dc4:	dd00      	ble.n	8001dc8 <__aeabi_dsub+0x25c>
 8001dc6:	e227      	b.n	8002218 <__aeabi_dsub+0x6ac>
 8001dc8:	2420      	movs	r4, #32
 8001dca:	1a64      	subs	r4, r4, r1
 8001dcc:	4649      	mov	r1, r9
 8001dce:	40a1      	lsls	r1, r4
 8001dd0:	001e      	movs	r6, r3
 8001dd2:	4688      	mov	r8, r1
 8001dd4:	4661      	mov	r1, ip
 8001dd6:	40a3      	lsls	r3, r4
 8001dd8:	40ce      	lsrs	r6, r1
 8001dda:	4641      	mov	r1, r8
 8001ddc:	1e5c      	subs	r4, r3, #1
 8001dde:	41a3      	sbcs	r3, r4
 8001de0:	4331      	orrs	r1, r6
 8001de2:	4319      	orrs	r1, r3
 8001de4:	000c      	movs	r4, r1
 8001de6:	4663      	mov	r3, ip
 8001de8:	4649      	mov	r1, r9
 8001dea:	40d9      	lsrs	r1, r3
 8001dec:	187f      	adds	r7, r7, r1
 8001dee:	1824      	adds	r4, r4, r0
 8001df0:	4284      	cmp	r4, r0
 8001df2:	419b      	sbcs	r3, r3
 8001df4:	425b      	negs	r3, r3
 8001df6:	469a      	mov	sl, r3
 8001df8:	0016      	movs	r6, r2
 8001dfa:	44ba      	add	sl, r7
 8001dfc:	e05d      	b.n	8001eba <__aeabi_dsub+0x34e>
 8001dfe:	4c38      	ldr	r4, [pc, #224]	; (8001ee0 <__aeabi_dsub+0x374>)
 8001e00:	1c72      	adds	r2, r6, #1
 8001e02:	4222      	tst	r2, r4
 8001e04:	d000      	beq.n	8001e08 <__aeabi_dsub+0x29c>
 8001e06:	e0df      	b.n	8001fc8 <__aeabi_dsub+0x45c>
 8001e08:	464a      	mov	r2, r9
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	2e00      	cmp	r6, #0
 8001e0e:	d000      	beq.n	8001e12 <__aeabi_dsub+0x2a6>
 8001e10:	e15c      	b.n	80020cc <__aeabi_dsub+0x560>
 8001e12:	2a00      	cmp	r2, #0
 8001e14:	d100      	bne.n	8001e18 <__aeabi_dsub+0x2ac>
 8001e16:	e1cf      	b.n	80021b8 <__aeabi_dsub+0x64c>
 8001e18:	003a      	movs	r2, r7
 8001e1a:	4302      	orrs	r2, r0
 8001e1c:	d100      	bne.n	8001e20 <__aeabi_dsub+0x2b4>
 8001e1e:	e17f      	b.n	8002120 <__aeabi_dsub+0x5b4>
 8001e20:	1a1c      	subs	r4, r3, r0
 8001e22:	464a      	mov	r2, r9
 8001e24:	42a3      	cmp	r3, r4
 8001e26:	4189      	sbcs	r1, r1
 8001e28:	1bd2      	subs	r2, r2, r7
 8001e2a:	4249      	negs	r1, r1
 8001e2c:	1a52      	subs	r2, r2, r1
 8001e2e:	4692      	mov	sl, r2
 8001e30:	0212      	lsls	r2, r2, #8
 8001e32:	d400      	bmi.n	8001e36 <__aeabi_dsub+0x2ca>
 8001e34:	e20a      	b.n	800224c <__aeabi_dsub+0x6e0>
 8001e36:	1ac4      	subs	r4, r0, r3
 8001e38:	42a0      	cmp	r0, r4
 8001e3a:	4180      	sbcs	r0, r0
 8001e3c:	464b      	mov	r3, r9
 8001e3e:	4240      	negs	r0, r0
 8001e40:	1aff      	subs	r7, r7, r3
 8001e42:	1a3b      	subs	r3, r7, r0
 8001e44:	469a      	mov	sl, r3
 8001e46:	465d      	mov	r5, fp
 8001e48:	e71a      	b.n	8001c80 <__aeabi_dsub+0x114>
 8001e4a:	003a      	movs	r2, r7
 8001e4c:	4302      	orrs	r2, r0
 8001e4e:	d073      	beq.n	8001f38 <__aeabi_dsub+0x3cc>
 8001e50:	0022      	movs	r2, r4
 8001e52:	3a01      	subs	r2, #1
 8001e54:	2c01      	cmp	r4, #1
 8001e56:	d100      	bne.n	8001e5a <__aeabi_dsub+0x2ee>
 8001e58:	e0cb      	b.n	8001ff2 <__aeabi_dsub+0x486>
 8001e5a:	4554      	cmp	r4, sl
 8001e5c:	d042      	beq.n	8001ee4 <__aeabi_dsub+0x378>
 8001e5e:	4694      	mov	ip, r2
 8001e60:	e748      	b.n	8001cf4 <__aeabi_dsub+0x188>
 8001e62:	0010      	movs	r0, r2
 8001e64:	3b1f      	subs	r3, #31
 8001e66:	40d8      	lsrs	r0, r3
 8001e68:	2920      	cmp	r1, #32
 8001e6a:	d003      	beq.n	8001e74 <__aeabi_dsub+0x308>
 8001e6c:	2340      	movs	r3, #64	; 0x40
 8001e6e:	1a5b      	subs	r3, r3, r1
 8001e70:	409a      	lsls	r2, r3
 8001e72:	4314      	orrs	r4, r2
 8001e74:	1e63      	subs	r3, r4, #1
 8001e76:	419c      	sbcs	r4, r3
 8001e78:	2300      	movs	r3, #0
 8001e7a:	2600      	movs	r6, #0
 8001e7c:	469a      	mov	sl, r3
 8001e7e:	4304      	orrs	r4, r0
 8001e80:	0763      	lsls	r3, r4, #29
 8001e82:	d000      	beq.n	8001e86 <__aeabi_dsub+0x31a>
 8001e84:	e6fe      	b.n	8001c84 <__aeabi_dsub+0x118>
 8001e86:	4652      	mov	r2, sl
 8001e88:	08e3      	lsrs	r3, r4, #3
 8001e8a:	0752      	lsls	r2, r2, #29
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	4652      	mov	r2, sl
 8001e90:	46b4      	mov	ip, r6
 8001e92:	08d2      	lsrs	r2, r2, #3
 8001e94:	490f      	ldr	r1, [pc, #60]	; (8001ed4 <__aeabi_dsub+0x368>)
 8001e96:	458c      	cmp	ip, r1
 8001e98:	d02a      	beq.n	8001ef0 <__aeabi_dsub+0x384>
 8001e9a:	0312      	lsls	r2, r2, #12
 8001e9c:	0b14      	lsrs	r4, r2, #12
 8001e9e:	4662      	mov	r2, ip
 8001ea0:	0552      	lsls	r2, r2, #21
 8001ea2:	0d52      	lsrs	r2, r2, #21
 8001ea4:	e70c      	b.n	8001cc0 <__aeabi_dsub+0x154>
 8001ea6:	003c      	movs	r4, r7
 8001ea8:	4304      	orrs	r4, r0
 8001eaa:	1e62      	subs	r2, r4, #1
 8001eac:	4194      	sbcs	r4, r2
 8001eae:	18e4      	adds	r4, r4, r3
 8001eb0:	429c      	cmp	r4, r3
 8001eb2:	4192      	sbcs	r2, r2
 8001eb4:	4252      	negs	r2, r2
 8001eb6:	444a      	add	r2, r9
 8001eb8:	4692      	mov	sl, r2
 8001eba:	4653      	mov	r3, sl
 8001ebc:	021b      	lsls	r3, r3, #8
 8001ebe:	d5df      	bpl.n	8001e80 <__aeabi_dsub+0x314>
 8001ec0:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <__aeabi_dsub+0x368>)
 8001ec2:	3601      	adds	r6, #1
 8001ec4:	429e      	cmp	r6, r3
 8001ec6:	d000      	beq.n	8001eca <__aeabi_dsub+0x35e>
 8001ec8:	e0a0      	b.n	800200c <__aeabi_dsub+0x4a0>
 8001eca:	0032      	movs	r2, r6
 8001ecc:	2400      	movs	r4, #0
 8001ece:	2300      	movs	r3, #0
 8001ed0:	e6f6      	b.n	8001cc0 <__aeabi_dsub+0x154>
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	000007ff 	.word	0x000007ff
 8001ed8:	ff7fffff 	.word	0xff7fffff
 8001edc:	fffff801 	.word	0xfffff801
 8001ee0:	000007fe 	.word	0x000007fe
 8001ee4:	08db      	lsrs	r3, r3, #3
 8001ee6:	464a      	mov	r2, r9
 8001ee8:	0752      	lsls	r2, r2, #29
 8001eea:	4313      	orrs	r3, r2
 8001eec:	464a      	mov	r2, r9
 8001eee:	08d2      	lsrs	r2, r2, #3
 8001ef0:	0019      	movs	r1, r3
 8001ef2:	4311      	orrs	r1, r2
 8001ef4:	d100      	bne.n	8001ef8 <__aeabi_dsub+0x38c>
 8001ef6:	e1b5      	b.n	8002264 <__aeabi_dsub+0x6f8>
 8001ef8:	2480      	movs	r4, #128	; 0x80
 8001efa:	0324      	lsls	r4, r4, #12
 8001efc:	4314      	orrs	r4, r2
 8001efe:	0324      	lsls	r4, r4, #12
 8001f00:	4ad5      	ldr	r2, [pc, #852]	; (8002258 <__aeabi_dsub+0x6ec>)
 8001f02:	0b24      	lsrs	r4, r4, #12
 8001f04:	e6dc      	b.n	8001cc0 <__aeabi_dsub+0x154>
 8001f06:	0020      	movs	r0, r4
 8001f08:	f000 face 	bl	80024a8 <__clzsi2>
 8001f0c:	0003      	movs	r3, r0
 8001f0e:	3318      	adds	r3, #24
 8001f10:	2b1f      	cmp	r3, #31
 8001f12:	dc00      	bgt.n	8001f16 <__aeabi_dsub+0x3aa>
 8001f14:	e695      	b.n	8001c42 <__aeabi_dsub+0xd6>
 8001f16:	0022      	movs	r2, r4
 8001f18:	3808      	subs	r0, #8
 8001f1a:	4082      	lsls	r2, r0
 8001f1c:	2400      	movs	r4, #0
 8001f1e:	429e      	cmp	r6, r3
 8001f20:	dc00      	bgt.n	8001f24 <__aeabi_dsub+0x3b8>
 8001f22:	e69a      	b.n	8001c5a <__aeabi_dsub+0xee>
 8001f24:	1af6      	subs	r6, r6, r3
 8001f26:	4bcd      	ldr	r3, [pc, #820]	; (800225c <__aeabi_dsub+0x6f0>)
 8001f28:	401a      	ands	r2, r3
 8001f2a:	4692      	mov	sl, r2
 8001f2c:	e6a8      	b.n	8001c80 <__aeabi_dsub+0x114>
 8001f2e:	003c      	movs	r4, r7
 8001f30:	4304      	orrs	r4, r0
 8001f32:	1e62      	subs	r2, r4, #1
 8001f34:	4194      	sbcs	r4, r2
 8001f36:	e66c      	b.n	8001c12 <__aeabi_dsub+0xa6>
 8001f38:	464a      	mov	r2, r9
 8001f3a:	08db      	lsrs	r3, r3, #3
 8001f3c:	0752      	lsls	r2, r2, #29
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	464a      	mov	r2, r9
 8001f42:	08d2      	lsrs	r2, r2, #3
 8001f44:	e7a6      	b.n	8001e94 <__aeabi_dsub+0x328>
 8001f46:	4cc6      	ldr	r4, [pc, #792]	; (8002260 <__aeabi_dsub+0x6f4>)
 8001f48:	1c72      	adds	r2, r6, #1
 8001f4a:	4222      	tst	r2, r4
 8001f4c:	d000      	beq.n	8001f50 <__aeabi_dsub+0x3e4>
 8001f4e:	e0ac      	b.n	80020aa <__aeabi_dsub+0x53e>
 8001f50:	464a      	mov	r2, r9
 8001f52:	431a      	orrs	r2, r3
 8001f54:	2e00      	cmp	r6, #0
 8001f56:	d000      	beq.n	8001f5a <__aeabi_dsub+0x3ee>
 8001f58:	e105      	b.n	8002166 <__aeabi_dsub+0x5fa>
 8001f5a:	2a00      	cmp	r2, #0
 8001f5c:	d100      	bne.n	8001f60 <__aeabi_dsub+0x3f4>
 8001f5e:	e156      	b.n	800220e <__aeabi_dsub+0x6a2>
 8001f60:	003a      	movs	r2, r7
 8001f62:	4302      	orrs	r2, r0
 8001f64:	d100      	bne.n	8001f68 <__aeabi_dsub+0x3fc>
 8001f66:	e0db      	b.n	8002120 <__aeabi_dsub+0x5b4>
 8001f68:	181c      	adds	r4, r3, r0
 8001f6a:	429c      	cmp	r4, r3
 8001f6c:	419b      	sbcs	r3, r3
 8001f6e:	444f      	add	r7, r9
 8001f70:	46ba      	mov	sl, r7
 8001f72:	425b      	negs	r3, r3
 8001f74:	449a      	add	sl, r3
 8001f76:	4653      	mov	r3, sl
 8001f78:	021b      	lsls	r3, r3, #8
 8001f7a:	d400      	bmi.n	8001f7e <__aeabi_dsub+0x412>
 8001f7c:	e780      	b.n	8001e80 <__aeabi_dsub+0x314>
 8001f7e:	4652      	mov	r2, sl
 8001f80:	4bb6      	ldr	r3, [pc, #728]	; (800225c <__aeabi_dsub+0x6f0>)
 8001f82:	2601      	movs	r6, #1
 8001f84:	401a      	ands	r2, r3
 8001f86:	4692      	mov	sl, r2
 8001f88:	e77a      	b.n	8001e80 <__aeabi_dsub+0x314>
 8001f8a:	4cb3      	ldr	r4, [pc, #716]	; (8002258 <__aeabi_dsub+0x6ec>)
 8001f8c:	42a2      	cmp	r2, r4
 8001f8e:	d100      	bne.n	8001f92 <__aeabi_dsub+0x426>
 8001f90:	e0c0      	b.n	8002114 <__aeabi_dsub+0x5a8>
 8001f92:	2480      	movs	r4, #128	; 0x80
 8001f94:	464d      	mov	r5, r9
 8001f96:	0424      	lsls	r4, r4, #16
 8001f98:	4325      	orrs	r5, r4
 8001f9a:	46a9      	mov	r9, r5
 8001f9c:	4664      	mov	r4, ip
 8001f9e:	2c38      	cmp	r4, #56	; 0x38
 8001fa0:	dc53      	bgt.n	800204a <__aeabi_dsub+0x4de>
 8001fa2:	4661      	mov	r1, ip
 8001fa4:	2c1f      	cmp	r4, #31
 8001fa6:	dd00      	ble.n	8001faa <__aeabi_dsub+0x43e>
 8001fa8:	e0cd      	b.n	8002146 <__aeabi_dsub+0x5da>
 8001faa:	2520      	movs	r5, #32
 8001fac:	001e      	movs	r6, r3
 8001fae:	1b2d      	subs	r5, r5, r4
 8001fb0:	464c      	mov	r4, r9
 8001fb2:	40ab      	lsls	r3, r5
 8001fb4:	40ac      	lsls	r4, r5
 8001fb6:	40ce      	lsrs	r6, r1
 8001fb8:	1e5d      	subs	r5, r3, #1
 8001fba:	41ab      	sbcs	r3, r5
 8001fbc:	4334      	orrs	r4, r6
 8001fbe:	4323      	orrs	r3, r4
 8001fc0:	464c      	mov	r4, r9
 8001fc2:	40cc      	lsrs	r4, r1
 8001fc4:	1b3f      	subs	r7, r7, r4
 8001fc6:	e045      	b.n	8002054 <__aeabi_dsub+0x4e8>
 8001fc8:	464a      	mov	r2, r9
 8001fca:	1a1c      	subs	r4, r3, r0
 8001fcc:	1bd1      	subs	r1, r2, r7
 8001fce:	42a3      	cmp	r3, r4
 8001fd0:	4192      	sbcs	r2, r2
 8001fd2:	4252      	negs	r2, r2
 8001fd4:	4692      	mov	sl, r2
 8001fd6:	000a      	movs	r2, r1
 8001fd8:	4651      	mov	r1, sl
 8001fda:	1a52      	subs	r2, r2, r1
 8001fdc:	4692      	mov	sl, r2
 8001fde:	0212      	lsls	r2, r2, #8
 8001fe0:	d500      	bpl.n	8001fe4 <__aeabi_dsub+0x478>
 8001fe2:	e083      	b.n	80020ec <__aeabi_dsub+0x580>
 8001fe4:	4653      	mov	r3, sl
 8001fe6:	4323      	orrs	r3, r4
 8001fe8:	d000      	beq.n	8001fec <__aeabi_dsub+0x480>
 8001fea:	e621      	b.n	8001c30 <__aeabi_dsub+0xc4>
 8001fec:	2200      	movs	r2, #0
 8001fee:	2500      	movs	r5, #0
 8001ff0:	e753      	b.n	8001e9a <__aeabi_dsub+0x32e>
 8001ff2:	181c      	adds	r4, r3, r0
 8001ff4:	429c      	cmp	r4, r3
 8001ff6:	419b      	sbcs	r3, r3
 8001ff8:	444f      	add	r7, r9
 8001ffa:	46ba      	mov	sl, r7
 8001ffc:	425b      	negs	r3, r3
 8001ffe:	449a      	add	sl, r3
 8002000:	4653      	mov	r3, sl
 8002002:	2601      	movs	r6, #1
 8002004:	021b      	lsls	r3, r3, #8
 8002006:	d400      	bmi.n	800200a <__aeabi_dsub+0x49e>
 8002008:	e73a      	b.n	8001e80 <__aeabi_dsub+0x314>
 800200a:	2602      	movs	r6, #2
 800200c:	4652      	mov	r2, sl
 800200e:	4b93      	ldr	r3, [pc, #588]	; (800225c <__aeabi_dsub+0x6f0>)
 8002010:	2101      	movs	r1, #1
 8002012:	401a      	ands	r2, r3
 8002014:	0013      	movs	r3, r2
 8002016:	4021      	ands	r1, r4
 8002018:	0862      	lsrs	r2, r4, #1
 800201a:	430a      	orrs	r2, r1
 800201c:	07dc      	lsls	r4, r3, #31
 800201e:	085b      	lsrs	r3, r3, #1
 8002020:	469a      	mov	sl, r3
 8002022:	4314      	orrs	r4, r2
 8002024:	e62c      	b.n	8001c80 <__aeabi_dsub+0x114>
 8002026:	0039      	movs	r1, r7
 8002028:	3a20      	subs	r2, #32
 800202a:	40d1      	lsrs	r1, r2
 800202c:	4662      	mov	r2, ip
 800202e:	2a20      	cmp	r2, #32
 8002030:	d006      	beq.n	8002040 <__aeabi_dsub+0x4d4>
 8002032:	4664      	mov	r4, ip
 8002034:	2240      	movs	r2, #64	; 0x40
 8002036:	1b12      	subs	r2, r2, r4
 8002038:	003c      	movs	r4, r7
 800203a:	4094      	lsls	r4, r2
 800203c:	4304      	orrs	r4, r0
 800203e:	9401      	str	r4, [sp, #4]
 8002040:	9c01      	ldr	r4, [sp, #4]
 8002042:	1e62      	subs	r2, r4, #1
 8002044:	4194      	sbcs	r4, r2
 8002046:	430c      	orrs	r4, r1
 8002048:	e5e3      	b.n	8001c12 <__aeabi_dsub+0xa6>
 800204a:	4649      	mov	r1, r9
 800204c:	4319      	orrs	r1, r3
 800204e:	000b      	movs	r3, r1
 8002050:	1e5c      	subs	r4, r3, #1
 8002052:	41a3      	sbcs	r3, r4
 8002054:	1ac4      	subs	r4, r0, r3
 8002056:	42a0      	cmp	r0, r4
 8002058:	419b      	sbcs	r3, r3
 800205a:	425b      	negs	r3, r3
 800205c:	1afb      	subs	r3, r7, r3
 800205e:	469a      	mov	sl, r3
 8002060:	465d      	mov	r5, fp
 8002062:	0016      	movs	r6, r2
 8002064:	e5dc      	b.n	8001c20 <__aeabi_dsub+0xb4>
 8002066:	4649      	mov	r1, r9
 8002068:	4319      	orrs	r1, r3
 800206a:	d100      	bne.n	800206e <__aeabi_dsub+0x502>
 800206c:	e0ae      	b.n	80021cc <__aeabi_dsub+0x660>
 800206e:	4661      	mov	r1, ip
 8002070:	4664      	mov	r4, ip
 8002072:	3901      	subs	r1, #1
 8002074:	2c01      	cmp	r4, #1
 8002076:	d100      	bne.n	800207a <__aeabi_dsub+0x50e>
 8002078:	e0e0      	b.n	800223c <__aeabi_dsub+0x6d0>
 800207a:	4c77      	ldr	r4, [pc, #476]	; (8002258 <__aeabi_dsub+0x6ec>)
 800207c:	45a4      	cmp	ip, r4
 800207e:	d056      	beq.n	800212e <__aeabi_dsub+0x5c2>
 8002080:	468c      	mov	ip, r1
 8002082:	e69a      	b.n	8001dba <__aeabi_dsub+0x24e>
 8002084:	4661      	mov	r1, ip
 8002086:	2220      	movs	r2, #32
 8002088:	003c      	movs	r4, r7
 800208a:	1a52      	subs	r2, r2, r1
 800208c:	4094      	lsls	r4, r2
 800208e:	0001      	movs	r1, r0
 8002090:	4090      	lsls	r0, r2
 8002092:	46a0      	mov	r8, r4
 8002094:	4664      	mov	r4, ip
 8002096:	1e42      	subs	r2, r0, #1
 8002098:	4190      	sbcs	r0, r2
 800209a:	4662      	mov	r2, ip
 800209c:	40e1      	lsrs	r1, r4
 800209e:	4644      	mov	r4, r8
 80020a0:	40d7      	lsrs	r7, r2
 80020a2:	430c      	orrs	r4, r1
 80020a4:	4304      	orrs	r4, r0
 80020a6:	44b9      	add	r9, r7
 80020a8:	e701      	b.n	8001eae <__aeabi_dsub+0x342>
 80020aa:	496b      	ldr	r1, [pc, #428]	; (8002258 <__aeabi_dsub+0x6ec>)
 80020ac:	428a      	cmp	r2, r1
 80020ae:	d100      	bne.n	80020b2 <__aeabi_dsub+0x546>
 80020b0:	e70c      	b.n	8001ecc <__aeabi_dsub+0x360>
 80020b2:	1818      	adds	r0, r3, r0
 80020b4:	4298      	cmp	r0, r3
 80020b6:	419b      	sbcs	r3, r3
 80020b8:	444f      	add	r7, r9
 80020ba:	425b      	negs	r3, r3
 80020bc:	18fb      	adds	r3, r7, r3
 80020be:	07dc      	lsls	r4, r3, #31
 80020c0:	0840      	lsrs	r0, r0, #1
 80020c2:	085b      	lsrs	r3, r3, #1
 80020c4:	469a      	mov	sl, r3
 80020c6:	0016      	movs	r6, r2
 80020c8:	4304      	orrs	r4, r0
 80020ca:	e6d9      	b.n	8001e80 <__aeabi_dsub+0x314>
 80020cc:	2a00      	cmp	r2, #0
 80020ce:	d000      	beq.n	80020d2 <__aeabi_dsub+0x566>
 80020d0:	e081      	b.n	80021d6 <__aeabi_dsub+0x66a>
 80020d2:	003b      	movs	r3, r7
 80020d4:	4303      	orrs	r3, r0
 80020d6:	d11d      	bne.n	8002114 <__aeabi_dsub+0x5a8>
 80020d8:	2280      	movs	r2, #128	; 0x80
 80020da:	2500      	movs	r5, #0
 80020dc:	0312      	lsls	r2, r2, #12
 80020de:	e70b      	b.n	8001ef8 <__aeabi_dsub+0x38c>
 80020e0:	08c0      	lsrs	r0, r0, #3
 80020e2:	077b      	lsls	r3, r7, #29
 80020e4:	465d      	mov	r5, fp
 80020e6:	4303      	orrs	r3, r0
 80020e8:	08fa      	lsrs	r2, r7, #3
 80020ea:	e6d3      	b.n	8001e94 <__aeabi_dsub+0x328>
 80020ec:	1ac4      	subs	r4, r0, r3
 80020ee:	42a0      	cmp	r0, r4
 80020f0:	4180      	sbcs	r0, r0
 80020f2:	464b      	mov	r3, r9
 80020f4:	4240      	negs	r0, r0
 80020f6:	1aff      	subs	r7, r7, r3
 80020f8:	1a3b      	subs	r3, r7, r0
 80020fa:	469a      	mov	sl, r3
 80020fc:	465d      	mov	r5, fp
 80020fe:	e597      	b.n	8001c30 <__aeabi_dsub+0xc4>
 8002100:	1a1c      	subs	r4, r3, r0
 8002102:	464a      	mov	r2, r9
 8002104:	42a3      	cmp	r3, r4
 8002106:	419b      	sbcs	r3, r3
 8002108:	1bd7      	subs	r7, r2, r7
 800210a:	425b      	negs	r3, r3
 800210c:	1afb      	subs	r3, r7, r3
 800210e:	469a      	mov	sl, r3
 8002110:	2601      	movs	r6, #1
 8002112:	e585      	b.n	8001c20 <__aeabi_dsub+0xb4>
 8002114:	08c0      	lsrs	r0, r0, #3
 8002116:	077b      	lsls	r3, r7, #29
 8002118:	465d      	mov	r5, fp
 800211a:	4303      	orrs	r3, r0
 800211c:	08fa      	lsrs	r2, r7, #3
 800211e:	e6e7      	b.n	8001ef0 <__aeabi_dsub+0x384>
 8002120:	464a      	mov	r2, r9
 8002122:	08db      	lsrs	r3, r3, #3
 8002124:	0752      	lsls	r2, r2, #29
 8002126:	4313      	orrs	r3, r2
 8002128:	464a      	mov	r2, r9
 800212a:	08d2      	lsrs	r2, r2, #3
 800212c:	e6b5      	b.n	8001e9a <__aeabi_dsub+0x32e>
 800212e:	08c0      	lsrs	r0, r0, #3
 8002130:	077b      	lsls	r3, r7, #29
 8002132:	4303      	orrs	r3, r0
 8002134:	08fa      	lsrs	r2, r7, #3
 8002136:	e6db      	b.n	8001ef0 <__aeabi_dsub+0x384>
 8002138:	4649      	mov	r1, r9
 800213a:	4319      	orrs	r1, r3
 800213c:	000b      	movs	r3, r1
 800213e:	1e59      	subs	r1, r3, #1
 8002140:	418b      	sbcs	r3, r1
 8002142:	001c      	movs	r4, r3
 8002144:	e653      	b.n	8001dee <__aeabi_dsub+0x282>
 8002146:	464d      	mov	r5, r9
 8002148:	3c20      	subs	r4, #32
 800214a:	40e5      	lsrs	r5, r4
 800214c:	2920      	cmp	r1, #32
 800214e:	d005      	beq.n	800215c <__aeabi_dsub+0x5f0>
 8002150:	2440      	movs	r4, #64	; 0x40
 8002152:	1a64      	subs	r4, r4, r1
 8002154:	4649      	mov	r1, r9
 8002156:	40a1      	lsls	r1, r4
 8002158:	430b      	orrs	r3, r1
 800215a:	4698      	mov	r8, r3
 800215c:	4643      	mov	r3, r8
 800215e:	1e5c      	subs	r4, r3, #1
 8002160:	41a3      	sbcs	r3, r4
 8002162:	432b      	orrs	r3, r5
 8002164:	e776      	b.n	8002054 <__aeabi_dsub+0x4e8>
 8002166:	2a00      	cmp	r2, #0
 8002168:	d0e1      	beq.n	800212e <__aeabi_dsub+0x5c2>
 800216a:	003a      	movs	r2, r7
 800216c:	08db      	lsrs	r3, r3, #3
 800216e:	4302      	orrs	r2, r0
 8002170:	d100      	bne.n	8002174 <__aeabi_dsub+0x608>
 8002172:	e6b8      	b.n	8001ee6 <__aeabi_dsub+0x37a>
 8002174:	464a      	mov	r2, r9
 8002176:	0752      	lsls	r2, r2, #29
 8002178:	2480      	movs	r4, #128	; 0x80
 800217a:	4313      	orrs	r3, r2
 800217c:	464a      	mov	r2, r9
 800217e:	0324      	lsls	r4, r4, #12
 8002180:	08d2      	lsrs	r2, r2, #3
 8002182:	4222      	tst	r2, r4
 8002184:	d007      	beq.n	8002196 <__aeabi_dsub+0x62a>
 8002186:	08fe      	lsrs	r6, r7, #3
 8002188:	4226      	tst	r6, r4
 800218a:	d104      	bne.n	8002196 <__aeabi_dsub+0x62a>
 800218c:	465d      	mov	r5, fp
 800218e:	0032      	movs	r2, r6
 8002190:	08c3      	lsrs	r3, r0, #3
 8002192:	077f      	lsls	r7, r7, #29
 8002194:	433b      	orrs	r3, r7
 8002196:	0f59      	lsrs	r1, r3, #29
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	0749      	lsls	r1, r1, #29
 800219c:	08db      	lsrs	r3, r3, #3
 800219e:	430b      	orrs	r3, r1
 80021a0:	e6a6      	b.n	8001ef0 <__aeabi_dsub+0x384>
 80021a2:	1ac4      	subs	r4, r0, r3
 80021a4:	42a0      	cmp	r0, r4
 80021a6:	4180      	sbcs	r0, r0
 80021a8:	464b      	mov	r3, r9
 80021aa:	4240      	negs	r0, r0
 80021ac:	1aff      	subs	r7, r7, r3
 80021ae:	1a3b      	subs	r3, r7, r0
 80021b0:	469a      	mov	sl, r3
 80021b2:	465d      	mov	r5, fp
 80021b4:	2601      	movs	r6, #1
 80021b6:	e533      	b.n	8001c20 <__aeabi_dsub+0xb4>
 80021b8:	003b      	movs	r3, r7
 80021ba:	4303      	orrs	r3, r0
 80021bc:	d100      	bne.n	80021c0 <__aeabi_dsub+0x654>
 80021be:	e715      	b.n	8001fec <__aeabi_dsub+0x480>
 80021c0:	08c0      	lsrs	r0, r0, #3
 80021c2:	077b      	lsls	r3, r7, #29
 80021c4:	465d      	mov	r5, fp
 80021c6:	4303      	orrs	r3, r0
 80021c8:	08fa      	lsrs	r2, r7, #3
 80021ca:	e666      	b.n	8001e9a <__aeabi_dsub+0x32e>
 80021cc:	08c0      	lsrs	r0, r0, #3
 80021ce:	077b      	lsls	r3, r7, #29
 80021d0:	4303      	orrs	r3, r0
 80021d2:	08fa      	lsrs	r2, r7, #3
 80021d4:	e65e      	b.n	8001e94 <__aeabi_dsub+0x328>
 80021d6:	003a      	movs	r2, r7
 80021d8:	08db      	lsrs	r3, r3, #3
 80021da:	4302      	orrs	r2, r0
 80021dc:	d100      	bne.n	80021e0 <__aeabi_dsub+0x674>
 80021de:	e682      	b.n	8001ee6 <__aeabi_dsub+0x37a>
 80021e0:	464a      	mov	r2, r9
 80021e2:	0752      	lsls	r2, r2, #29
 80021e4:	2480      	movs	r4, #128	; 0x80
 80021e6:	4313      	orrs	r3, r2
 80021e8:	464a      	mov	r2, r9
 80021ea:	0324      	lsls	r4, r4, #12
 80021ec:	08d2      	lsrs	r2, r2, #3
 80021ee:	4222      	tst	r2, r4
 80021f0:	d007      	beq.n	8002202 <__aeabi_dsub+0x696>
 80021f2:	08fe      	lsrs	r6, r7, #3
 80021f4:	4226      	tst	r6, r4
 80021f6:	d104      	bne.n	8002202 <__aeabi_dsub+0x696>
 80021f8:	465d      	mov	r5, fp
 80021fa:	0032      	movs	r2, r6
 80021fc:	08c3      	lsrs	r3, r0, #3
 80021fe:	077f      	lsls	r7, r7, #29
 8002200:	433b      	orrs	r3, r7
 8002202:	0f59      	lsrs	r1, r3, #29
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	08db      	lsrs	r3, r3, #3
 8002208:	0749      	lsls	r1, r1, #29
 800220a:	430b      	orrs	r3, r1
 800220c:	e670      	b.n	8001ef0 <__aeabi_dsub+0x384>
 800220e:	08c0      	lsrs	r0, r0, #3
 8002210:	077b      	lsls	r3, r7, #29
 8002212:	4303      	orrs	r3, r0
 8002214:	08fa      	lsrs	r2, r7, #3
 8002216:	e640      	b.n	8001e9a <__aeabi_dsub+0x32e>
 8002218:	464c      	mov	r4, r9
 800221a:	3920      	subs	r1, #32
 800221c:	40cc      	lsrs	r4, r1
 800221e:	4661      	mov	r1, ip
 8002220:	2920      	cmp	r1, #32
 8002222:	d006      	beq.n	8002232 <__aeabi_dsub+0x6c6>
 8002224:	4666      	mov	r6, ip
 8002226:	2140      	movs	r1, #64	; 0x40
 8002228:	1b89      	subs	r1, r1, r6
 800222a:	464e      	mov	r6, r9
 800222c:	408e      	lsls	r6, r1
 800222e:	4333      	orrs	r3, r6
 8002230:	4698      	mov	r8, r3
 8002232:	4643      	mov	r3, r8
 8002234:	1e59      	subs	r1, r3, #1
 8002236:	418b      	sbcs	r3, r1
 8002238:	431c      	orrs	r4, r3
 800223a:	e5d8      	b.n	8001dee <__aeabi_dsub+0x282>
 800223c:	181c      	adds	r4, r3, r0
 800223e:	4284      	cmp	r4, r0
 8002240:	4180      	sbcs	r0, r0
 8002242:	444f      	add	r7, r9
 8002244:	46ba      	mov	sl, r7
 8002246:	4240      	negs	r0, r0
 8002248:	4482      	add	sl, r0
 800224a:	e6d9      	b.n	8002000 <__aeabi_dsub+0x494>
 800224c:	4653      	mov	r3, sl
 800224e:	4323      	orrs	r3, r4
 8002250:	d100      	bne.n	8002254 <__aeabi_dsub+0x6e8>
 8002252:	e6cb      	b.n	8001fec <__aeabi_dsub+0x480>
 8002254:	e614      	b.n	8001e80 <__aeabi_dsub+0x314>
 8002256:	46c0      	nop			; (mov r8, r8)
 8002258:	000007ff 	.word	0x000007ff
 800225c:	ff7fffff 	.word	0xff7fffff
 8002260:	000007fe 	.word	0x000007fe
 8002264:	2300      	movs	r3, #0
 8002266:	4a01      	ldr	r2, [pc, #4]	; (800226c <__aeabi_dsub+0x700>)
 8002268:	001c      	movs	r4, r3
 800226a:	e529      	b.n	8001cc0 <__aeabi_dsub+0x154>
 800226c:	000007ff 	.word	0x000007ff

08002270 <__aeabi_dcmpun>:
 8002270:	b570      	push	{r4, r5, r6, lr}
 8002272:	0005      	movs	r5, r0
 8002274:	480c      	ldr	r0, [pc, #48]	; (80022a8 <__aeabi_dcmpun+0x38>)
 8002276:	031c      	lsls	r4, r3, #12
 8002278:	0016      	movs	r6, r2
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	030a      	lsls	r2, r1, #12
 800227e:	0049      	lsls	r1, r1, #1
 8002280:	0b12      	lsrs	r2, r2, #12
 8002282:	0d49      	lsrs	r1, r1, #21
 8002284:	0b24      	lsrs	r4, r4, #12
 8002286:	0d5b      	lsrs	r3, r3, #21
 8002288:	4281      	cmp	r1, r0
 800228a:	d008      	beq.n	800229e <__aeabi_dcmpun+0x2e>
 800228c:	4a06      	ldr	r2, [pc, #24]	; (80022a8 <__aeabi_dcmpun+0x38>)
 800228e:	2000      	movs	r0, #0
 8002290:	4293      	cmp	r3, r2
 8002292:	d103      	bne.n	800229c <__aeabi_dcmpun+0x2c>
 8002294:	0020      	movs	r0, r4
 8002296:	4330      	orrs	r0, r6
 8002298:	1e43      	subs	r3, r0, #1
 800229a:	4198      	sbcs	r0, r3
 800229c:	bd70      	pop	{r4, r5, r6, pc}
 800229e:	2001      	movs	r0, #1
 80022a0:	432a      	orrs	r2, r5
 80022a2:	d1fb      	bne.n	800229c <__aeabi_dcmpun+0x2c>
 80022a4:	e7f2      	b.n	800228c <__aeabi_dcmpun+0x1c>
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	000007ff 	.word	0x000007ff

080022ac <__aeabi_i2d>:
 80022ac:	b570      	push	{r4, r5, r6, lr}
 80022ae:	2800      	cmp	r0, #0
 80022b0:	d016      	beq.n	80022e0 <__aeabi_i2d+0x34>
 80022b2:	17c3      	asrs	r3, r0, #31
 80022b4:	18c5      	adds	r5, r0, r3
 80022b6:	405d      	eors	r5, r3
 80022b8:	0fc4      	lsrs	r4, r0, #31
 80022ba:	0028      	movs	r0, r5
 80022bc:	f000 f8f4 	bl	80024a8 <__clzsi2>
 80022c0:	4b11      	ldr	r3, [pc, #68]	; (8002308 <__aeabi_i2d+0x5c>)
 80022c2:	1a1b      	subs	r3, r3, r0
 80022c4:	280a      	cmp	r0, #10
 80022c6:	dc16      	bgt.n	80022f6 <__aeabi_i2d+0x4a>
 80022c8:	0002      	movs	r2, r0
 80022ca:	002e      	movs	r6, r5
 80022cc:	3215      	adds	r2, #21
 80022ce:	4096      	lsls	r6, r2
 80022d0:	220b      	movs	r2, #11
 80022d2:	1a12      	subs	r2, r2, r0
 80022d4:	40d5      	lsrs	r5, r2
 80022d6:	055b      	lsls	r3, r3, #21
 80022d8:	032d      	lsls	r5, r5, #12
 80022da:	0b2d      	lsrs	r5, r5, #12
 80022dc:	0d5b      	lsrs	r3, r3, #21
 80022de:	e003      	b.n	80022e8 <__aeabi_i2d+0x3c>
 80022e0:	2400      	movs	r4, #0
 80022e2:	2300      	movs	r3, #0
 80022e4:	2500      	movs	r5, #0
 80022e6:	2600      	movs	r6, #0
 80022e8:	051b      	lsls	r3, r3, #20
 80022ea:	432b      	orrs	r3, r5
 80022ec:	07e4      	lsls	r4, r4, #31
 80022ee:	4323      	orrs	r3, r4
 80022f0:	0030      	movs	r0, r6
 80022f2:	0019      	movs	r1, r3
 80022f4:	bd70      	pop	{r4, r5, r6, pc}
 80022f6:	380b      	subs	r0, #11
 80022f8:	4085      	lsls	r5, r0
 80022fa:	055b      	lsls	r3, r3, #21
 80022fc:	032d      	lsls	r5, r5, #12
 80022fe:	2600      	movs	r6, #0
 8002300:	0b2d      	lsrs	r5, r5, #12
 8002302:	0d5b      	lsrs	r3, r3, #21
 8002304:	e7f0      	b.n	80022e8 <__aeabi_i2d+0x3c>
 8002306:	46c0      	nop			; (mov r8, r8)
 8002308:	0000041e 	.word	0x0000041e

0800230c <__aeabi_f2d>:
 800230c:	b570      	push	{r4, r5, r6, lr}
 800230e:	0242      	lsls	r2, r0, #9
 8002310:	0043      	lsls	r3, r0, #1
 8002312:	0fc4      	lsrs	r4, r0, #31
 8002314:	20fe      	movs	r0, #254	; 0xfe
 8002316:	0e1b      	lsrs	r3, r3, #24
 8002318:	1c59      	adds	r1, r3, #1
 800231a:	0a55      	lsrs	r5, r2, #9
 800231c:	4208      	tst	r0, r1
 800231e:	d00c      	beq.n	800233a <__aeabi_f2d+0x2e>
 8002320:	21e0      	movs	r1, #224	; 0xe0
 8002322:	0089      	lsls	r1, r1, #2
 8002324:	468c      	mov	ip, r1
 8002326:	076d      	lsls	r5, r5, #29
 8002328:	0b12      	lsrs	r2, r2, #12
 800232a:	4463      	add	r3, ip
 800232c:	051b      	lsls	r3, r3, #20
 800232e:	4313      	orrs	r3, r2
 8002330:	07e4      	lsls	r4, r4, #31
 8002332:	4323      	orrs	r3, r4
 8002334:	0028      	movs	r0, r5
 8002336:	0019      	movs	r1, r3
 8002338:	bd70      	pop	{r4, r5, r6, pc}
 800233a:	2b00      	cmp	r3, #0
 800233c:	d114      	bne.n	8002368 <__aeabi_f2d+0x5c>
 800233e:	2d00      	cmp	r5, #0
 8002340:	d01b      	beq.n	800237a <__aeabi_f2d+0x6e>
 8002342:	0028      	movs	r0, r5
 8002344:	f000 f8b0 	bl	80024a8 <__clzsi2>
 8002348:	280a      	cmp	r0, #10
 800234a:	dc1c      	bgt.n	8002386 <__aeabi_f2d+0x7a>
 800234c:	230b      	movs	r3, #11
 800234e:	002a      	movs	r2, r5
 8002350:	1a1b      	subs	r3, r3, r0
 8002352:	40da      	lsrs	r2, r3
 8002354:	0003      	movs	r3, r0
 8002356:	3315      	adds	r3, #21
 8002358:	409d      	lsls	r5, r3
 800235a:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <__aeabi_f2d+0x88>)
 800235c:	0312      	lsls	r2, r2, #12
 800235e:	1a1b      	subs	r3, r3, r0
 8002360:	055b      	lsls	r3, r3, #21
 8002362:	0b12      	lsrs	r2, r2, #12
 8002364:	0d5b      	lsrs	r3, r3, #21
 8002366:	e7e1      	b.n	800232c <__aeabi_f2d+0x20>
 8002368:	2d00      	cmp	r5, #0
 800236a:	d009      	beq.n	8002380 <__aeabi_f2d+0x74>
 800236c:	0b13      	lsrs	r3, r2, #12
 800236e:	2280      	movs	r2, #128	; 0x80
 8002370:	0312      	lsls	r2, r2, #12
 8002372:	431a      	orrs	r2, r3
 8002374:	076d      	lsls	r5, r5, #29
 8002376:	4b08      	ldr	r3, [pc, #32]	; (8002398 <__aeabi_f2d+0x8c>)
 8002378:	e7d8      	b.n	800232c <__aeabi_f2d+0x20>
 800237a:	2300      	movs	r3, #0
 800237c:	2200      	movs	r2, #0
 800237e:	e7d5      	b.n	800232c <__aeabi_f2d+0x20>
 8002380:	2200      	movs	r2, #0
 8002382:	4b05      	ldr	r3, [pc, #20]	; (8002398 <__aeabi_f2d+0x8c>)
 8002384:	e7d2      	b.n	800232c <__aeabi_f2d+0x20>
 8002386:	0003      	movs	r3, r0
 8002388:	002a      	movs	r2, r5
 800238a:	3b0b      	subs	r3, #11
 800238c:	409a      	lsls	r2, r3
 800238e:	2500      	movs	r5, #0
 8002390:	e7e3      	b.n	800235a <__aeabi_f2d+0x4e>
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	00000389 	.word	0x00000389
 8002398:	000007ff 	.word	0x000007ff

0800239c <__aeabi_d2f>:
 800239c:	0002      	movs	r2, r0
 800239e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023a0:	004b      	lsls	r3, r1, #1
 80023a2:	030d      	lsls	r5, r1, #12
 80023a4:	0f40      	lsrs	r0, r0, #29
 80023a6:	0d5b      	lsrs	r3, r3, #21
 80023a8:	0fcc      	lsrs	r4, r1, #31
 80023aa:	0a6d      	lsrs	r5, r5, #9
 80023ac:	493a      	ldr	r1, [pc, #232]	; (8002498 <__aeabi_d2f+0xfc>)
 80023ae:	4305      	orrs	r5, r0
 80023b0:	1c58      	adds	r0, r3, #1
 80023b2:	00d7      	lsls	r7, r2, #3
 80023b4:	4208      	tst	r0, r1
 80023b6:	d00a      	beq.n	80023ce <__aeabi_d2f+0x32>
 80023b8:	4938      	ldr	r1, [pc, #224]	; (800249c <__aeabi_d2f+0x100>)
 80023ba:	1859      	adds	r1, r3, r1
 80023bc:	29fe      	cmp	r1, #254	; 0xfe
 80023be:	dd16      	ble.n	80023ee <__aeabi_d2f+0x52>
 80023c0:	20ff      	movs	r0, #255	; 0xff
 80023c2:	2200      	movs	r2, #0
 80023c4:	05c0      	lsls	r0, r0, #23
 80023c6:	4310      	orrs	r0, r2
 80023c8:	07e4      	lsls	r4, r4, #31
 80023ca:	4320      	orrs	r0, r4
 80023cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d106      	bne.n	80023e0 <__aeabi_d2f+0x44>
 80023d2:	433d      	orrs	r5, r7
 80023d4:	d026      	beq.n	8002424 <__aeabi_d2f+0x88>
 80023d6:	2205      	movs	r2, #5
 80023d8:	0192      	lsls	r2, r2, #6
 80023da:	0a52      	lsrs	r2, r2, #9
 80023dc:	b2d8      	uxtb	r0, r3
 80023de:	e7f1      	b.n	80023c4 <__aeabi_d2f+0x28>
 80023e0:	432f      	orrs	r7, r5
 80023e2:	d0ed      	beq.n	80023c0 <__aeabi_d2f+0x24>
 80023e4:	2280      	movs	r2, #128	; 0x80
 80023e6:	03d2      	lsls	r2, r2, #15
 80023e8:	20ff      	movs	r0, #255	; 0xff
 80023ea:	432a      	orrs	r2, r5
 80023ec:	e7ea      	b.n	80023c4 <__aeabi_d2f+0x28>
 80023ee:	2900      	cmp	r1, #0
 80023f0:	dd1b      	ble.n	800242a <__aeabi_d2f+0x8e>
 80023f2:	0192      	lsls	r2, r2, #6
 80023f4:	1e50      	subs	r0, r2, #1
 80023f6:	4182      	sbcs	r2, r0
 80023f8:	00ed      	lsls	r5, r5, #3
 80023fa:	0f7f      	lsrs	r7, r7, #29
 80023fc:	432a      	orrs	r2, r5
 80023fe:	433a      	orrs	r2, r7
 8002400:	0753      	lsls	r3, r2, #29
 8002402:	d047      	beq.n	8002494 <__aeabi_d2f+0xf8>
 8002404:	230f      	movs	r3, #15
 8002406:	4013      	ands	r3, r2
 8002408:	2b04      	cmp	r3, #4
 800240a:	d000      	beq.n	800240e <__aeabi_d2f+0x72>
 800240c:	3204      	adds	r2, #4
 800240e:	2380      	movs	r3, #128	; 0x80
 8002410:	04db      	lsls	r3, r3, #19
 8002412:	4013      	ands	r3, r2
 8002414:	d03e      	beq.n	8002494 <__aeabi_d2f+0xf8>
 8002416:	1c48      	adds	r0, r1, #1
 8002418:	29fe      	cmp	r1, #254	; 0xfe
 800241a:	d0d1      	beq.n	80023c0 <__aeabi_d2f+0x24>
 800241c:	0192      	lsls	r2, r2, #6
 800241e:	0a52      	lsrs	r2, r2, #9
 8002420:	b2c0      	uxtb	r0, r0
 8002422:	e7cf      	b.n	80023c4 <__aeabi_d2f+0x28>
 8002424:	2000      	movs	r0, #0
 8002426:	2200      	movs	r2, #0
 8002428:	e7cc      	b.n	80023c4 <__aeabi_d2f+0x28>
 800242a:	000a      	movs	r2, r1
 800242c:	3217      	adds	r2, #23
 800242e:	db2f      	blt.n	8002490 <__aeabi_d2f+0xf4>
 8002430:	2680      	movs	r6, #128	; 0x80
 8002432:	0436      	lsls	r6, r6, #16
 8002434:	432e      	orrs	r6, r5
 8002436:	251e      	movs	r5, #30
 8002438:	1a6d      	subs	r5, r5, r1
 800243a:	2d1f      	cmp	r5, #31
 800243c:	dd11      	ble.n	8002462 <__aeabi_d2f+0xc6>
 800243e:	2202      	movs	r2, #2
 8002440:	4252      	negs	r2, r2
 8002442:	1a52      	subs	r2, r2, r1
 8002444:	0031      	movs	r1, r6
 8002446:	40d1      	lsrs	r1, r2
 8002448:	2d20      	cmp	r5, #32
 800244a:	d004      	beq.n	8002456 <__aeabi_d2f+0xba>
 800244c:	4a14      	ldr	r2, [pc, #80]	; (80024a0 <__aeabi_d2f+0x104>)
 800244e:	4694      	mov	ip, r2
 8002450:	4463      	add	r3, ip
 8002452:	409e      	lsls	r6, r3
 8002454:	4337      	orrs	r7, r6
 8002456:	003a      	movs	r2, r7
 8002458:	1e53      	subs	r3, r2, #1
 800245a:	419a      	sbcs	r2, r3
 800245c:	430a      	orrs	r2, r1
 800245e:	2100      	movs	r1, #0
 8002460:	e7ce      	b.n	8002400 <__aeabi_d2f+0x64>
 8002462:	4a10      	ldr	r2, [pc, #64]	; (80024a4 <__aeabi_d2f+0x108>)
 8002464:	0038      	movs	r0, r7
 8002466:	4694      	mov	ip, r2
 8002468:	4463      	add	r3, ip
 800246a:	4098      	lsls	r0, r3
 800246c:	003a      	movs	r2, r7
 800246e:	1e41      	subs	r1, r0, #1
 8002470:	4188      	sbcs	r0, r1
 8002472:	409e      	lsls	r6, r3
 8002474:	40ea      	lsrs	r2, r5
 8002476:	4330      	orrs	r0, r6
 8002478:	4302      	orrs	r2, r0
 800247a:	2100      	movs	r1, #0
 800247c:	0753      	lsls	r3, r2, #29
 800247e:	d1c1      	bne.n	8002404 <__aeabi_d2f+0x68>
 8002480:	2180      	movs	r1, #128	; 0x80
 8002482:	0013      	movs	r3, r2
 8002484:	04c9      	lsls	r1, r1, #19
 8002486:	2001      	movs	r0, #1
 8002488:	400b      	ands	r3, r1
 800248a:	420a      	tst	r2, r1
 800248c:	d1c6      	bne.n	800241c <__aeabi_d2f+0x80>
 800248e:	e7a3      	b.n	80023d8 <__aeabi_d2f+0x3c>
 8002490:	2300      	movs	r3, #0
 8002492:	e7a0      	b.n	80023d6 <__aeabi_d2f+0x3a>
 8002494:	000b      	movs	r3, r1
 8002496:	e79f      	b.n	80023d8 <__aeabi_d2f+0x3c>
 8002498:	000007fe 	.word	0x000007fe
 800249c:	fffffc80 	.word	0xfffffc80
 80024a0:	fffffca2 	.word	0xfffffca2
 80024a4:	fffffc82 	.word	0xfffffc82

080024a8 <__clzsi2>:
 80024a8:	211c      	movs	r1, #28
 80024aa:	2301      	movs	r3, #1
 80024ac:	041b      	lsls	r3, r3, #16
 80024ae:	4298      	cmp	r0, r3
 80024b0:	d301      	bcc.n	80024b6 <__clzsi2+0xe>
 80024b2:	0c00      	lsrs	r0, r0, #16
 80024b4:	3910      	subs	r1, #16
 80024b6:	0a1b      	lsrs	r3, r3, #8
 80024b8:	4298      	cmp	r0, r3
 80024ba:	d301      	bcc.n	80024c0 <__clzsi2+0x18>
 80024bc:	0a00      	lsrs	r0, r0, #8
 80024be:	3908      	subs	r1, #8
 80024c0:	091b      	lsrs	r3, r3, #4
 80024c2:	4298      	cmp	r0, r3
 80024c4:	d301      	bcc.n	80024ca <__clzsi2+0x22>
 80024c6:	0900      	lsrs	r0, r0, #4
 80024c8:	3904      	subs	r1, #4
 80024ca:	a202      	add	r2, pc, #8	; (adr r2, 80024d4 <__clzsi2+0x2c>)
 80024cc:	5c10      	ldrb	r0, [r2, r0]
 80024ce:	1840      	adds	r0, r0, r1
 80024d0:	4770      	bx	lr
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	02020304 	.word	0x02020304
 80024d8:	01010101 	.word	0x01010101
	...

080024e4 <MQ1_GetResistance>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* MQ-1 Sensör Direnci Hesaplama */
float MQ1_GetResistance(uint32_t raw_adc) {
 80024e4:	b5b0      	push	{r4, r5, r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
    if (raw_adc == 0) {
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <MQ1_GetResistance+0x12>
        return -1.0; // ADC sıfırsa hata döndür
 80024f2:	4b30      	ldr	r3, [pc, #192]	; (80025b4 <MQ1_GetResistance+0xd0>)
 80024f4:	e05a      	b.n	80025ac <MQ1_GetResistance+0xc8>
    }

    float voltage = (float)raw_adc / 4096.0 * 3.3; // ADC'yi voltaja çevir
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7fe f8d4 	bl	80006a4 <__aeabi_ui2f>
 80024fc:	1c03      	adds	r3, r0, #0
 80024fe:	1c18      	adds	r0, r3, #0
 8002500:	f7ff ff04 	bl	800230c <__aeabi_f2d>
 8002504:	2200      	movs	r2, #0
 8002506:	4b2c      	ldr	r3, [pc, #176]	; (80025b8 <MQ1_GetResistance+0xd4>)
 8002508:	f7fe fc74 	bl	8000df4 <__aeabi_ddiv>
 800250c:	0002      	movs	r2, r0
 800250e:	000b      	movs	r3, r1
 8002510:	0010      	movs	r0, r2
 8002512:	0019      	movs	r1, r3
 8002514:	4a29      	ldr	r2, [pc, #164]	; (80025bc <MQ1_GetResistance+0xd8>)
 8002516:	4b2a      	ldr	r3, [pc, #168]	; (80025c0 <MQ1_GetResistance+0xdc>)
 8002518:	f7ff f866 	bl	80015e8 <__aeabi_dmul>
 800251c:	0002      	movs	r2, r0
 800251e:	000b      	movs	r3, r1
 8002520:	0010      	movs	r0, r2
 8002522:	0019      	movs	r1, r3
 8002524:	f7ff ff3a 	bl	800239c <__aeabi_d2f>
 8002528:	1c03      	adds	r3, r0, #0
 800252a:	60fb      	str	r3, [r7, #12]
    if (voltage <= 0 || voltage >= 3.3) {
 800252c:	2100      	movs	r1, #0
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f7fd fed0 	bl	80002d4 <__aeabi_fcmple>
 8002534:	1e03      	subs	r3, r0, #0
 8002536:	d108      	bne.n	800254a <MQ1_GetResistance+0x66>
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f7ff fee7 	bl	800230c <__aeabi_f2d>
 800253e:	4a1f      	ldr	r2, [pc, #124]	; (80025bc <MQ1_GetResistance+0xd8>)
 8002540:	4b1f      	ldr	r3, [pc, #124]	; (80025c0 <MQ1_GetResistance+0xdc>)
 8002542:	f7fd fea1 	bl	8000288 <__aeabi_dcmpge>
 8002546:	1e03      	subs	r3, r0, #0
 8002548:	d001      	beq.n	800254e <MQ1_GetResistance+0x6a>
        return -1.0; // Geçersiz voltaj durumunda hata döndür
 800254a:	4b1a      	ldr	r3, [pc, #104]	; (80025b4 <MQ1_GetResistance+0xd0>)
 800254c:	e02e      	b.n	80025ac <MQ1_GetResistance+0xc8>
    }

    float resistance = RL_VALUE * (3.3 - voltage) / voltage;
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f7ff fedc 	bl	800230c <__aeabi_f2d>
 8002554:	0002      	movs	r2, r0
 8002556:	000b      	movs	r3, r1
 8002558:	4818      	ldr	r0, [pc, #96]	; (80025bc <MQ1_GetResistance+0xd8>)
 800255a:	4919      	ldr	r1, [pc, #100]	; (80025c0 <MQ1_GetResistance+0xdc>)
 800255c:	f7ff fb06 	bl	8001b6c <__aeabi_dsub>
 8002560:	0002      	movs	r2, r0
 8002562:	000b      	movs	r3, r1
 8002564:	0010      	movs	r0, r2
 8002566:	0019      	movs	r1, r3
 8002568:	2200      	movs	r2, #0
 800256a:	4b16      	ldr	r3, [pc, #88]	; (80025c4 <MQ1_GetResistance+0xe0>)
 800256c:	f7ff f83c 	bl	80015e8 <__aeabi_dmul>
 8002570:	0002      	movs	r2, r0
 8002572:	000b      	movs	r3, r1
 8002574:	0014      	movs	r4, r2
 8002576:	001d      	movs	r5, r3
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f7ff fec7 	bl	800230c <__aeabi_f2d>
 800257e:	0002      	movs	r2, r0
 8002580:	000b      	movs	r3, r1
 8002582:	0020      	movs	r0, r4
 8002584:	0029      	movs	r1, r5
 8002586:	f7fe fc35 	bl	8000df4 <__aeabi_ddiv>
 800258a:	0002      	movs	r2, r0
 800258c:	000b      	movs	r3, r1
 800258e:	0010      	movs	r0, r2
 8002590:	0019      	movs	r1, r3
 8002592:	f7ff ff03 	bl	800239c <__aeabi_d2f>
 8002596:	1c03      	adds	r3, r0, #0
 8002598:	60bb      	str	r3, [r7, #8]
    return resistance > 0 ? resistance : -1.0; // Negatifse hata döndür
 800259a:	2100      	movs	r1, #0
 800259c:	68b8      	ldr	r0, [r7, #8]
 800259e:	f7fd fea3 	bl	80002e8 <__aeabi_fcmpgt>
 80025a2:	1e03      	subs	r3, r0, #0
 80025a4:	d001      	beq.n	80025aa <MQ1_GetResistance+0xc6>
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	e000      	b.n	80025ac <MQ1_GetResistance+0xc8>
 80025aa:	4b02      	ldr	r3, [pc, #8]	; (80025b4 <MQ1_GetResistance+0xd0>)
}
 80025ac:	1c18      	adds	r0, r3, #0
 80025ae:	46bd      	mov	sp, r7
 80025b0:	b004      	add	sp, #16
 80025b2:	bdb0      	pop	{r4, r5, r7, pc}
 80025b4:	bf800000 	.word	0xbf800000
 80025b8:	40b00000 	.word	0x40b00000
 80025bc:	66666666 	.word	0x66666666
 80025c0:	400a6666 	.word	0x400a6666
 80025c4:	40140000 	.word	0x40140000

080025c8 <MQ1_CalculatePPM>:

/* PPM Hesaplama */
float MQ1_CalculatePPM(float *curve, float rs_ro_ratio) {
 80025c8:	b5b0      	push	{r4, r5, r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
    if (rs_ro_ratio <= 0) {
 80025d2:	2100      	movs	r1, #0
 80025d4:	6838      	ldr	r0, [r7, #0]
 80025d6:	f7fd fe7d 	bl	80002d4 <__aeabi_fcmple>
 80025da:	1e03      	subs	r3, r0, #0
 80025dc:	d001      	beq.n	80025e2 <MQ1_CalculatePPM+0x1a>
        return -1.0; // Hata durumunda NaN döndür
 80025de:	4b1c      	ldr	r3, [pc, #112]	; (8002650 <MQ1_CalculatePPM+0x88>)
 80025e0:	e032      	b.n	8002648 <MQ1_CalculatePPM+0x80>
    }

    return pow(10.0, ((log10(rs_ro_ratio) - curve[0]) / curve[1]));
 80025e2:	6838      	ldr	r0, [r7, #0]
 80025e4:	f7ff fe92 	bl	800230c <__aeabi_f2d>
 80025e8:	0002      	movs	r2, r0
 80025ea:	000b      	movs	r3, r1
 80025ec:	0010      	movs	r0, r2
 80025ee:	0019      	movs	r1, r3
 80025f0:	f001 fed8 	bl	80043a4 <log10>
 80025f4:	0004      	movs	r4, r0
 80025f6:	000d      	movs	r5, r1
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	1c18      	adds	r0, r3, #0
 80025fe:	f7ff fe85 	bl	800230c <__aeabi_f2d>
 8002602:	0002      	movs	r2, r0
 8002604:	000b      	movs	r3, r1
 8002606:	0020      	movs	r0, r4
 8002608:	0029      	movs	r1, r5
 800260a:	f7ff faaf 	bl	8001b6c <__aeabi_dsub>
 800260e:	0002      	movs	r2, r0
 8002610:	000b      	movs	r3, r1
 8002612:	0014      	movs	r4, r2
 8002614:	001d      	movs	r5, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	3304      	adds	r3, #4
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	1c18      	adds	r0, r3, #0
 800261e:	f7ff fe75 	bl	800230c <__aeabi_f2d>
 8002622:	0002      	movs	r2, r0
 8002624:	000b      	movs	r3, r1
 8002626:	0020      	movs	r0, r4
 8002628:	0029      	movs	r1, r5
 800262a:	f7fe fbe3 	bl	8000df4 <__aeabi_ddiv>
 800262e:	0002      	movs	r2, r0
 8002630:	000b      	movs	r3, r1
 8002632:	2000      	movs	r0, #0
 8002634:	4907      	ldr	r1, [pc, #28]	; (8002654 <MQ1_CalculatePPM+0x8c>)
 8002636:	f001 feeb 	bl	8004410 <pow>
 800263a:	0002      	movs	r2, r0
 800263c:	000b      	movs	r3, r1
 800263e:	0010      	movs	r0, r2
 8002640:	0019      	movs	r1, r3
 8002642:	f7ff feab 	bl	800239c <__aeabi_d2f>
 8002646:	1c03      	adds	r3, r0, #0
}
 8002648:	1c18      	adds	r0, r3, #0
 800264a:	46bd      	mov	sp, r7
 800264c:	b002      	add	sp, #8
 800264e:	bdb0      	pop	{r4, r5, r7, pc}
 8002650:	bf800000 	.word	0xbf800000
 8002654:	40240000 	.word	0x40240000

08002658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800265e:	f000 f9e9 	bl	8002a34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002662:	f000 f847 	bl	80026f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002666:	f000 f8f3 	bl	8002850 <MX_GPIO_Init>
  MX_ADC_Init();
 800266a:	f000 f895 	bl	8002798 <MX_ADC_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // ADC'den değer oku
	  HAL_ADC_Start(&hadc);
 800266e:	4b1d      	ldr	r3, [pc, #116]	; (80026e4 <main+0x8c>)
 8002670:	0018      	movs	r0, r3
 8002672:	f000 fba7 	bl	8002dc4 <HAL_ADC_Start>
	  if (HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY) == HAL_OK) {
 8002676:	2301      	movs	r3, #1
 8002678:	425a      	negs	r2, r3
 800267a:	4b1a      	ldr	r3, [pc, #104]	; (80026e4 <main+0x8c>)
 800267c:	0011      	movs	r1, r2
 800267e:	0018      	movs	r0, r3
 8002680:	f000 fc34 	bl	8002eec <HAL_ADC_PollForConversion>
 8002684:	1e03      	subs	r3, r0, #0
 8002686:	d105      	bne.n	8002694 <main+0x3c>
		  adc_value = HAL_ADC_GetValue(&hadc);
 8002688:	4b16      	ldr	r3, [pc, #88]	; (80026e4 <main+0x8c>)
 800268a:	0018      	movs	r0, r3
 800268c:	f000 fcc6 	bl	800301c <HAL_ADC_GetValue>
 8002690:	0003      	movs	r3, r0
 8002692:	60fb      	str	r3, [r7, #12]
	  }
	  HAL_ADC_Stop(&hadc);
 8002694:	4b13      	ldr	r3, [pc, #76]	; (80026e4 <main+0x8c>)
 8002696:	0018      	movs	r0, r3
 8002698:	f000 fbe8 	bl	8002e6c <HAL_ADC_Stop>

	  // Sensör direncini hesapla
	  rs = MQ1_GetResistance(adc_value);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	0018      	movs	r0, r3
 80026a0:	f7ff ff20 	bl	80024e4 <MQ1_GetResistance>
 80026a4:	1c03      	adds	r3, r0, #0
 80026a6:	60bb      	str	r3, [r7, #8]

	  if (rs > 0) {
 80026a8:	2100      	movs	r1, #0
 80026aa:	68b8      	ldr	r0, [r7, #8]
 80026ac:	f7fd fe1c 	bl	80002e8 <__aeabi_fcmpgt>
 80026b0:	1e03      	subs	r3, r0, #0
 80026b2:	d010      	beq.n	80026d6 <main+0x7e>
	              float rs_ro_ratio = rs / Ro; // Rs/Ro oranı
 80026b4:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <main+0x90>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	1c19      	adds	r1, r3, #0
 80026ba:	68b8      	ldr	r0, [r7, #8]
 80026bc:	f7fd fe28 	bl	8000310 <__aeabi_fdiv>
 80026c0:	1c03      	adds	r3, r0, #0
 80026c2:	607b      	str	r3, [r7, #4]
	              h2_ppm = MQ1_CalculatePPM(H2Curve, rs_ro_ratio);
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	4b09      	ldr	r3, [pc, #36]	; (80026ec <main+0x94>)
 80026c8:	1c11      	adds	r1, r2, #0
 80026ca:	0018      	movs	r0, r3
 80026cc:	f7ff ff7c 	bl	80025c8 <MQ1_CalculatePPM>
 80026d0:	1c02      	adds	r2, r0, #0
 80026d2:	4b07      	ldr	r3, [pc, #28]	; (80026f0 <main+0x98>)
 80026d4:	601a      	str	r2, [r3, #0]
	          }
	  HAL_Delay(1000);
 80026d6:	23fa      	movs	r3, #250	; 0xfa
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	0018      	movs	r0, r3
 80026dc:	f000 fa0e 	bl	8002afc <HAL_Delay>
	  HAL_ADC_Start(&hadc);
 80026e0:	e7c5      	b.n	800266e <main+0x16>
 80026e2:	46c0      	nop			; (mov r8, r8)
 80026e4:	2000009c 	.word	0x2000009c
 80026e8:	2000000c 	.word	0x2000000c
 80026ec:	20000000 	.word	0x20000000
 80026f0:	200000dc 	.word	0x200000dc

080026f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026f4:	b590      	push	{r4, r7, lr}
 80026f6:	b091      	sub	sp, #68	; 0x44
 80026f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026fa:	2410      	movs	r4, #16
 80026fc:	193b      	adds	r3, r7, r4
 80026fe:	0018      	movs	r0, r3
 8002700:	2330      	movs	r3, #48	; 0x30
 8002702:	001a      	movs	r2, r3
 8002704:	2100      	movs	r1, #0
 8002706:	f001 fe1b 	bl	8004340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800270a:	003b      	movs	r3, r7
 800270c:	0018      	movs	r0, r3
 800270e:	2310      	movs	r3, #16
 8002710:	001a      	movs	r2, r3
 8002712:	2100      	movs	r1, #0
 8002714:	f001 fe14 	bl	8004340 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8002718:	0021      	movs	r1, r4
 800271a:	187b      	adds	r3, r7, r1
 800271c:	2212      	movs	r2, #18
 800271e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002720:	187b      	adds	r3, r7, r1
 8002722:	2201      	movs	r2, #1
 8002724:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002726:	187b      	adds	r3, r7, r1
 8002728:	2201      	movs	r2, #1
 800272a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800272c:	187b      	adds	r3, r7, r1
 800272e:	2210      	movs	r2, #16
 8002730:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002732:	187b      	adds	r3, r7, r1
 8002734:	2210      	movs	r2, #16
 8002736:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002738:	187b      	adds	r3, r7, r1
 800273a:	2202      	movs	r2, #2
 800273c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800273e:	187b      	adds	r3, r7, r1
 8002740:	2280      	movs	r2, #128	; 0x80
 8002742:	0212      	lsls	r2, r2, #8
 8002744:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002746:	187b      	adds	r3, r7, r1
 8002748:	2280      	movs	r2, #128	; 0x80
 800274a:	0352      	lsls	r2, r2, #13
 800274c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800274e:	187b      	adds	r3, r7, r1
 8002750:	2200      	movs	r2, #0
 8002752:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002754:	187b      	adds	r3, r7, r1
 8002756:	0018      	movs	r0, r3
 8002758:	f001 f9ae 	bl	8003ab8 <HAL_RCC_OscConfig>
 800275c:	1e03      	subs	r3, r0, #0
 800275e:	d001      	beq.n	8002764 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8002760:	f000 f89c 	bl	800289c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002764:	003b      	movs	r3, r7
 8002766:	2207      	movs	r2, #7
 8002768:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800276a:	003b      	movs	r3, r7
 800276c:	2202      	movs	r2, #2
 800276e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002770:	003b      	movs	r3, r7
 8002772:	2200      	movs	r2, #0
 8002774:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002776:	003b      	movs	r3, r7
 8002778:	2200      	movs	r2, #0
 800277a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800277c:	003b      	movs	r3, r7
 800277e:	2101      	movs	r1, #1
 8002780:	0018      	movs	r0, r3
 8002782:	f001 fcb7 	bl	80040f4 <HAL_RCC_ClockConfig>
 8002786:	1e03      	subs	r3, r0, #0
 8002788:	d001      	beq.n	800278e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800278a:	f000 f887 	bl	800289c <Error_Handler>
  }
}
 800278e:	46c0      	nop			; (mov r8, r8)
 8002790:	46bd      	mov	sp, r7
 8002792:	b011      	add	sp, #68	; 0x44
 8002794:	bd90      	pop	{r4, r7, pc}
	...

08002798 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800279e:	1d3b      	adds	r3, r7, #4
 80027a0:	0018      	movs	r0, r3
 80027a2:	230c      	movs	r3, #12
 80027a4:	001a      	movs	r2, r3
 80027a6:	2100      	movs	r1, #0
 80027a8:	f001 fdca 	bl	8004340 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80027ac:	4b26      	ldr	r3, [pc, #152]	; (8002848 <MX_ADC_Init+0xb0>)
 80027ae:	4a27      	ldr	r2, [pc, #156]	; (800284c <MX_ADC_Init+0xb4>)
 80027b0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80027b2:	4b25      	ldr	r3, [pc, #148]	; (8002848 <MX_ADC_Init+0xb0>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80027b8:	4b23      	ldr	r3, [pc, #140]	; (8002848 <MX_ADC_Init+0xb0>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027be:	4b22      	ldr	r3, [pc, #136]	; (8002848 <MX_ADC_Init+0xb0>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80027c4:	4b20      	ldr	r3, [pc, #128]	; (8002848 <MX_ADC_Init+0xb0>)
 80027c6:	2201      	movs	r2, #1
 80027c8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80027ca:	4b1f      	ldr	r3, [pc, #124]	; (8002848 <MX_ADC_Init+0xb0>)
 80027cc:	2204      	movs	r2, #4
 80027ce:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80027d0:	4b1d      	ldr	r3, [pc, #116]	; (8002848 <MX_ADC_Init+0xb0>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80027d6:	4b1c      	ldr	r3, [pc, #112]	; (8002848 <MX_ADC_Init+0xb0>)
 80027d8:	2200      	movs	r2, #0
 80027da:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80027dc:	4b1a      	ldr	r3, [pc, #104]	; (8002848 <MX_ADC_Init+0xb0>)
 80027de:	2200      	movs	r2, #0
 80027e0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80027e2:	4b19      	ldr	r3, [pc, #100]	; (8002848 <MX_ADC_Init+0xb0>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027e8:	4b17      	ldr	r3, [pc, #92]	; (8002848 <MX_ADC_Init+0xb0>)
 80027ea:	22c2      	movs	r2, #194	; 0xc2
 80027ec:	32ff      	adds	r2, #255	; 0xff
 80027ee:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80027f0:	4b15      	ldr	r3, [pc, #84]	; (8002848 <MX_ADC_Init+0xb0>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80027f6:	4b14      	ldr	r3, [pc, #80]	; (8002848 <MX_ADC_Init+0xb0>)
 80027f8:	2224      	movs	r2, #36	; 0x24
 80027fa:	2100      	movs	r1, #0
 80027fc:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80027fe:	4b12      	ldr	r3, [pc, #72]	; (8002848 <MX_ADC_Init+0xb0>)
 8002800:	2201      	movs	r2, #1
 8002802:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002804:	4b10      	ldr	r3, [pc, #64]	; (8002848 <MX_ADC_Init+0xb0>)
 8002806:	0018      	movs	r0, r3
 8002808:	f000 f99c 	bl	8002b44 <HAL_ADC_Init>
 800280c:	1e03      	subs	r3, r0, #0
 800280e:	d001      	beq.n	8002814 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002810:	f000 f844 	bl	800289c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002814:	1d3b      	adds	r3, r7, #4
 8002816:	2201      	movs	r2, #1
 8002818:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800281a:	1d3b      	adds	r3, r7, #4
 800281c:	2280      	movs	r2, #128	; 0x80
 800281e:	0152      	lsls	r2, r2, #5
 8002820:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002822:	1d3b      	adds	r3, r7, #4
 8002824:	2280      	movs	r2, #128	; 0x80
 8002826:	0552      	lsls	r2, r2, #21
 8002828:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800282a:	1d3a      	adds	r2, r7, #4
 800282c:	4b06      	ldr	r3, [pc, #24]	; (8002848 <MX_ADC_Init+0xb0>)
 800282e:	0011      	movs	r1, r2
 8002830:	0018      	movs	r0, r3
 8002832:	f000 fcbb 	bl	80031ac <HAL_ADC_ConfigChannel>
 8002836:	1e03      	subs	r3, r0, #0
 8002838:	d001      	beq.n	800283e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800283a:	f000 f82f 	bl	800289c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	46bd      	mov	sp, r7
 8002842:	b004      	add	sp, #16
 8002844:	bd80      	pop	{r7, pc}
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	2000009c 	.word	0x2000009c
 800284c:	40012400 	.word	0x40012400

08002850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002856:	4b10      	ldr	r3, [pc, #64]	; (8002898 <MX_GPIO_Init+0x48>)
 8002858:	695a      	ldr	r2, [r3, #20]
 800285a:	4b0f      	ldr	r3, [pc, #60]	; (8002898 <MX_GPIO_Init+0x48>)
 800285c:	2180      	movs	r1, #128	; 0x80
 800285e:	03c9      	lsls	r1, r1, #15
 8002860:	430a      	orrs	r2, r1
 8002862:	615a      	str	r2, [r3, #20]
 8002864:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <MX_GPIO_Init+0x48>)
 8002866:	695a      	ldr	r2, [r3, #20]
 8002868:	2380      	movs	r3, #128	; 0x80
 800286a:	03db      	lsls	r3, r3, #15
 800286c:	4013      	ands	r3, r2
 800286e:	607b      	str	r3, [r7, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002872:	4b09      	ldr	r3, [pc, #36]	; (8002898 <MX_GPIO_Init+0x48>)
 8002874:	695a      	ldr	r2, [r3, #20]
 8002876:	4b08      	ldr	r3, [pc, #32]	; (8002898 <MX_GPIO_Init+0x48>)
 8002878:	2180      	movs	r1, #128	; 0x80
 800287a:	0289      	lsls	r1, r1, #10
 800287c:	430a      	orrs	r2, r1
 800287e:	615a      	str	r2, [r3, #20]
 8002880:	4b05      	ldr	r3, [pc, #20]	; (8002898 <MX_GPIO_Init+0x48>)
 8002882:	695a      	ldr	r2, [r3, #20]
 8002884:	2380      	movs	r3, #128	; 0x80
 8002886:	029b      	lsls	r3, r3, #10
 8002888:	4013      	ands	r3, r2
 800288a:	603b      	str	r3, [r7, #0]
 800288c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	46bd      	mov	sp, r7
 8002892:	b002      	add	sp, #8
 8002894:	bd80      	pop	{r7, pc}
 8002896:	46c0      	nop			; (mov r8, r8)
 8002898:	40021000 	.word	0x40021000

0800289c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028a0:	b672      	cpsid	i
}
 80028a2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028a4:	e7fe      	b.n	80028a4 <Error_Handler+0x8>
	...

080028a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ae:	4b0f      	ldr	r3, [pc, #60]	; (80028ec <HAL_MspInit+0x44>)
 80028b0:	699a      	ldr	r2, [r3, #24]
 80028b2:	4b0e      	ldr	r3, [pc, #56]	; (80028ec <HAL_MspInit+0x44>)
 80028b4:	2101      	movs	r1, #1
 80028b6:	430a      	orrs	r2, r1
 80028b8:	619a      	str	r2, [r3, #24]
 80028ba:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <HAL_MspInit+0x44>)
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	2201      	movs	r2, #1
 80028c0:	4013      	ands	r3, r2
 80028c2:	607b      	str	r3, [r7, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028c6:	4b09      	ldr	r3, [pc, #36]	; (80028ec <HAL_MspInit+0x44>)
 80028c8:	69da      	ldr	r2, [r3, #28]
 80028ca:	4b08      	ldr	r3, [pc, #32]	; (80028ec <HAL_MspInit+0x44>)
 80028cc:	2180      	movs	r1, #128	; 0x80
 80028ce:	0549      	lsls	r1, r1, #21
 80028d0:	430a      	orrs	r2, r1
 80028d2:	61da      	str	r2, [r3, #28]
 80028d4:	4b05      	ldr	r3, [pc, #20]	; (80028ec <HAL_MspInit+0x44>)
 80028d6:	69da      	ldr	r2, [r3, #28]
 80028d8:	2380      	movs	r3, #128	; 0x80
 80028da:	055b      	lsls	r3, r3, #21
 80028dc:	4013      	ands	r3, r2
 80028de:	603b      	str	r3, [r7, #0]
 80028e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028e2:	46c0      	nop			; (mov r8, r8)
 80028e4:	46bd      	mov	sp, r7
 80028e6:	b002      	add	sp, #8
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	46c0      	nop			; (mov r8, r8)
 80028ec:	40021000 	.word	0x40021000

080028f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028f0:	b590      	push	{r4, r7, lr}
 80028f2:	b08b      	sub	sp, #44	; 0x2c
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f8:	2414      	movs	r4, #20
 80028fa:	193b      	adds	r3, r7, r4
 80028fc:	0018      	movs	r0, r3
 80028fe:	2314      	movs	r3, #20
 8002900:	001a      	movs	r2, r3
 8002902:	2100      	movs	r1, #0
 8002904:	f001 fd1c 	bl	8004340 <memset>
  if(hadc->Instance==ADC1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a1d      	ldr	r2, [pc, #116]	; (8002984 <HAL_ADC_MspInit+0x94>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d133      	bne.n	800297a <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002912:	4b1d      	ldr	r3, [pc, #116]	; (8002988 <HAL_ADC_MspInit+0x98>)
 8002914:	699a      	ldr	r2, [r3, #24]
 8002916:	4b1c      	ldr	r3, [pc, #112]	; (8002988 <HAL_ADC_MspInit+0x98>)
 8002918:	2180      	movs	r1, #128	; 0x80
 800291a:	0089      	lsls	r1, r1, #2
 800291c:	430a      	orrs	r2, r1
 800291e:	619a      	str	r2, [r3, #24]
 8002920:	4b19      	ldr	r3, [pc, #100]	; (8002988 <HAL_ADC_MspInit+0x98>)
 8002922:	699a      	ldr	r2, [r3, #24]
 8002924:	2380      	movs	r3, #128	; 0x80
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4013      	ands	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
 800292c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800292e:	4b16      	ldr	r3, [pc, #88]	; (8002988 <HAL_ADC_MspInit+0x98>)
 8002930:	695a      	ldr	r2, [r3, #20]
 8002932:	4b15      	ldr	r3, [pc, #84]	; (8002988 <HAL_ADC_MspInit+0x98>)
 8002934:	2180      	movs	r1, #128	; 0x80
 8002936:	0289      	lsls	r1, r1, #10
 8002938:	430a      	orrs	r2, r1
 800293a:	615a      	str	r2, [r3, #20]
 800293c:	4b12      	ldr	r3, [pc, #72]	; (8002988 <HAL_ADC_MspInit+0x98>)
 800293e:	695a      	ldr	r2, [r3, #20]
 8002940:	2380      	movs	r3, #128	; 0x80
 8002942:	029b      	lsls	r3, r3, #10
 8002944:	4013      	ands	r3, r2
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800294a:	193b      	adds	r3, r7, r4
 800294c:	2202      	movs	r2, #2
 800294e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002950:	193b      	adds	r3, r7, r4
 8002952:	2203      	movs	r2, #3
 8002954:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002956:	193b      	adds	r3, r7, r4
 8002958:	2200      	movs	r2, #0
 800295a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800295c:	193a      	adds	r2, r7, r4
 800295e:	2390      	movs	r3, #144	; 0x90
 8002960:	05db      	lsls	r3, r3, #23
 8002962:	0011      	movs	r1, r2
 8002964:	0018      	movs	r0, r3
 8002966:	f000 ff37 	bl	80037d8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800296a:	2200      	movs	r2, #0
 800296c:	2100      	movs	r1, #0
 800296e:	200c      	movs	r0, #12
 8002970:	f000 ff00 	bl	8003774 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8002974:	200c      	movs	r0, #12
 8002976:	f000 ff12 	bl	800379e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800297a:	46c0      	nop			; (mov r8, r8)
 800297c:	46bd      	mov	sp, r7
 800297e:	b00b      	add	sp, #44	; 0x2c
 8002980:	bd90      	pop	{r4, r7, pc}
 8002982:	46c0      	nop			; (mov r8, r8)
 8002984:	40012400 	.word	0x40012400
 8002988:	40021000 	.word	0x40021000

0800298c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002990:	e7fe      	b.n	8002990 <NMI_Handler+0x4>

08002992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002996:	e7fe      	b.n	8002996 <HardFault_Handler+0x4>

08002998 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800299c:	46c0      	nop			; (mov r8, r8)
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029b0:	f000 f888 	bl	8002ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029b4:	46c0      	nop			; (mov r8, r8)
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80029c0:	4b03      	ldr	r3, [pc, #12]	; (80029d0 <ADC1_IRQHandler+0x14>)
 80029c2:	0018      	movs	r0, r3
 80029c4:	f000 fb36 	bl	8003034 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80029c8:	46c0      	nop			; (mov r8, r8)
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	46c0      	nop			; (mov r8, r8)
 80029d0:	2000009c 	.word	0x2000009c

080029d4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80029d8:	46c0      	nop			; (mov r8, r8)
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
	...

080029e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80029e0:	480d      	ldr	r0, [pc, #52]	; (8002a18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80029e2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80029e4:	f7ff fff6 	bl	80029d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029e8:	480c      	ldr	r0, [pc, #48]	; (8002a1c <LoopForever+0x6>)
  ldr r1, =_edata
 80029ea:	490d      	ldr	r1, [pc, #52]	; (8002a20 <LoopForever+0xa>)
  ldr r2, =_sidata
 80029ec:	4a0d      	ldr	r2, [pc, #52]	; (8002a24 <LoopForever+0xe>)
  movs r3, #0
 80029ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029f0:	e002      	b.n	80029f8 <LoopCopyDataInit>

080029f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029f6:	3304      	adds	r3, #4

080029f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029fc:	d3f9      	bcc.n	80029f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029fe:	4a0a      	ldr	r2, [pc, #40]	; (8002a28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a00:	4c0a      	ldr	r4, [pc, #40]	; (8002a2c <LoopForever+0x16>)
  movs r3, #0
 8002a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a04:	e001      	b.n	8002a0a <LoopFillZerobss>

08002a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a08:	3204      	adds	r2, #4

08002a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a0c:	d3fb      	bcc.n	8002a06 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002a0e:	f001 fca5 	bl	800435c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a12:	f7ff fe21 	bl	8002658 <main>

08002a16 <LoopForever>:

LoopForever:
    b LoopForever
 8002a16:	e7fe      	b.n	8002a16 <LoopForever>
  ldr   r0, =_estack
 8002a18:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a20:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002a24:	080057e0 	.word	0x080057e0
  ldr r2, =_sbss
 8002a28:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002a2c:	2000021c 	.word	0x2000021c

08002a30 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a30:	e7fe      	b.n	8002a30 <DMA1_Channel1_IRQHandler>
	...

08002a34 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a38:	4b07      	ldr	r3, [pc, #28]	; (8002a58 <HAL_Init+0x24>)
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <HAL_Init+0x24>)
 8002a3e:	2110      	movs	r1, #16
 8002a40:	430a      	orrs	r2, r1
 8002a42:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002a44:	2000      	movs	r0, #0
 8002a46:	f000 f809 	bl	8002a5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a4a:	f7ff ff2d 	bl	80028a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	0018      	movs	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	40022000 	.word	0x40022000

08002a5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a5c:	b590      	push	{r4, r7, lr}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a64:	4b14      	ldr	r3, [pc, #80]	; (8002ab8 <HAL_InitTick+0x5c>)
 8002a66:	681c      	ldr	r4, [r3, #0]
 8002a68:	4b14      	ldr	r3, [pc, #80]	; (8002abc <HAL_InitTick+0x60>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	0019      	movs	r1, r3
 8002a6e:	23fa      	movs	r3, #250	; 0xfa
 8002a70:	0098      	lsls	r0, r3, #2
 8002a72:	f7fd fb49 	bl	8000108 <__udivsi3>
 8002a76:	0003      	movs	r3, r0
 8002a78:	0019      	movs	r1, r3
 8002a7a:	0020      	movs	r0, r4
 8002a7c:	f7fd fb44 	bl	8000108 <__udivsi3>
 8002a80:	0003      	movs	r3, r0
 8002a82:	0018      	movs	r0, r3
 8002a84:	f000 fe9b 	bl	80037be <HAL_SYSTICK_Config>
 8002a88:	1e03      	subs	r3, r0, #0
 8002a8a:	d001      	beq.n	8002a90 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e00f      	b.n	8002ab0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b03      	cmp	r3, #3
 8002a94:	d80b      	bhi.n	8002aae <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	2301      	movs	r3, #1
 8002a9a:	425b      	negs	r3, r3
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f000 fe68 	bl	8003774 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002aa4:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <HAL_InitTick+0x64>)
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	e000      	b.n	8002ab0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
}
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	b003      	add	sp, #12
 8002ab6:	bd90      	pop	{r4, r7, pc}
 8002ab8:	20000010 	.word	0x20000010
 8002abc:	20000018 	.word	0x20000018
 8002ac0:	20000014 	.word	0x20000014

08002ac4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ac8:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <HAL_IncTick+0x1c>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	001a      	movs	r2, r3
 8002ace:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <HAL_IncTick+0x20>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	18d2      	adds	r2, r2, r3
 8002ad4:	4b03      	ldr	r3, [pc, #12]	; (8002ae4 <HAL_IncTick+0x20>)
 8002ad6:	601a      	str	r2, [r3, #0]
}
 8002ad8:	46c0      	nop			; (mov r8, r8)
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	20000018 	.word	0x20000018
 8002ae4:	200000e0 	.word	0x200000e0

08002ae8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  return uwTick;
 8002aec:	4b02      	ldr	r3, [pc, #8]	; (8002af8 <HAL_GetTick+0x10>)
 8002aee:	681b      	ldr	r3, [r3, #0]
}
 8002af0:	0018      	movs	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	200000e0 	.word	0x200000e0

08002afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b04:	f7ff fff0 	bl	8002ae8 <HAL_GetTick>
 8002b08:	0003      	movs	r3, r0
 8002b0a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	3301      	adds	r3, #1
 8002b14:	d005      	beq.n	8002b22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b16:	4b0a      	ldr	r3, [pc, #40]	; (8002b40 <HAL_Delay+0x44>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	001a      	movs	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	189b      	adds	r3, r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	f7ff ffe0 	bl	8002ae8 <HAL_GetTick>
 8002b28:	0002      	movs	r2, r0
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d8f7      	bhi.n	8002b24 <HAL_Delay+0x28>
  {
  }
}
 8002b34:	46c0      	nop			; (mov r8, r8)
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	b004      	add	sp, #16
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	20000018 	.word	0x20000018

08002b44 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b4c:	230f      	movs	r3, #15
 8002b4e:	18fb      	adds	r3, r7, r3
 8002b50:	2200      	movs	r2, #0
 8002b52:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e125      	b.n	8002dae <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10a      	bne.n	8002b80 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2234      	movs	r2, #52	; 0x34
 8002b74:	2100      	movs	r1, #0
 8002b76:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f7ff feb8 	bl	80028f0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b84:	2210      	movs	r2, #16
 8002b86:	4013      	ands	r3, r2
 8002b88:	d000      	beq.n	8002b8c <HAL_ADC_Init+0x48>
 8002b8a:	e103      	b.n	8002d94 <HAL_ADC_Init+0x250>
 8002b8c:	230f      	movs	r3, #15
 8002b8e:	18fb      	adds	r3, r7, r3
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d000      	beq.n	8002b98 <HAL_ADC_Init+0x54>
 8002b96:	e0fd      	b.n	8002d94 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	2204      	movs	r2, #4
 8002ba0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002ba2:	d000      	beq.n	8002ba6 <HAL_ADC_Init+0x62>
 8002ba4:	e0f6      	b.n	8002d94 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002baa:	4a83      	ldr	r2, [pc, #524]	; (8002db8 <HAL_ADC_Init+0x274>)
 8002bac:	4013      	ands	r3, r2
 8002bae:	2202      	movs	r2, #2
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d112      	bne.n	8002bea <HAL_ADC_Init+0xa6>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	4013      	ands	r3, r2
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d009      	beq.n	8002be6 <HAL_ADC_Init+0xa2>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68da      	ldr	r2, [r3, #12]
 8002bd8:	2380      	movs	r3, #128	; 0x80
 8002bda:	021b      	lsls	r3, r3, #8
 8002bdc:	401a      	ands	r2, r3
 8002bde:	2380      	movs	r3, #128	; 0x80
 8002be0:	021b      	lsls	r3, r3, #8
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d101      	bne.n	8002bea <HAL_ADC_Init+0xa6>
 8002be6:	2301      	movs	r3, #1
 8002be8:	e000      	b.n	8002bec <HAL_ADC_Init+0xa8>
 8002bea:	2300      	movs	r3, #0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d116      	bne.n	8002c1e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	2218      	movs	r2, #24
 8002bf8:	4393      	bics	r3, r2
 8002bfa:	0019      	movs	r1, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	0899      	lsrs	r1, r3, #2
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68da      	ldr	r2, [r3, #12]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4964      	ldr	r1, [pc, #400]	; (8002dbc <HAL_ADC_Init+0x278>)
 8002c2a:	400a      	ands	r2, r1
 8002c2c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	7e1b      	ldrb	r3, [r3, #24]
 8002c32:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	7e5b      	ldrb	r3, [r3, #25]
 8002c38:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c3a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	7e9b      	ldrb	r3, [r3, #26]
 8002c40:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002c42:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d002      	beq.n	8002c52 <HAL_ADC_Init+0x10e>
 8002c4c:	2380      	movs	r3, #128	; 0x80
 8002c4e:	015b      	lsls	r3, r3, #5
 8002c50:	e000      	b.n	8002c54 <HAL_ADC_Init+0x110>
 8002c52:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002c54:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002c5a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d101      	bne.n	8002c68 <HAL_ADC_Init+0x124>
 8002c64:	2304      	movs	r3, #4
 8002c66:	e000      	b.n	8002c6a <HAL_ADC_Init+0x126>
 8002c68:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002c6a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2124      	movs	r1, #36	; 0x24
 8002c70:	5c5b      	ldrb	r3, [r3, r1]
 8002c72:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002c74:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	7edb      	ldrb	r3, [r3, #27]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d115      	bne.n	8002cb0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	7e9b      	ldrb	r3, [r3, #26]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d105      	bne.n	8002c98 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	2280      	movs	r2, #128	; 0x80
 8002c90:	0252      	lsls	r2, r2, #9
 8002c92:	4313      	orrs	r3, r2
 8002c94:	60bb      	str	r3, [r7, #8]
 8002c96:	e00b      	b.n	8002cb0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca8:	2201      	movs	r2, #1
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	69da      	ldr	r2, [r3, #28]
 8002cb4:	23c2      	movs	r3, #194	; 0xc2
 8002cb6:	33ff      	adds	r3, #255	; 0xff
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d007      	beq.n	8002ccc <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68d9      	ldr	r1, [r3, #12]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce0:	2380      	movs	r3, #128	; 0x80
 8002ce2:	055b      	lsls	r3, r3, #21
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d01b      	beq.n	8002d20 <HAL_ADC_Init+0x1dc>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d017      	beq.n	8002d20 <HAL_ADC_Init+0x1dc>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d013      	beq.n	8002d20 <HAL_ADC_Init+0x1dc>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	d00f      	beq.n	8002d20 <HAL_ADC_Init+0x1dc>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	d00b      	beq.n	8002d20 <HAL_ADC_Init+0x1dc>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0c:	2b05      	cmp	r3, #5
 8002d0e:	d007      	beq.n	8002d20 <HAL_ADC_Init+0x1dc>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d14:	2b06      	cmp	r3, #6
 8002d16:	d003      	beq.n	8002d20 <HAL_ADC_Init+0x1dc>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1c:	2b07      	cmp	r3, #7
 8002d1e:	d112      	bne.n	8002d46 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695a      	ldr	r2, [r3, #20]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2107      	movs	r1, #7
 8002d2c:	438a      	bics	r2, r1
 8002d2e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6959      	ldr	r1, [r3, #20]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3a:	2207      	movs	r2, #7
 8002d3c:	401a      	ands	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	4a1c      	ldr	r2, [pc, #112]	; (8002dc0 <HAL_ADC_Init+0x27c>)
 8002d4e:	4013      	ands	r3, r2
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d10b      	bne.n	8002d6e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d60:	2203      	movs	r2, #3
 8002d62:	4393      	bics	r3, r2
 8002d64:	2201      	movs	r2, #1
 8002d66:	431a      	orrs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002d6c:	e01c      	b.n	8002da8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d72:	2212      	movs	r2, #18
 8002d74:	4393      	bics	r3, r2
 8002d76:	2210      	movs	r2, #16
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d82:	2201      	movs	r2, #1
 8002d84:	431a      	orrs	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002d8a:	230f      	movs	r3, #15
 8002d8c:	18fb      	adds	r3, r7, r3
 8002d8e:	2201      	movs	r2, #1
 8002d90:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002d92:	e009      	b.n	8002da8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d98:	2210      	movs	r2, #16
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002da0:	230f      	movs	r3, #15
 8002da2:	18fb      	adds	r3, r7, r3
 8002da4:	2201      	movs	r2, #1
 8002da6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002da8:	230f      	movs	r3, #15
 8002daa:	18fb      	adds	r3, r7, r3
 8002dac:	781b      	ldrb	r3, [r3, #0]
}
 8002dae:	0018      	movs	r0, r3
 8002db0:	46bd      	mov	sp, r7
 8002db2:	b004      	add	sp, #16
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	fffffefd 	.word	0xfffffefd
 8002dbc:	fffe0219 	.word	0xfffe0219
 8002dc0:	833fffe7 	.word	0x833fffe7

08002dc4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002dc4:	b590      	push	{r4, r7, lr}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dcc:	230f      	movs	r3, #15
 8002dce:	18fb      	adds	r3, r7, r3
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	2204      	movs	r2, #4
 8002ddc:	4013      	ands	r3, r2
 8002dde:	d138      	bne.n	8002e52 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2234      	movs	r2, #52	; 0x34
 8002de4:	5c9b      	ldrb	r3, [r3, r2]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d101      	bne.n	8002dee <HAL_ADC_Start+0x2a>
 8002dea:	2302      	movs	r3, #2
 8002dec:	e038      	b.n	8002e60 <HAL_ADC_Start+0x9c>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2234      	movs	r2, #52	; 0x34
 8002df2:	2101      	movs	r1, #1
 8002df4:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	7e5b      	ldrb	r3, [r3, #25]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d007      	beq.n	8002e0e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002dfe:	230f      	movs	r3, #15
 8002e00:	18fc      	adds	r4, r7, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	0018      	movs	r0, r3
 8002e06:	f000 fac7 	bl	8003398 <ADC_Enable>
 8002e0a:	0003      	movs	r3, r0
 8002e0c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002e0e:	230f      	movs	r3, #15
 8002e10:	18fb      	adds	r3, r7, r3
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d120      	bne.n	8002e5a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1c:	4a12      	ldr	r2, [pc, #72]	; (8002e68 <HAL_ADC_Start+0xa4>)
 8002e1e:	4013      	ands	r3, r2
 8002e20:	2280      	movs	r2, #128	; 0x80
 8002e22:	0052      	lsls	r2, r2, #1
 8002e24:	431a      	orrs	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2234      	movs	r2, #52	; 0x34
 8002e34:	2100      	movs	r1, #0
 8002e36:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	221c      	movs	r2, #28
 8002e3e:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689a      	ldr	r2, [r3, #8]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2104      	movs	r1, #4
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	609a      	str	r2, [r3, #8]
 8002e50:	e003      	b.n	8002e5a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002e52:	230f      	movs	r3, #15
 8002e54:	18fb      	adds	r3, r7, r3
 8002e56:	2202      	movs	r2, #2
 8002e58:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e5a:	230f      	movs	r3, #15
 8002e5c:	18fb      	adds	r3, r7, r3
 8002e5e:	781b      	ldrb	r3, [r3, #0]
}
 8002e60:	0018      	movs	r0, r3
 8002e62:	46bd      	mov	sp, r7
 8002e64:	b005      	add	sp, #20
 8002e66:	bd90      	pop	{r4, r7, pc}
 8002e68:	fffff0fe 	.word	0xfffff0fe

08002e6c <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 8002e6c:	b5b0      	push	{r4, r5, r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e74:	230f      	movs	r3, #15
 8002e76:	18fb      	adds	r3, r7, r3
 8002e78:	2200      	movs	r2, #0
 8002e7a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2234      	movs	r2, #52	; 0x34
 8002e80:	5c9b      	ldrb	r3, [r3, r2]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d101      	bne.n	8002e8a <HAL_ADC_Stop+0x1e>
 8002e86:	2302      	movs	r3, #2
 8002e88:	e029      	b.n	8002ede <HAL_ADC_Stop+0x72>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2234      	movs	r2, #52	; 0x34
 8002e8e:	2101      	movs	r1, #1
 8002e90:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002e92:	250f      	movs	r5, #15
 8002e94:	197c      	adds	r4, r7, r5
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f000 fb72 	bl	8003582 <ADC_ConversionStop>
 8002e9e:	0003      	movs	r3, r0
 8002ea0:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002ea2:	197b      	adds	r3, r7, r5
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d112      	bne.n	8002ed0 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002eaa:	197c      	adds	r4, r7, r5
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	0018      	movs	r0, r3
 8002eb0:	f000 faf6 	bl	80034a0 <ADC_Disable>
 8002eb4:	0003      	movs	r3, r0
 8002eb6:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002eb8:	197b      	adds	r3, r7, r5
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d107      	bne.n	8002ed0 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec4:	4a08      	ldr	r2, [pc, #32]	; (8002ee8 <HAL_ADC_Stop+0x7c>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	2201      	movs	r2, #1
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2234      	movs	r2, #52	; 0x34
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002ed8:	230f      	movs	r3, #15
 8002eda:	18fb      	adds	r3, r7, r3
 8002edc:	781b      	ldrb	r3, [r3, #0]
}
 8002ede:	0018      	movs	r0, r3
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	b004      	add	sp, #16
 8002ee4:	bdb0      	pop	{r4, r5, r7, pc}
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	fffffefe 	.word	0xfffffefe

08002eec <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	2b08      	cmp	r3, #8
 8002efc:	d102      	bne.n	8002f04 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002efe:	2308      	movs	r3, #8
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	e014      	b.n	8002f2e <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d10b      	bne.n	8002f2a <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f16:	2220      	movs	r2, #32
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2234      	movs	r2, #52	; 0x34
 8002f22:	2100      	movs	r1, #0
 8002f24:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e071      	b.n	800300e <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002f2a:	230c      	movs	r3, #12
 8002f2c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002f2e:	f7ff fddb 	bl	8002ae8 <HAL_GetTick>
 8002f32:	0003      	movs	r3, r0
 8002f34:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002f36:	e01f      	b.n	8002f78 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	d01c      	beq.n	8002f78 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d007      	beq.n	8002f54 <HAL_ADC_PollForConversion+0x68>
 8002f44:	f7ff fdd0 	bl	8002ae8 <HAL_GetTick>
 8002f48:	0002      	movs	r2, r0
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d211      	bcs.n	8002f78 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	d10b      	bne.n	8002f78 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f64:	2204      	movs	r2, #4
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2234      	movs	r2, #52	; 0x34
 8002f70:	2100      	movs	r1, #0
 8002f72:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e04a      	b.n	800300e <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	4013      	ands	r3, r2
 8002f82:	d0d9      	beq.n	8002f38 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f88:	2280      	movs	r2, #128	; 0x80
 8002f8a:	0092      	lsls	r2, r2, #2
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68da      	ldr	r2, [r3, #12]
 8002f98:	23c0      	movs	r3, #192	; 0xc0
 8002f9a:	011b      	lsls	r3, r3, #4
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	d12d      	bne.n	8002ffc <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d129      	bne.n	8002ffc <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2208      	movs	r2, #8
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	2b08      	cmp	r3, #8
 8002fb4:	d122      	bne.n	8002ffc <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	2204      	movs	r2, #4
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	d110      	bne.n	8002fe4 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	210c      	movs	r1, #12
 8002fce:	438a      	bics	r2, r1
 8002fd0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd6:	4a10      	ldr	r2, [pc, #64]	; (8003018 <HAL_ADC_PollForConversion+0x12c>)
 8002fd8:	4013      	ands	r3, r2
 8002fda:	2201      	movs	r2, #1
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	639a      	str	r2, [r3, #56]	; 0x38
 8002fe2:	e00b      	b.n	8002ffc <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe8:	2220      	movs	r2, #32
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	7e1b      	ldrb	r3, [r3, #24]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d103      	bne.n	800300c <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	220c      	movs	r2, #12
 800300a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	0018      	movs	r0, r3
 8003010:	46bd      	mov	sp, r7
 8003012:	b004      	add	sp, #16
 8003014:	bd80      	pop	{r7, pc}
 8003016:	46c0      	nop			; (mov r8, r8)
 8003018:	fffffefe 	.word	0xfffffefe

0800301c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800302a:	0018      	movs	r0, r3
 800302c:	46bd      	mov	sp, r7
 800302e:	b002      	add	sp, #8
 8003030:	bd80      	pop	{r7, pc}
	...

08003034 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2204      	movs	r2, #4
 8003050:	4013      	ands	r3, r2
 8003052:	d003      	beq.n	800305c <HAL_ADC_IRQHandler+0x28>
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2204      	movs	r2, #4
 8003058:	4013      	ands	r3, r2
 800305a:	d107      	bne.n	800306c <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2208      	movs	r2, #8
 8003060:	4013      	ands	r3, r2
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003062:	d049      	beq.n	80030f8 <HAL_ADC_IRQHandler+0xc4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	2208      	movs	r2, #8
 8003068:	4013      	ands	r3, r2
 800306a:	d045      	beq.n	80030f8 <HAL_ADC_IRQHandler+0xc4>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003070:	2210      	movs	r2, #16
 8003072:	4013      	ands	r3, r2
 8003074:	d106      	bne.n	8003084 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307a:	2280      	movs	r2, #128	; 0x80
 800307c:	0092      	lsls	r2, r2, #2
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68da      	ldr	r2, [r3, #12]
 800308a:	23c0      	movs	r3, #192	; 0xc0
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	4013      	ands	r3, r2
 8003090:	d12a      	bne.n	80030e8 <HAL_ADC_IRQHandler+0xb4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003096:	2b00      	cmp	r3, #0
 8003098:	d126      	bne.n	80030e8 <HAL_ADC_IRQHandler+0xb4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2208      	movs	r2, #8
 800309e:	4013      	ands	r3, r2
 80030a0:	d022      	beq.n	80030e8 <HAL_ADC_IRQHandler+0xb4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2204      	movs	r2, #4
 80030aa:	4013      	ands	r3, r2
 80030ac:	d110      	bne.n	80030d0 <HAL_ADC_IRQHandler+0x9c>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	210c      	movs	r1, #12
 80030ba:	438a      	bics	r2, r1
 80030bc:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c2:	4a2d      	ldr	r2, [pc, #180]	; (8003178 <HAL_ADC_IRQHandler+0x144>)
 80030c4:	4013      	ands	r3, r2
 80030c6:	2201      	movs	r2, #1
 80030c8:	431a      	orrs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	639a      	str	r2, [r3, #56]	; 0x38
 80030ce:	e00b      	b.n	80030e8 <HAL_ADC_IRQHandler+0xb4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d4:	2220      	movs	r2, #32
 80030d6:	431a      	orrs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e0:	2201      	movs	r2, #1
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	0018      	movs	r0, r3
 80030ec:	f000 f846 	bl	800317c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	220c      	movs	r2, #12
 80030f6:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2280      	movs	r2, #128	; 0x80
 80030fc:	4013      	ands	r3, r2
 80030fe:	d012      	beq.n	8003126 <HAL_ADC_IRQHandler+0xf2>
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	2280      	movs	r2, #128	; 0x80
 8003104:	4013      	ands	r3, r2
 8003106:	d00e      	beq.n	8003126 <HAL_ADC_IRQHandler+0xf2>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310c:	2280      	movs	r2, #128	; 0x80
 800310e:	0252      	lsls	r2, r2, #9
 8003110:	431a      	orrs	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	0018      	movs	r0, r3
 800311a:	f000 f837 	bl	800318c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2280      	movs	r2, #128	; 0x80
 8003124:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2210      	movs	r2, #16
 800312a:	4013      	ands	r3, r2
 800312c:	d020      	beq.n	8003170 <HAL_ADC_IRQHandler+0x13c>
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2210      	movs	r2, #16
 8003132:	4013      	ands	r3, r2
 8003134:	d01c      	beq.n	8003170 <HAL_ADC_IRQHandler+0x13c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313a:	2b01      	cmp	r3, #1
 800313c:	d006      	beq.n	800314c <HAL_ADC_IRQHandler+0x118>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	2201      	movs	r2, #1
 8003146:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8003148:	2b01      	cmp	r3, #1
 800314a:	d10d      	bne.n	8003168 <HAL_ADC_IRQHandler+0x134>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003150:	2202      	movs	r2, #2
 8003152:	431a      	orrs	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2210      	movs	r2, #16
 800315e:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	0018      	movs	r0, r3
 8003164:	f000 f81a 	bl	800319c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2210      	movs	r2, #16
 800316e:	601a      	str	r2, [r3, #0]
  }

}
 8003170:	46c0      	nop			; (mov r8, r8)
 8003172:	46bd      	mov	sp, r7
 8003174:	b004      	add	sp, #16
 8003176:	bd80      	pop	{r7, pc}
 8003178:	fffffefe 	.word	0xfffffefe

0800317c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003184:	46c0      	nop			; (mov r8, r8)
 8003186:	46bd      	mov	sp, r7
 8003188:	b002      	add	sp, #8
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8003194:	46c0      	nop			; (mov r8, r8)
 8003196:	46bd      	mov	sp, r7
 8003198:	b002      	add	sp, #8
 800319a:	bd80      	pop	{r7, pc}

0800319c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80031a4:	46c0      	nop			; (mov r8, r8)
 80031a6:	46bd      	mov	sp, r7
 80031a8:	b002      	add	sp, #8
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031b6:	230f      	movs	r3, #15
 80031b8:	18fb      	adds	r3, r7, r3
 80031ba:	2200      	movs	r2, #0
 80031bc:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80031be:	2300      	movs	r3, #0
 80031c0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c6:	2380      	movs	r3, #128	; 0x80
 80031c8:	055b      	lsls	r3, r3, #21
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d011      	beq.n	80031f2 <HAL_ADC_ConfigChannel+0x46>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d00d      	beq.n	80031f2 <HAL_ADC_ConfigChannel+0x46>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d009      	beq.n	80031f2 <HAL_ADC_ConfigChannel+0x46>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e2:	2b03      	cmp	r3, #3
 80031e4:	d005      	beq.n	80031f2 <HAL_ADC_ConfigChannel+0x46>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d001      	beq.n	80031f2 <HAL_ADC_ConfigChannel+0x46>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2234      	movs	r2, #52	; 0x34
 80031f6:	5c9b      	ldrb	r3, [r3, r2]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <HAL_ADC_ConfigChannel+0x54>
 80031fc:	2302      	movs	r3, #2
 80031fe:	e0bb      	b.n	8003378 <HAL_ADC_ConfigChannel+0x1cc>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2234      	movs	r2, #52	; 0x34
 8003204:	2101      	movs	r1, #1
 8003206:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	2204      	movs	r2, #4
 8003210:	4013      	ands	r3, r2
 8003212:	d000      	beq.n	8003216 <HAL_ADC_ConfigChannel+0x6a>
 8003214:	e09f      	b.n	8003356 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	4a59      	ldr	r2, [pc, #356]	; (8003380 <HAL_ADC_ConfigChannel+0x1d4>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d100      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x76>
 8003220:	e077      	b.n	8003312 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2201      	movs	r2, #1
 800322e:	409a      	lsls	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800323c:	2380      	movs	r3, #128	; 0x80
 800323e:	055b      	lsls	r3, r3, #21
 8003240:	429a      	cmp	r2, r3
 8003242:	d037      	beq.n	80032b4 <HAL_ADC_ConfigChannel+0x108>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003248:	2b01      	cmp	r3, #1
 800324a:	d033      	beq.n	80032b4 <HAL_ADC_ConfigChannel+0x108>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003250:	2b02      	cmp	r3, #2
 8003252:	d02f      	beq.n	80032b4 <HAL_ADC_ConfigChannel+0x108>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003258:	2b03      	cmp	r3, #3
 800325a:	d02b      	beq.n	80032b4 <HAL_ADC_ConfigChannel+0x108>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003260:	2b04      	cmp	r3, #4
 8003262:	d027      	beq.n	80032b4 <HAL_ADC_ConfigChannel+0x108>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003268:	2b05      	cmp	r3, #5
 800326a:	d023      	beq.n	80032b4 <HAL_ADC_ConfigChannel+0x108>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003270:	2b06      	cmp	r3, #6
 8003272:	d01f      	beq.n	80032b4 <HAL_ADC_ConfigChannel+0x108>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003278:	2b07      	cmp	r3, #7
 800327a:	d01b      	beq.n	80032b4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	2107      	movs	r1, #7
 8003288:	400b      	ands	r3, r1
 800328a:	429a      	cmp	r2, r3
 800328c:	d012      	beq.n	80032b4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	695a      	ldr	r2, [r3, #20]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2107      	movs	r1, #7
 800329a:	438a      	bics	r2, r1
 800329c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6959      	ldr	r1, [r3, #20]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	2207      	movs	r2, #7
 80032aa:	401a      	ands	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2b10      	cmp	r3, #16
 80032ba:	d003      	beq.n	80032c4 <HAL_ADC_ConfigChannel+0x118>
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2b11      	cmp	r3, #17
 80032c2:	d152      	bne.n	800336a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80032c4:	4b2f      	ldr	r3, [pc, #188]	; (8003384 <HAL_ADC_ConfigChannel+0x1d8>)
 80032c6:	6819      	ldr	r1, [r3, #0]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b10      	cmp	r3, #16
 80032ce:	d102      	bne.n	80032d6 <HAL_ADC_ConfigChannel+0x12a>
 80032d0:	2380      	movs	r3, #128	; 0x80
 80032d2:	041b      	lsls	r3, r3, #16
 80032d4:	e001      	b.n	80032da <HAL_ADC_ConfigChannel+0x12e>
 80032d6:	2380      	movs	r3, #128	; 0x80
 80032d8:	03db      	lsls	r3, r3, #15
 80032da:	4a2a      	ldr	r2, [pc, #168]	; (8003384 <HAL_ADC_ConfigChannel+0x1d8>)
 80032dc:	430b      	orrs	r3, r1
 80032de:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2b10      	cmp	r3, #16
 80032e6:	d140      	bne.n	800336a <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032e8:	4b27      	ldr	r3, [pc, #156]	; (8003388 <HAL_ADC_ConfigChannel+0x1dc>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4927      	ldr	r1, [pc, #156]	; (800338c <HAL_ADC_ConfigChannel+0x1e0>)
 80032ee:	0018      	movs	r0, r3
 80032f0:	f7fc ff0a 	bl	8000108 <__udivsi3>
 80032f4:	0003      	movs	r3, r0
 80032f6:	001a      	movs	r2, r3
 80032f8:	0013      	movs	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	189b      	adds	r3, r3, r2
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003302:	e002      	b.n	800330a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	3b01      	subs	r3, #1
 8003308:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1f9      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x158>
 8003310:	e02b      	b.n	800336a <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2101      	movs	r1, #1
 800331e:	4099      	lsls	r1, r3
 8003320:	000b      	movs	r3, r1
 8003322:	43d9      	mvns	r1, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	400a      	ands	r2, r1
 800332a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2b10      	cmp	r3, #16
 8003332:	d003      	beq.n	800333c <HAL_ADC_ConfigChannel+0x190>
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b11      	cmp	r3, #17
 800333a:	d116      	bne.n	800336a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800333c:	4b11      	ldr	r3, [pc, #68]	; (8003384 <HAL_ADC_ConfigChannel+0x1d8>)
 800333e:	6819      	ldr	r1, [r3, #0]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b10      	cmp	r3, #16
 8003346:	d101      	bne.n	800334c <HAL_ADC_ConfigChannel+0x1a0>
 8003348:	4a11      	ldr	r2, [pc, #68]	; (8003390 <HAL_ADC_ConfigChannel+0x1e4>)
 800334a:	e000      	b.n	800334e <HAL_ADC_ConfigChannel+0x1a2>
 800334c:	4a11      	ldr	r2, [pc, #68]	; (8003394 <HAL_ADC_ConfigChannel+0x1e8>)
 800334e:	4b0d      	ldr	r3, [pc, #52]	; (8003384 <HAL_ADC_ConfigChannel+0x1d8>)
 8003350:	400a      	ands	r2, r1
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	e009      	b.n	800336a <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335a:	2220      	movs	r2, #32
 800335c:	431a      	orrs	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003362:	230f      	movs	r3, #15
 8003364:	18fb      	adds	r3, r7, r3
 8003366:	2201      	movs	r2, #1
 8003368:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2234      	movs	r2, #52	; 0x34
 800336e:	2100      	movs	r1, #0
 8003370:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003372:	230f      	movs	r3, #15
 8003374:	18fb      	adds	r3, r7, r3
 8003376:	781b      	ldrb	r3, [r3, #0]
}
 8003378:	0018      	movs	r0, r3
 800337a:	46bd      	mov	sp, r7
 800337c:	b004      	add	sp, #16
 800337e:	bd80      	pop	{r7, pc}
 8003380:	00001001 	.word	0x00001001
 8003384:	40012708 	.word	0x40012708
 8003388:	20000010 	.word	0x20000010
 800338c:	000f4240 	.word	0x000f4240
 8003390:	ff7fffff 	.word	0xff7fffff
 8003394:	ffbfffff 	.word	0xffbfffff

08003398 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033a0:	2300      	movs	r3, #0
 80033a2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	2203      	movs	r2, #3
 80033b0:	4013      	ands	r3, r2
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d112      	bne.n	80033dc <ADC_Enable+0x44>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2201      	movs	r2, #1
 80033be:	4013      	ands	r3, r2
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d009      	beq.n	80033d8 <ADC_Enable+0x40>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68da      	ldr	r2, [r3, #12]
 80033ca:	2380      	movs	r3, #128	; 0x80
 80033cc:	021b      	lsls	r3, r3, #8
 80033ce:	401a      	ands	r2, r3
 80033d0:	2380      	movs	r3, #128	; 0x80
 80033d2:	021b      	lsls	r3, r3, #8
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d101      	bne.n	80033dc <ADC_Enable+0x44>
 80033d8:	2301      	movs	r3, #1
 80033da:	e000      	b.n	80033de <ADC_Enable+0x46>
 80033dc:	2300      	movs	r3, #0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d152      	bne.n	8003488 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	4a2a      	ldr	r2, [pc, #168]	; (8003494 <ADC_Enable+0xfc>)
 80033ea:	4013      	ands	r3, r2
 80033ec:	d00d      	beq.n	800340a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f2:	2210      	movs	r2, #16
 80033f4:	431a      	orrs	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fe:	2201      	movs	r2, #1
 8003400:	431a      	orrs	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e03f      	b.n	800348a <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2101      	movs	r1, #1
 8003416:	430a      	orrs	r2, r1
 8003418:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800341a:	4b1f      	ldr	r3, [pc, #124]	; (8003498 <ADC_Enable+0x100>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	491f      	ldr	r1, [pc, #124]	; (800349c <ADC_Enable+0x104>)
 8003420:	0018      	movs	r0, r3
 8003422:	f7fc fe71 	bl	8000108 <__udivsi3>
 8003426:	0003      	movs	r3, r0
 8003428:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800342a:	e002      	b.n	8003432 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	3b01      	subs	r3, #1
 8003430:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1f9      	bne.n	800342c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003438:	f7ff fb56 	bl	8002ae8 <HAL_GetTick>
 800343c:	0003      	movs	r3, r0
 800343e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003440:	e01b      	b.n	800347a <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003442:	f7ff fb51 	bl	8002ae8 <HAL_GetTick>
 8003446:	0002      	movs	r2, r0
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d914      	bls.n	800347a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2201      	movs	r2, #1
 8003458:	4013      	ands	r3, r2
 800345a:	2b01      	cmp	r3, #1
 800345c:	d00d      	beq.n	800347a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003462:	2210      	movs	r2, #16
 8003464:	431a      	orrs	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800346e:	2201      	movs	r2, #1
 8003470:	431a      	orrs	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e007      	b.n	800348a <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2201      	movs	r2, #1
 8003482:	4013      	ands	r3, r2
 8003484:	2b01      	cmp	r3, #1
 8003486:	d1dc      	bne.n	8003442 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	0018      	movs	r0, r3
 800348c:	46bd      	mov	sp, r7
 800348e:	b004      	add	sp, #16
 8003490:	bd80      	pop	{r7, pc}
 8003492:	46c0      	nop			; (mov r8, r8)
 8003494:	80000017 	.word	0x80000017
 8003498:	20000010 	.word	0x20000010
 800349c:	000f4240 	.word	0x000f4240

080034a0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	2203      	movs	r2, #3
 80034b4:	4013      	ands	r3, r2
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d112      	bne.n	80034e0 <ADC_Disable+0x40>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2201      	movs	r2, #1
 80034c2:	4013      	ands	r3, r2
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d009      	beq.n	80034dc <ADC_Disable+0x3c>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	2380      	movs	r3, #128	; 0x80
 80034d0:	021b      	lsls	r3, r3, #8
 80034d2:	401a      	ands	r2, r3
 80034d4:	2380      	movs	r3, #128	; 0x80
 80034d6:	021b      	lsls	r3, r3, #8
 80034d8:	429a      	cmp	r2, r3
 80034da:	d101      	bne.n	80034e0 <ADC_Disable+0x40>
 80034dc:	2301      	movs	r3, #1
 80034de:	e000      	b.n	80034e2 <ADC_Disable+0x42>
 80034e0:	2300      	movs	r3, #0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d048      	beq.n	8003578 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	2205      	movs	r2, #5
 80034ee:	4013      	ands	r3, r2
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d110      	bne.n	8003516 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689a      	ldr	r2, [r3, #8]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2102      	movs	r1, #2
 8003500:	430a      	orrs	r2, r1
 8003502:	609a      	str	r2, [r3, #8]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2203      	movs	r2, #3
 800350a:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800350c:	f7ff faec 	bl	8002ae8 <HAL_GetTick>
 8003510:	0003      	movs	r3, r0
 8003512:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003514:	e029      	b.n	800356a <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351a:	2210      	movs	r2, #16
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003526:	2201      	movs	r2, #1
 8003528:	431a      	orrs	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e023      	b.n	800357a <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003532:	f7ff fad9 	bl	8002ae8 <HAL_GetTick>
 8003536:	0002      	movs	r2, r0
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d914      	bls.n	800356a <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	2201      	movs	r2, #1
 8003548:	4013      	ands	r3, r2
 800354a:	2b01      	cmp	r3, #1
 800354c:	d10d      	bne.n	800356a <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003552:	2210      	movs	r2, #16
 8003554:	431a      	orrs	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355e:	2201      	movs	r2, #1
 8003560:	431a      	orrs	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e007      	b.n	800357a <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	2201      	movs	r2, #1
 8003572:	4013      	ands	r3, r2
 8003574:	2b01      	cmp	r3, #1
 8003576:	d0dc      	beq.n	8003532 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	0018      	movs	r0, r3
 800357c:	46bd      	mov	sp, r7
 800357e:	b004      	add	sp, #16
 8003580:	bd80      	pop	{r7, pc}

08003582 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b084      	sub	sp, #16
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800358a:	2300      	movs	r3, #0
 800358c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	2204      	movs	r2, #4
 8003596:	4013      	ands	r3, r2
 8003598:	d03a      	beq.n	8003610 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	2204      	movs	r2, #4
 80035a2:	4013      	ands	r3, r2
 80035a4:	2b04      	cmp	r3, #4
 80035a6:	d10d      	bne.n	80035c4 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	2202      	movs	r2, #2
 80035b0:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80035b2:	d107      	bne.n	80035c4 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689a      	ldr	r2, [r3, #8]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2110      	movs	r1, #16
 80035c0:	430a      	orrs	r2, r1
 80035c2:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80035c4:	f7ff fa90 	bl	8002ae8 <HAL_GetTick>
 80035c8:	0003      	movs	r3, r0
 80035ca:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80035cc:	e01a      	b.n	8003604 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80035ce:	f7ff fa8b 	bl	8002ae8 <HAL_GetTick>
 80035d2:	0002      	movs	r2, r0
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d913      	bls.n	8003604 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	2204      	movs	r2, #4
 80035e4:	4013      	ands	r3, r2
 80035e6:	d00d      	beq.n	8003604 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ec:	2210      	movs	r2, #16
 80035ee:	431a      	orrs	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f8:	2201      	movs	r2, #1
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e006      	b.n	8003612 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	2204      	movs	r2, #4
 800360c:	4013      	ands	r3, r2
 800360e:	d1de      	bne.n	80035ce <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	0018      	movs	r0, r3
 8003614:	46bd      	mov	sp, r7
 8003616:	b004      	add	sp, #16
 8003618:	bd80      	pop	{r7, pc}
	...

0800361c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	0002      	movs	r2, r0
 8003624:	1dfb      	adds	r3, r7, #7
 8003626:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003628:	1dfb      	adds	r3, r7, #7
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b7f      	cmp	r3, #127	; 0x7f
 800362e:	d809      	bhi.n	8003644 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003630:	1dfb      	adds	r3, r7, #7
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	001a      	movs	r2, r3
 8003636:	231f      	movs	r3, #31
 8003638:	401a      	ands	r2, r3
 800363a:	4b04      	ldr	r3, [pc, #16]	; (800364c <__NVIC_EnableIRQ+0x30>)
 800363c:	2101      	movs	r1, #1
 800363e:	4091      	lsls	r1, r2
 8003640:	000a      	movs	r2, r1
 8003642:	601a      	str	r2, [r3, #0]
  }
}
 8003644:	46c0      	nop			; (mov r8, r8)
 8003646:	46bd      	mov	sp, r7
 8003648:	b002      	add	sp, #8
 800364a:	bd80      	pop	{r7, pc}
 800364c:	e000e100 	.word	0xe000e100

08003650 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	0002      	movs	r2, r0
 8003658:	6039      	str	r1, [r7, #0]
 800365a:	1dfb      	adds	r3, r7, #7
 800365c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800365e:	1dfb      	adds	r3, r7, #7
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	2b7f      	cmp	r3, #127	; 0x7f
 8003664:	d828      	bhi.n	80036b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003666:	4a2f      	ldr	r2, [pc, #188]	; (8003724 <__NVIC_SetPriority+0xd4>)
 8003668:	1dfb      	adds	r3, r7, #7
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	b25b      	sxtb	r3, r3
 800366e:	089b      	lsrs	r3, r3, #2
 8003670:	33c0      	adds	r3, #192	; 0xc0
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	589b      	ldr	r3, [r3, r2]
 8003676:	1dfa      	adds	r2, r7, #7
 8003678:	7812      	ldrb	r2, [r2, #0]
 800367a:	0011      	movs	r1, r2
 800367c:	2203      	movs	r2, #3
 800367e:	400a      	ands	r2, r1
 8003680:	00d2      	lsls	r2, r2, #3
 8003682:	21ff      	movs	r1, #255	; 0xff
 8003684:	4091      	lsls	r1, r2
 8003686:	000a      	movs	r2, r1
 8003688:	43d2      	mvns	r2, r2
 800368a:	401a      	ands	r2, r3
 800368c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	019b      	lsls	r3, r3, #6
 8003692:	22ff      	movs	r2, #255	; 0xff
 8003694:	401a      	ands	r2, r3
 8003696:	1dfb      	adds	r3, r7, #7
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	0018      	movs	r0, r3
 800369c:	2303      	movs	r3, #3
 800369e:	4003      	ands	r3, r0
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036a4:	481f      	ldr	r0, [pc, #124]	; (8003724 <__NVIC_SetPriority+0xd4>)
 80036a6:	1dfb      	adds	r3, r7, #7
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	b25b      	sxtb	r3, r3
 80036ac:	089b      	lsrs	r3, r3, #2
 80036ae:	430a      	orrs	r2, r1
 80036b0:	33c0      	adds	r3, #192	; 0xc0
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80036b6:	e031      	b.n	800371c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036b8:	4a1b      	ldr	r2, [pc, #108]	; (8003728 <__NVIC_SetPriority+0xd8>)
 80036ba:	1dfb      	adds	r3, r7, #7
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	0019      	movs	r1, r3
 80036c0:	230f      	movs	r3, #15
 80036c2:	400b      	ands	r3, r1
 80036c4:	3b08      	subs	r3, #8
 80036c6:	089b      	lsrs	r3, r3, #2
 80036c8:	3306      	adds	r3, #6
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	18d3      	adds	r3, r2, r3
 80036ce:	3304      	adds	r3, #4
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	1dfa      	adds	r2, r7, #7
 80036d4:	7812      	ldrb	r2, [r2, #0]
 80036d6:	0011      	movs	r1, r2
 80036d8:	2203      	movs	r2, #3
 80036da:	400a      	ands	r2, r1
 80036dc:	00d2      	lsls	r2, r2, #3
 80036de:	21ff      	movs	r1, #255	; 0xff
 80036e0:	4091      	lsls	r1, r2
 80036e2:	000a      	movs	r2, r1
 80036e4:	43d2      	mvns	r2, r2
 80036e6:	401a      	ands	r2, r3
 80036e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	019b      	lsls	r3, r3, #6
 80036ee:	22ff      	movs	r2, #255	; 0xff
 80036f0:	401a      	ands	r2, r3
 80036f2:	1dfb      	adds	r3, r7, #7
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	0018      	movs	r0, r3
 80036f8:	2303      	movs	r3, #3
 80036fa:	4003      	ands	r3, r0
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003700:	4809      	ldr	r0, [pc, #36]	; (8003728 <__NVIC_SetPriority+0xd8>)
 8003702:	1dfb      	adds	r3, r7, #7
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	001c      	movs	r4, r3
 8003708:	230f      	movs	r3, #15
 800370a:	4023      	ands	r3, r4
 800370c:	3b08      	subs	r3, #8
 800370e:	089b      	lsrs	r3, r3, #2
 8003710:	430a      	orrs	r2, r1
 8003712:	3306      	adds	r3, #6
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	18c3      	adds	r3, r0, r3
 8003718:	3304      	adds	r3, #4
 800371a:	601a      	str	r2, [r3, #0]
}
 800371c:	46c0      	nop			; (mov r8, r8)
 800371e:	46bd      	mov	sp, r7
 8003720:	b003      	add	sp, #12
 8003722:	bd90      	pop	{r4, r7, pc}
 8003724:	e000e100 	.word	0xe000e100
 8003728:	e000ed00 	.word	0xe000ed00

0800372c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	1e5a      	subs	r2, r3, #1
 8003738:	2380      	movs	r3, #128	; 0x80
 800373a:	045b      	lsls	r3, r3, #17
 800373c:	429a      	cmp	r2, r3
 800373e:	d301      	bcc.n	8003744 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003740:	2301      	movs	r3, #1
 8003742:	e010      	b.n	8003766 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003744:	4b0a      	ldr	r3, [pc, #40]	; (8003770 <SysTick_Config+0x44>)
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	3a01      	subs	r2, #1
 800374a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800374c:	2301      	movs	r3, #1
 800374e:	425b      	negs	r3, r3
 8003750:	2103      	movs	r1, #3
 8003752:	0018      	movs	r0, r3
 8003754:	f7ff ff7c 	bl	8003650 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003758:	4b05      	ldr	r3, [pc, #20]	; (8003770 <SysTick_Config+0x44>)
 800375a:	2200      	movs	r2, #0
 800375c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800375e:	4b04      	ldr	r3, [pc, #16]	; (8003770 <SysTick_Config+0x44>)
 8003760:	2207      	movs	r2, #7
 8003762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003764:	2300      	movs	r3, #0
}
 8003766:	0018      	movs	r0, r3
 8003768:	46bd      	mov	sp, r7
 800376a:	b002      	add	sp, #8
 800376c:	bd80      	pop	{r7, pc}
 800376e:	46c0      	nop			; (mov r8, r8)
 8003770:	e000e010 	.word	0xe000e010

08003774 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	607a      	str	r2, [r7, #4]
 800377e:	210f      	movs	r1, #15
 8003780:	187b      	adds	r3, r7, r1
 8003782:	1c02      	adds	r2, r0, #0
 8003784:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003786:	68ba      	ldr	r2, [r7, #8]
 8003788:	187b      	adds	r3, r7, r1
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	b25b      	sxtb	r3, r3
 800378e:	0011      	movs	r1, r2
 8003790:	0018      	movs	r0, r3
 8003792:	f7ff ff5d 	bl	8003650 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8003796:	46c0      	nop			; (mov r8, r8)
 8003798:	46bd      	mov	sp, r7
 800379a:	b004      	add	sp, #16
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	0002      	movs	r2, r0
 80037a6:	1dfb      	adds	r3, r7, #7
 80037a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037aa:	1dfb      	adds	r3, r7, #7
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	b25b      	sxtb	r3, r3
 80037b0:	0018      	movs	r0, r3
 80037b2:	f7ff ff33 	bl	800361c <__NVIC_EnableIRQ>
}
 80037b6:	46c0      	nop			; (mov r8, r8)
 80037b8:	46bd      	mov	sp, r7
 80037ba:	b002      	add	sp, #8
 80037bc:	bd80      	pop	{r7, pc}

080037be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b082      	sub	sp, #8
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	0018      	movs	r0, r3
 80037ca:	f7ff ffaf 	bl	800372c <SysTick_Config>
 80037ce:	0003      	movs	r3, r0
}
 80037d0:	0018      	movs	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	b002      	add	sp, #8
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037e2:	2300      	movs	r3, #0
 80037e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037e6:	e14f      	b.n	8003a88 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2101      	movs	r1, #1
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	4091      	lsls	r1, r2
 80037f2:	000a      	movs	r2, r1
 80037f4:	4013      	ands	r3, r2
 80037f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d100      	bne.n	8003800 <HAL_GPIO_Init+0x28>
 80037fe:	e140      	b.n	8003a82 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	2203      	movs	r2, #3
 8003806:	4013      	ands	r3, r2
 8003808:	2b01      	cmp	r3, #1
 800380a:	d005      	beq.n	8003818 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2203      	movs	r2, #3
 8003812:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003814:	2b02      	cmp	r3, #2
 8003816:	d130      	bne.n	800387a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	2203      	movs	r2, #3
 8003824:	409a      	lsls	r2, r3
 8003826:	0013      	movs	r3, r2
 8003828:	43da      	mvns	r2, r3
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	4013      	ands	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	68da      	ldr	r2, [r3, #12]
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	409a      	lsls	r2, r3
 800383a:	0013      	movs	r3, r2
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	4313      	orrs	r3, r2
 8003840:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800384e:	2201      	movs	r2, #1
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	409a      	lsls	r2, r3
 8003854:	0013      	movs	r3, r2
 8003856:	43da      	mvns	r2, r3
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	4013      	ands	r3, r2
 800385c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	091b      	lsrs	r3, r3, #4
 8003864:	2201      	movs	r2, #1
 8003866:	401a      	ands	r2, r3
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	409a      	lsls	r2, r3
 800386c:	0013      	movs	r3, r2
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2203      	movs	r2, #3
 8003880:	4013      	ands	r3, r2
 8003882:	2b03      	cmp	r3, #3
 8003884:	d017      	beq.n	80038b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	2203      	movs	r2, #3
 8003892:	409a      	lsls	r2, r3
 8003894:	0013      	movs	r3, r2
 8003896:	43da      	mvns	r2, r3
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	4013      	ands	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	689a      	ldr	r2, [r3, #8]
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	409a      	lsls	r2, r3
 80038a8:	0013      	movs	r3, r2
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2203      	movs	r2, #3
 80038bc:	4013      	ands	r3, r2
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d123      	bne.n	800390a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	08da      	lsrs	r2, r3, #3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	3208      	adds	r2, #8
 80038ca:	0092      	lsls	r2, r2, #2
 80038cc:	58d3      	ldr	r3, [r2, r3]
 80038ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	2207      	movs	r2, #7
 80038d4:	4013      	ands	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	220f      	movs	r2, #15
 80038da:	409a      	lsls	r2, r3
 80038dc:	0013      	movs	r3, r2
 80038de:	43da      	mvns	r2, r3
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	4013      	ands	r3, r2
 80038e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	691a      	ldr	r2, [r3, #16]
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2107      	movs	r1, #7
 80038ee:	400b      	ands	r3, r1
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	409a      	lsls	r2, r3
 80038f4:	0013      	movs	r3, r2
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	08da      	lsrs	r2, r3, #3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	3208      	adds	r2, #8
 8003904:	0092      	lsls	r2, r2, #2
 8003906:	6939      	ldr	r1, [r7, #16]
 8003908:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	2203      	movs	r2, #3
 8003916:	409a      	lsls	r2, r3
 8003918:	0013      	movs	r3, r2
 800391a:	43da      	mvns	r2, r3
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	4013      	ands	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2203      	movs	r2, #3
 8003928:	401a      	ands	r2, r3
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	409a      	lsls	r2, r3
 8003930:	0013      	movs	r3, r2
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	4313      	orrs	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	23c0      	movs	r3, #192	; 0xc0
 8003944:	029b      	lsls	r3, r3, #10
 8003946:	4013      	ands	r3, r2
 8003948:	d100      	bne.n	800394c <HAL_GPIO_Init+0x174>
 800394a:	e09a      	b.n	8003a82 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800394c:	4b54      	ldr	r3, [pc, #336]	; (8003aa0 <HAL_GPIO_Init+0x2c8>)
 800394e:	699a      	ldr	r2, [r3, #24]
 8003950:	4b53      	ldr	r3, [pc, #332]	; (8003aa0 <HAL_GPIO_Init+0x2c8>)
 8003952:	2101      	movs	r1, #1
 8003954:	430a      	orrs	r2, r1
 8003956:	619a      	str	r2, [r3, #24]
 8003958:	4b51      	ldr	r3, [pc, #324]	; (8003aa0 <HAL_GPIO_Init+0x2c8>)
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	2201      	movs	r2, #1
 800395e:	4013      	ands	r3, r2
 8003960:	60bb      	str	r3, [r7, #8]
 8003962:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003964:	4a4f      	ldr	r2, [pc, #316]	; (8003aa4 <HAL_GPIO_Init+0x2cc>)
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	089b      	lsrs	r3, r3, #2
 800396a:	3302      	adds	r3, #2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	589b      	ldr	r3, [r3, r2]
 8003970:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2203      	movs	r2, #3
 8003976:	4013      	ands	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	220f      	movs	r2, #15
 800397c:	409a      	lsls	r2, r3
 800397e:	0013      	movs	r3, r2
 8003980:	43da      	mvns	r2, r3
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	4013      	ands	r3, r2
 8003986:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	2390      	movs	r3, #144	; 0x90
 800398c:	05db      	lsls	r3, r3, #23
 800398e:	429a      	cmp	r2, r3
 8003990:	d013      	beq.n	80039ba <HAL_GPIO_Init+0x1e2>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a44      	ldr	r2, [pc, #272]	; (8003aa8 <HAL_GPIO_Init+0x2d0>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d00d      	beq.n	80039b6 <HAL_GPIO_Init+0x1de>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a43      	ldr	r2, [pc, #268]	; (8003aac <HAL_GPIO_Init+0x2d4>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d007      	beq.n	80039b2 <HAL_GPIO_Init+0x1da>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a42      	ldr	r2, [pc, #264]	; (8003ab0 <HAL_GPIO_Init+0x2d8>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d101      	bne.n	80039ae <HAL_GPIO_Init+0x1d6>
 80039aa:	2303      	movs	r3, #3
 80039ac:	e006      	b.n	80039bc <HAL_GPIO_Init+0x1e4>
 80039ae:	2305      	movs	r3, #5
 80039b0:	e004      	b.n	80039bc <HAL_GPIO_Init+0x1e4>
 80039b2:	2302      	movs	r3, #2
 80039b4:	e002      	b.n	80039bc <HAL_GPIO_Init+0x1e4>
 80039b6:	2301      	movs	r3, #1
 80039b8:	e000      	b.n	80039bc <HAL_GPIO_Init+0x1e4>
 80039ba:	2300      	movs	r3, #0
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	2103      	movs	r1, #3
 80039c0:	400a      	ands	r2, r1
 80039c2:	0092      	lsls	r2, r2, #2
 80039c4:	4093      	lsls	r3, r2
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80039cc:	4935      	ldr	r1, [pc, #212]	; (8003aa4 <HAL_GPIO_Init+0x2cc>)
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	089b      	lsrs	r3, r3, #2
 80039d2:	3302      	adds	r3, #2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039da:	4b36      	ldr	r3, [pc, #216]	; (8003ab4 <HAL_GPIO_Init+0x2dc>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	43da      	mvns	r2, r3
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	4013      	ands	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	2380      	movs	r3, #128	; 0x80
 80039f0:	035b      	lsls	r3, r3, #13
 80039f2:	4013      	ands	r3, r2
 80039f4:	d003      	beq.n	80039fe <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80039fe:	4b2d      	ldr	r3, [pc, #180]	; (8003ab4 <HAL_GPIO_Init+0x2dc>)
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003a04:	4b2b      	ldr	r3, [pc, #172]	; (8003ab4 <HAL_GPIO_Init+0x2dc>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	43da      	mvns	r2, r3
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	4013      	ands	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	2380      	movs	r3, #128	; 0x80
 8003a1a:	039b      	lsls	r3, r3, #14
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	d003      	beq.n	8003a28 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003a28:	4b22      	ldr	r3, [pc, #136]	; (8003ab4 <HAL_GPIO_Init+0x2dc>)
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003a2e:	4b21      	ldr	r3, [pc, #132]	; (8003ab4 <HAL_GPIO_Init+0x2dc>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	43da      	mvns	r2, r3
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	2380      	movs	r3, #128	; 0x80
 8003a44:	029b      	lsls	r3, r3, #10
 8003a46:	4013      	ands	r3, r2
 8003a48:	d003      	beq.n	8003a52 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003a52:	4b18      	ldr	r3, [pc, #96]	; (8003ab4 <HAL_GPIO_Init+0x2dc>)
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003a58:	4b16      	ldr	r3, [pc, #88]	; (8003ab4 <HAL_GPIO_Init+0x2dc>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	43da      	mvns	r2, r3
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	4013      	ands	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	2380      	movs	r3, #128	; 0x80
 8003a6e:	025b      	lsls	r3, r3, #9
 8003a70:	4013      	ands	r3, r2
 8003a72:	d003      	beq.n	8003a7c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003a7c:	4b0d      	ldr	r3, [pc, #52]	; (8003ab4 <HAL_GPIO_Init+0x2dc>)
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	3301      	adds	r3, #1
 8003a86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	40da      	lsrs	r2, r3
 8003a90:	1e13      	subs	r3, r2, #0
 8003a92:	d000      	beq.n	8003a96 <HAL_GPIO_Init+0x2be>
 8003a94:	e6a8      	b.n	80037e8 <HAL_GPIO_Init+0x10>
  } 
}
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	46c0      	nop			; (mov r8, r8)
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	b006      	add	sp, #24
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	40010000 	.word	0x40010000
 8003aa8:	48000400 	.word	0x48000400
 8003aac:	48000800 	.word	0x48000800
 8003ab0:	48000c00 	.word	0x48000c00
 8003ab4:	40010400 	.word	0x40010400

08003ab8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b088      	sub	sp, #32
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e305      	b.n	80040d6 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	d100      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x1e>
 8003ad4:	e08d      	b.n	8003bf2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003ad6:	4bc5      	ldr	r3, [pc, #788]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	220c      	movs	r2, #12
 8003adc:	4013      	ands	r3, r2
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	d00e      	beq.n	8003b00 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ae2:	4bc2      	ldr	r3, [pc, #776]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	220c      	movs	r2, #12
 8003ae8:	4013      	ands	r3, r2
 8003aea:	2b08      	cmp	r3, #8
 8003aec:	d116      	bne.n	8003b1c <HAL_RCC_OscConfig+0x64>
 8003aee:	4bbf      	ldr	r3, [pc, #764]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	23c0      	movs	r3, #192	; 0xc0
 8003af4:	025b      	lsls	r3, r3, #9
 8003af6:	401a      	ands	r2, r3
 8003af8:	2380      	movs	r3, #128	; 0x80
 8003afa:	025b      	lsls	r3, r3, #9
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d10d      	bne.n	8003b1c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b00:	4bba      	ldr	r3, [pc, #744]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	2380      	movs	r3, #128	; 0x80
 8003b06:	029b      	lsls	r3, r3, #10
 8003b08:	4013      	ands	r3, r2
 8003b0a:	d100      	bne.n	8003b0e <HAL_RCC_OscConfig+0x56>
 8003b0c:	e070      	b.n	8003bf0 <HAL_RCC_OscConfig+0x138>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d000      	beq.n	8003b18 <HAL_RCC_OscConfig+0x60>
 8003b16:	e06b      	b.n	8003bf0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e2dc      	b.n	80040d6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d107      	bne.n	8003b34 <HAL_RCC_OscConfig+0x7c>
 8003b24:	4bb1      	ldr	r3, [pc, #708]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	4bb0      	ldr	r3, [pc, #704]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003b2a:	2180      	movs	r1, #128	; 0x80
 8003b2c:	0249      	lsls	r1, r1, #9
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	e02f      	b.n	8003b94 <HAL_RCC_OscConfig+0xdc>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10c      	bne.n	8003b56 <HAL_RCC_OscConfig+0x9e>
 8003b3c:	4bab      	ldr	r3, [pc, #684]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	4baa      	ldr	r3, [pc, #680]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003b42:	49ab      	ldr	r1, [pc, #684]	; (8003df0 <HAL_RCC_OscConfig+0x338>)
 8003b44:	400a      	ands	r2, r1
 8003b46:	601a      	str	r2, [r3, #0]
 8003b48:	4ba8      	ldr	r3, [pc, #672]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	4ba7      	ldr	r3, [pc, #668]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003b4e:	49a9      	ldr	r1, [pc, #676]	; (8003df4 <HAL_RCC_OscConfig+0x33c>)
 8003b50:	400a      	ands	r2, r1
 8003b52:	601a      	str	r2, [r3, #0]
 8003b54:	e01e      	b.n	8003b94 <HAL_RCC_OscConfig+0xdc>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b05      	cmp	r3, #5
 8003b5c:	d10e      	bne.n	8003b7c <HAL_RCC_OscConfig+0xc4>
 8003b5e:	4ba3      	ldr	r3, [pc, #652]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	4ba2      	ldr	r3, [pc, #648]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003b64:	2180      	movs	r1, #128	; 0x80
 8003b66:	02c9      	lsls	r1, r1, #11
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	4b9f      	ldr	r3, [pc, #636]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	4b9e      	ldr	r3, [pc, #632]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003b72:	2180      	movs	r1, #128	; 0x80
 8003b74:	0249      	lsls	r1, r1, #9
 8003b76:	430a      	orrs	r2, r1
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	e00b      	b.n	8003b94 <HAL_RCC_OscConfig+0xdc>
 8003b7c:	4b9b      	ldr	r3, [pc, #620]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	4b9a      	ldr	r3, [pc, #616]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003b82:	499b      	ldr	r1, [pc, #620]	; (8003df0 <HAL_RCC_OscConfig+0x338>)
 8003b84:	400a      	ands	r2, r1
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	4b98      	ldr	r3, [pc, #608]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	4b97      	ldr	r3, [pc, #604]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003b8e:	4999      	ldr	r1, [pc, #612]	; (8003df4 <HAL_RCC_OscConfig+0x33c>)
 8003b90:	400a      	ands	r2, r1
 8003b92:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d014      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9c:	f7fe ffa4 	bl	8002ae8 <HAL_GetTick>
 8003ba0:	0003      	movs	r3, r0
 8003ba2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ba6:	f7fe ff9f 	bl	8002ae8 <HAL_GetTick>
 8003baa:	0002      	movs	r2, r0
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b64      	cmp	r3, #100	; 0x64
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e28e      	b.n	80040d6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bb8:	4b8c      	ldr	r3, [pc, #560]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	2380      	movs	r3, #128	; 0x80
 8003bbe:	029b      	lsls	r3, r3, #10
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	d0f0      	beq.n	8003ba6 <HAL_RCC_OscConfig+0xee>
 8003bc4:	e015      	b.n	8003bf2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc6:	f7fe ff8f 	bl	8002ae8 <HAL_GetTick>
 8003bca:	0003      	movs	r3, r0
 8003bcc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bd0:	f7fe ff8a 	bl	8002ae8 <HAL_GetTick>
 8003bd4:	0002      	movs	r2, r0
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b64      	cmp	r3, #100	; 0x64
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e279      	b.n	80040d6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003be2:	4b82      	ldr	r3, [pc, #520]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	2380      	movs	r3, #128	; 0x80
 8003be8:	029b      	lsls	r3, r3, #10
 8003bea:	4013      	ands	r3, r2
 8003bec:	d1f0      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x118>
 8003bee:	e000      	b.n	8003bf2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bf0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	d100      	bne.n	8003bfe <HAL_RCC_OscConfig+0x146>
 8003bfc:	e06c      	b.n	8003cd8 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003bfe:	4b7b      	ldr	r3, [pc, #492]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	220c      	movs	r2, #12
 8003c04:	4013      	ands	r3, r2
 8003c06:	d00e      	beq.n	8003c26 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003c08:	4b78      	ldr	r3, [pc, #480]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	220c      	movs	r2, #12
 8003c0e:	4013      	ands	r3, r2
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d11f      	bne.n	8003c54 <HAL_RCC_OscConfig+0x19c>
 8003c14:	4b75      	ldr	r3, [pc, #468]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	23c0      	movs	r3, #192	; 0xc0
 8003c1a:	025b      	lsls	r3, r3, #9
 8003c1c:	401a      	ands	r2, r3
 8003c1e:	2380      	movs	r3, #128	; 0x80
 8003c20:	021b      	lsls	r3, r3, #8
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d116      	bne.n	8003c54 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c26:	4b71      	ldr	r3, [pc, #452]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	d005      	beq.n	8003c3c <HAL_RCC_OscConfig+0x184>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d001      	beq.n	8003c3c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e24c      	b.n	80040d6 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c3c:	4b6b      	ldr	r3, [pc, #428]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	22f8      	movs	r2, #248	; 0xf8
 8003c42:	4393      	bics	r3, r2
 8003c44:	0019      	movs	r1, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	00da      	lsls	r2, r3, #3
 8003c4c:	4b67      	ldr	r3, [pc, #412]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c52:	e041      	b.n	8003cd8 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d024      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c5c:	4b63      	ldr	r3, [pc, #396]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	4b62      	ldr	r3, [pc, #392]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003c62:	2101      	movs	r1, #1
 8003c64:	430a      	orrs	r2, r1
 8003c66:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c68:	f7fe ff3e 	bl	8002ae8 <HAL_GetTick>
 8003c6c:	0003      	movs	r3, r0
 8003c6e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c70:	e008      	b.n	8003c84 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c72:	f7fe ff39 	bl	8002ae8 <HAL_GetTick>
 8003c76:	0002      	movs	r2, r0
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e228      	b.n	80040d6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c84:	4b59      	ldr	r3, [pc, #356]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2202      	movs	r2, #2
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	d0f1      	beq.n	8003c72 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c8e:	4b57      	ldr	r3, [pc, #348]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	22f8      	movs	r2, #248	; 0xf8
 8003c94:	4393      	bics	r3, r2
 8003c96:	0019      	movs	r1, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	00da      	lsls	r2, r3, #3
 8003c9e:	4b53      	ldr	r3, [pc, #332]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	e018      	b.n	8003cd8 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ca6:	4b51      	ldr	r3, [pc, #324]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	4b50      	ldr	r3, [pc, #320]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003cac:	2101      	movs	r1, #1
 8003cae:	438a      	bics	r2, r1
 8003cb0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb2:	f7fe ff19 	bl	8002ae8 <HAL_GetTick>
 8003cb6:	0003      	movs	r3, r0
 8003cb8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cbc:	f7fe ff14 	bl	8002ae8 <HAL_GetTick>
 8003cc0:	0002      	movs	r2, r0
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e203      	b.n	80040d6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cce:	4b47      	ldr	r3, [pc, #284]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	d1f1      	bne.n	8003cbc <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2208      	movs	r2, #8
 8003cde:	4013      	ands	r3, r2
 8003ce0:	d036      	beq.n	8003d50 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	69db      	ldr	r3, [r3, #28]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d019      	beq.n	8003d1e <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cea:	4b40      	ldr	r3, [pc, #256]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003cec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cee:	4b3f      	ldr	r3, [pc, #252]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf6:	f7fe fef7 	bl	8002ae8 <HAL_GetTick>
 8003cfa:	0003      	movs	r3, r0
 8003cfc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d00:	f7fe fef2 	bl	8002ae8 <HAL_GetTick>
 8003d04:	0002      	movs	r2, r0
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e1e1      	b.n	80040d6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d12:	4b36      	ldr	r3, [pc, #216]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	2202      	movs	r2, #2
 8003d18:	4013      	ands	r3, r2
 8003d1a:	d0f1      	beq.n	8003d00 <HAL_RCC_OscConfig+0x248>
 8003d1c:	e018      	b.n	8003d50 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d1e:	4b33      	ldr	r3, [pc, #204]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003d20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d22:	4b32      	ldr	r3, [pc, #200]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003d24:	2101      	movs	r1, #1
 8003d26:	438a      	bics	r2, r1
 8003d28:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d2a:	f7fe fedd 	bl	8002ae8 <HAL_GetTick>
 8003d2e:	0003      	movs	r3, r0
 8003d30:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d34:	f7fe fed8 	bl	8002ae8 <HAL_GetTick>
 8003d38:	0002      	movs	r2, r0
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e1c7      	b.n	80040d6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d46:	4b29      	ldr	r3, [pc, #164]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	d1f1      	bne.n	8003d34 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2204      	movs	r2, #4
 8003d56:	4013      	ands	r3, r2
 8003d58:	d100      	bne.n	8003d5c <HAL_RCC_OscConfig+0x2a4>
 8003d5a:	e0b5      	b.n	8003ec8 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d5c:	201f      	movs	r0, #31
 8003d5e:	183b      	adds	r3, r7, r0
 8003d60:	2200      	movs	r2, #0
 8003d62:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d64:	4b21      	ldr	r3, [pc, #132]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003d66:	69da      	ldr	r2, [r3, #28]
 8003d68:	2380      	movs	r3, #128	; 0x80
 8003d6a:	055b      	lsls	r3, r3, #21
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	d110      	bne.n	8003d92 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d70:	4b1e      	ldr	r3, [pc, #120]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003d72:	69da      	ldr	r2, [r3, #28]
 8003d74:	4b1d      	ldr	r3, [pc, #116]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003d76:	2180      	movs	r1, #128	; 0x80
 8003d78:	0549      	lsls	r1, r1, #21
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	61da      	str	r2, [r3, #28]
 8003d7e:	4b1b      	ldr	r3, [pc, #108]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003d80:	69da      	ldr	r2, [r3, #28]
 8003d82:	2380      	movs	r3, #128	; 0x80
 8003d84:	055b      	lsls	r3, r3, #21
 8003d86:	4013      	ands	r3, r2
 8003d88:	60fb      	str	r3, [r7, #12]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003d8c:	183b      	adds	r3, r7, r0
 8003d8e:	2201      	movs	r2, #1
 8003d90:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d92:	4b19      	ldr	r3, [pc, #100]	; (8003df8 <HAL_RCC_OscConfig+0x340>)
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	2380      	movs	r3, #128	; 0x80
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	d11a      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d9e:	4b16      	ldr	r3, [pc, #88]	; (8003df8 <HAL_RCC_OscConfig+0x340>)
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	4b15      	ldr	r3, [pc, #84]	; (8003df8 <HAL_RCC_OscConfig+0x340>)
 8003da4:	2180      	movs	r1, #128	; 0x80
 8003da6:	0049      	lsls	r1, r1, #1
 8003da8:	430a      	orrs	r2, r1
 8003daa:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dac:	f7fe fe9c 	bl	8002ae8 <HAL_GetTick>
 8003db0:	0003      	movs	r3, r0
 8003db2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db6:	f7fe fe97 	bl	8002ae8 <HAL_GetTick>
 8003dba:	0002      	movs	r2, r0
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b64      	cmp	r3, #100	; 0x64
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e186      	b.n	80040d6 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc8:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <HAL_RCC_OscConfig+0x340>)
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	2380      	movs	r3, #128	; 0x80
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	d0f0      	beq.n	8003db6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d10f      	bne.n	8003dfc <HAL_RCC_OscConfig+0x344>
 8003ddc:	4b03      	ldr	r3, [pc, #12]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003dde:	6a1a      	ldr	r2, [r3, #32]
 8003de0:	4b02      	ldr	r3, [pc, #8]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003de2:	2101      	movs	r1, #1
 8003de4:	430a      	orrs	r2, r1
 8003de6:	621a      	str	r2, [r3, #32]
 8003de8:	e036      	b.n	8003e58 <HAL_RCC_OscConfig+0x3a0>
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	40021000 	.word	0x40021000
 8003df0:	fffeffff 	.word	0xfffeffff
 8003df4:	fffbffff 	.word	0xfffbffff
 8003df8:	40007000 	.word	0x40007000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10c      	bne.n	8003e1e <HAL_RCC_OscConfig+0x366>
 8003e04:	4bb6      	ldr	r3, [pc, #728]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8003e06:	6a1a      	ldr	r2, [r3, #32]
 8003e08:	4bb5      	ldr	r3, [pc, #724]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	438a      	bics	r2, r1
 8003e0e:	621a      	str	r2, [r3, #32]
 8003e10:	4bb3      	ldr	r3, [pc, #716]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8003e12:	6a1a      	ldr	r2, [r3, #32]
 8003e14:	4bb2      	ldr	r3, [pc, #712]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8003e16:	2104      	movs	r1, #4
 8003e18:	438a      	bics	r2, r1
 8003e1a:	621a      	str	r2, [r3, #32]
 8003e1c:	e01c      	b.n	8003e58 <HAL_RCC_OscConfig+0x3a0>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	2b05      	cmp	r3, #5
 8003e24:	d10c      	bne.n	8003e40 <HAL_RCC_OscConfig+0x388>
 8003e26:	4bae      	ldr	r3, [pc, #696]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8003e28:	6a1a      	ldr	r2, [r3, #32]
 8003e2a:	4bad      	ldr	r3, [pc, #692]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8003e2c:	2104      	movs	r1, #4
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	621a      	str	r2, [r3, #32]
 8003e32:	4bab      	ldr	r3, [pc, #684]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8003e34:	6a1a      	ldr	r2, [r3, #32]
 8003e36:	4baa      	ldr	r3, [pc, #680]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8003e38:	2101      	movs	r1, #1
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	621a      	str	r2, [r3, #32]
 8003e3e:	e00b      	b.n	8003e58 <HAL_RCC_OscConfig+0x3a0>
 8003e40:	4ba7      	ldr	r3, [pc, #668]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8003e42:	6a1a      	ldr	r2, [r3, #32]
 8003e44:	4ba6      	ldr	r3, [pc, #664]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8003e46:	2101      	movs	r1, #1
 8003e48:	438a      	bics	r2, r1
 8003e4a:	621a      	str	r2, [r3, #32]
 8003e4c:	4ba4      	ldr	r3, [pc, #656]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8003e4e:	6a1a      	ldr	r2, [r3, #32]
 8003e50:	4ba3      	ldr	r3, [pc, #652]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8003e52:	2104      	movs	r1, #4
 8003e54:	438a      	bics	r2, r1
 8003e56:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d014      	beq.n	8003e8a <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e60:	f7fe fe42 	bl	8002ae8 <HAL_GetTick>
 8003e64:	0003      	movs	r3, r0
 8003e66:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e68:	e009      	b.n	8003e7e <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e6a:	f7fe fe3d 	bl	8002ae8 <HAL_GetTick>
 8003e6e:	0002      	movs	r2, r0
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	4a9b      	ldr	r2, [pc, #620]	; (80040e4 <HAL_RCC_OscConfig+0x62c>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e12b      	b.n	80040d6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e7e:	4b98      	ldr	r3, [pc, #608]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	2202      	movs	r2, #2
 8003e84:	4013      	ands	r3, r2
 8003e86:	d0f0      	beq.n	8003e6a <HAL_RCC_OscConfig+0x3b2>
 8003e88:	e013      	b.n	8003eb2 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e8a:	f7fe fe2d 	bl	8002ae8 <HAL_GetTick>
 8003e8e:	0003      	movs	r3, r0
 8003e90:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e92:	e009      	b.n	8003ea8 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e94:	f7fe fe28 	bl	8002ae8 <HAL_GetTick>
 8003e98:	0002      	movs	r2, r0
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	4a91      	ldr	r2, [pc, #580]	; (80040e4 <HAL_RCC_OscConfig+0x62c>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e116      	b.n	80040d6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ea8:	4b8d      	ldr	r3, [pc, #564]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	2202      	movs	r2, #2
 8003eae:	4013      	ands	r3, r2
 8003eb0:	d1f0      	bne.n	8003e94 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003eb2:	231f      	movs	r3, #31
 8003eb4:	18fb      	adds	r3, r7, r3
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d105      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ebc:	4b88      	ldr	r3, [pc, #544]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8003ebe:	69da      	ldr	r2, [r3, #28]
 8003ec0:	4b87      	ldr	r3, [pc, #540]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8003ec2:	4989      	ldr	r1, [pc, #548]	; (80040e8 <HAL_RCC_OscConfig+0x630>)
 8003ec4:	400a      	ands	r2, r1
 8003ec6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2210      	movs	r2, #16
 8003ece:	4013      	ands	r3, r2
 8003ed0:	d063      	beq.n	8003f9a <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d12a      	bne.n	8003f30 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003eda:	4b81      	ldr	r3, [pc, #516]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8003edc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ede:	4b80      	ldr	r3, [pc, #512]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8003ee0:	2104      	movs	r1, #4
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003ee6:	4b7e      	ldr	r3, [pc, #504]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8003ee8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eea:	4b7d      	ldr	r3, [pc, #500]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8003eec:	2101      	movs	r1, #1
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ef2:	f7fe fdf9 	bl	8002ae8 <HAL_GetTick>
 8003ef6:	0003      	movs	r3, r0
 8003ef8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003efc:	f7fe fdf4 	bl	8002ae8 <HAL_GetTick>
 8003f00:	0002      	movs	r2, r0
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e0e3      	b.n	80040d6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003f0e:	4b74      	ldr	r3, [pc, #464]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8003f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f12:	2202      	movs	r2, #2
 8003f14:	4013      	ands	r3, r2
 8003f16:	d0f1      	beq.n	8003efc <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003f18:	4b71      	ldr	r3, [pc, #452]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8003f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1c:	22f8      	movs	r2, #248	; 0xf8
 8003f1e:	4393      	bics	r3, r2
 8003f20:	0019      	movs	r1, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	00da      	lsls	r2, r3, #3
 8003f28:	4b6d      	ldr	r3, [pc, #436]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	635a      	str	r2, [r3, #52]	; 0x34
 8003f2e:	e034      	b.n	8003f9a <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	3305      	adds	r3, #5
 8003f36:	d111      	bne.n	8003f5c <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003f38:	4b69      	ldr	r3, [pc, #420]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8003f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f3c:	4b68      	ldr	r3, [pc, #416]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8003f3e:	2104      	movs	r1, #4
 8003f40:	438a      	bics	r2, r1
 8003f42:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003f44:	4b66      	ldr	r3, [pc, #408]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8003f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f48:	22f8      	movs	r2, #248	; 0xf8
 8003f4a:	4393      	bics	r3, r2
 8003f4c:	0019      	movs	r1, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	00da      	lsls	r2, r3, #3
 8003f54:	4b62      	ldr	r3, [pc, #392]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8003f56:	430a      	orrs	r2, r1
 8003f58:	635a      	str	r2, [r3, #52]	; 0x34
 8003f5a:	e01e      	b.n	8003f9a <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003f5c:	4b60      	ldr	r3, [pc, #384]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8003f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f60:	4b5f      	ldr	r3, [pc, #380]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8003f62:	2104      	movs	r1, #4
 8003f64:	430a      	orrs	r2, r1
 8003f66:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003f68:	4b5d      	ldr	r3, [pc, #372]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8003f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f6c:	4b5c      	ldr	r3, [pc, #368]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8003f6e:	2101      	movs	r1, #1
 8003f70:	438a      	bics	r2, r1
 8003f72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f74:	f7fe fdb8 	bl	8002ae8 <HAL_GetTick>
 8003f78:	0003      	movs	r3, r0
 8003f7a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003f7c:	e008      	b.n	8003f90 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003f7e:	f7fe fdb3 	bl	8002ae8 <HAL_GetTick>
 8003f82:	0002      	movs	r2, r0
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e0a2      	b.n	80040d6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003f90:	4b53      	ldr	r3, [pc, #332]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8003f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f94:	2202      	movs	r2, #2
 8003f96:	4013      	ands	r3, r2
 8003f98:	d1f1      	bne.n	8003f7e <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d100      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x4ec>
 8003fa2:	e097      	b.n	80040d4 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fa4:	4b4e      	ldr	r3, [pc, #312]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	220c      	movs	r2, #12
 8003faa:	4013      	ands	r3, r2
 8003fac:	2b08      	cmp	r3, #8
 8003fae:	d100      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x4fa>
 8003fb0:	e06b      	b.n	800408a <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d14c      	bne.n	8004054 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fba:	4b49      	ldr	r3, [pc, #292]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	4b48      	ldr	r3, [pc, #288]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8003fc0:	494a      	ldr	r1, [pc, #296]	; (80040ec <HAL_RCC_OscConfig+0x634>)
 8003fc2:	400a      	ands	r2, r1
 8003fc4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc6:	f7fe fd8f 	bl	8002ae8 <HAL_GetTick>
 8003fca:	0003      	movs	r3, r0
 8003fcc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd0:	f7fe fd8a 	bl	8002ae8 <HAL_GetTick>
 8003fd4:	0002      	movs	r2, r0
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e079      	b.n	80040d6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fe2:	4b3f      	ldr	r3, [pc, #252]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	2380      	movs	r3, #128	; 0x80
 8003fe8:	049b      	lsls	r3, r3, #18
 8003fea:	4013      	ands	r3, r2
 8003fec:	d1f0      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fee:	4b3c      	ldr	r3, [pc, #240]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8003ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff2:	220f      	movs	r2, #15
 8003ff4:	4393      	bics	r3, r2
 8003ff6:	0019      	movs	r1, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ffc:	4b38      	ldr	r3, [pc, #224]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8003ffe:	430a      	orrs	r2, r1
 8004000:	62da      	str	r2, [r3, #44]	; 0x2c
 8004002:	4b37      	ldr	r3, [pc, #220]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	4a3a      	ldr	r2, [pc, #232]	; (80040f0 <HAL_RCC_OscConfig+0x638>)
 8004008:	4013      	ands	r3, r2
 800400a:	0019      	movs	r1, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	431a      	orrs	r2, r3
 8004016:	4b32      	ldr	r3, [pc, #200]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8004018:	430a      	orrs	r2, r1
 800401a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800401c:	4b30      	ldr	r3, [pc, #192]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	4b2f      	ldr	r3, [pc, #188]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8004022:	2180      	movs	r1, #128	; 0x80
 8004024:	0449      	lsls	r1, r1, #17
 8004026:	430a      	orrs	r2, r1
 8004028:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800402a:	f7fe fd5d 	bl	8002ae8 <HAL_GetTick>
 800402e:	0003      	movs	r3, r0
 8004030:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004034:	f7fe fd58 	bl	8002ae8 <HAL_GetTick>
 8004038:	0002      	movs	r2, r0
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e047      	b.n	80040d6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004046:	4b26      	ldr	r3, [pc, #152]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	2380      	movs	r3, #128	; 0x80
 800404c:	049b      	lsls	r3, r3, #18
 800404e:	4013      	ands	r3, r2
 8004050:	d0f0      	beq.n	8004034 <HAL_RCC_OscConfig+0x57c>
 8004052:	e03f      	b.n	80040d4 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004054:	4b22      	ldr	r3, [pc, #136]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	4b21      	ldr	r3, [pc, #132]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 800405a:	4924      	ldr	r1, [pc, #144]	; (80040ec <HAL_RCC_OscConfig+0x634>)
 800405c:	400a      	ands	r2, r1
 800405e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004060:	f7fe fd42 	bl	8002ae8 <HAL_GetTick>
 8004064:	0003      	movs	r3, r0
 8004066:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004068:	e008      	b.n	800407c <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800406a:	f7fe fd3d 	bl	8002ae8 <HAL_GetTick>
 800406e:	0002      	movs	r2, r0
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e02c      	b.n	80040d6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800407c:	4b18      	ldr	r3, [pc, #96]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	2380      	movs	r3, #128	; 0x80
 8004082:	049b      	lsls	r3, r3, #18
 8004084:	4013      	ands	r3, r2
 8004086:	d1f0      	bne.n	800406a <HAL_RCC_OscConfig+0x5b2>
 8004088:	e024      	b.n	80040d4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d101      	bne.n	8004096 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e01f      	b.n	80040d6 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004096:	4b12      	ldr	r3, [pc, #72]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800409c:	4b10      	ldr	r3, [pc, #64]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	23c0      	movs	r3, #192	; 0xc0
 80040a6:	025b      	lsls	r3, r3, #9
 80040a8:	401a      	ands	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d10e      	bne.n	80040d0 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	220f      	movs	r2, #15
 80040b6:	401a      	ands	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040bc:	429a      	cmp	r2, r3
 80040be:	d107      	bne.n	80040d0 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	23f0      	movs	r3, #240	; 0xf0
 80040c4:	039b      	lsls	r3, r3, #14
 80040c6:	401a      	ands	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d001      	beq.n	80040d4 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e000      	b.n	80040d6 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	0018      	movs	r0, r3
 80040d8:	46bd      	mov	sp, r7
 80040da:	b008      	add	sp, #32
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	46c0      	nop			; (mov r8, r8)
 80040e0:	40021000 	.word	0x40021000
 80040e4:	00001388 	.word	0x00001388
 80040e8:	efffffff 	.word	0xefffffff
 80040ec:	feffffff 	.word	0xfeffffff
 80040f0:	ffc27fff 	.word	0xffc27fff

080040f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e0b3      	b.n	8004270 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004108:	4b5b      	ldr	r3, [pc, #364]	; (8004278 <HAL_RCC_ClockConfig+0x184>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2201      	movs	r2, #1
 800410e:	4013      	ands	r3, r2
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d911      	bls.n	800413a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004116:	4b58      	ldr	r3, [pc, #352]	; (8004278 <HAL_RCC_ClockConfig+0x184>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2201      	movs	r2, #1
 800411c:	4393      	bics	r3, r2
 800411e:	0019      	movs	r1, r3
 8004120:	4b55      	ldr	r3, [pc, #340]	; (8004278 <HAL_RCC_ClockConfig+0x184>)
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	430a      	orrs	r2, r1
 8004126:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004128:	4b53      	ldr	r3, [pc, #332]	; (8004278 <HAL_RCC_ClockConfig+0x184>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2201      	movs	r2, #1
 800412e:	4013      	ands	r3, r2
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	429a      	cmp	r2, r3
 8004134:	d001      	beq.n	800413a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e09a      	b.n	8004270 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2202      	movs	r2, #2
 8004140:	4013      	ands	r3, r2
 8004142:	d015      	beq.n	8004170 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2204      	movs	r2, #4
 800414a:	4013      	ands	r3, r2
 800414c:	d006      	beq.n	800415c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800414e:	4b4b      	ldr	r3, [pc, #300]	; (800427c <HAL_RCC_ClockConfig+0x188>)
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	4b4a      	ldr	r3, [pc, #296]	; (800427c <HAL_RCC_ClockConfig+0x188>)
 8004154:	21e0      	movs	r1, #224	; 0xe0
 8004156:	00c9      	lsls	r1, r1, #3
 8004158:	430a      	orrs	r2, r1
 800415a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800415c:	4b47      	ldr	r3, [pc, #284]	; (800427c <HAL_RCC_ClockConfig+0x188>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	22f0      	movs	r2, #240	; 0xf0
 8004162:	4393      	bics	r3, r2
 8004164:	0019      	movs	r1, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	689a      	ldr	r2, [r3, #8]
 800416a:	4b44      	ldr	r3, [pc, #272]	; (800427c <HAL_RCC_ClockConfig+0x188>)
 800416c:	430a      	orrs	r2, r1
 800416e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2201      	movs	r2, #1
 8004176:	4013      	ands	r3, r2
 8004178:	d040      	beq.n	80041fc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d107      	bne.n	8004192 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004182:	4b3e      	ldr	r3, [pc, #248]	; (800427c <HAL_RCC_ClockConfig+0x188>)
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	2380      	movs	r3, #128	; 0x80
 8004188:	029b      	lsls	r3, r3, #10
 800418a:	4013      	ands	r3, r2
 800418c:	d114      	bne.n	80041b8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e06e      	b.n	8004270 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	2b02      	cmp	r3, #2
 8004198:	d107      	bne.n	80041aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800419a:	4b38      	ldr	r3, [pc, #224]	; (800427c <HAL_RCC_ClockConfig+0x188>)
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	2380      	movs	r3, #128	; 0x80
 80041a0:	049b      	lsls	r3, r3, #18
 80041a2:	4013      	ands	r3, r2
 80041a4:	d108      	bne.n	80041b8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e062      	b.n	8004270 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041aa:	4b34      	ldr	r3, [pc, #208]	; (800427c <HAL_RCC_ClockConfig+0x188>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2202      	movs	r2, #2
 80041b0:	4013      	ands	r3, r2
 80041b2:	d101      	bne.n	80041b8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e05b      	b.n	8004270 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041b8:	4b30      	ldr	r3, [pc, #192]	; (800427c <HAL_RCC_ClockConfig+0x188>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	2203      	movs	r2, #3
 80041be:	4393      	bics	r3, r2
 80041c0:	0019      	movs	r1, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	4b2d      	ldr	r3, [pc, #180]	; (800427c <HAL_RCC_ClockConfig+0x188>)
 80041c8:	430a      	orrs	r2, r1
 80041ca:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041cc:	f7fe fc8c 	bl	8002ae8 <HAL_GetTick>
 80041d0:	0003      	movs	r3, r0
 80041d2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041d4:	e009      	b.n	80041ea <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041d6:	f7fe fc87 	bl	8002ae8 <HAL_GetTick>
 80041da:	0002      	movs	r2, r0
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	4a27      	ldr	r2, [pc, #156]	; (8004280 <HAL_RCC_ClockConfig+0x18c>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e042      	b.n	8004270 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ea:	4b24      	ldr	r3, [pc, #144]	; (800427c <HAL_RCC_ClockConfig+0x188>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	220c      	movs	r2, #12
 80041f0:	401a      	ands	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d1ec      	bne.n	80041d6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041fc:	4b1e      	ldr	r3, [pc, #120]	; (8004278 <HAL_RCC_ClockConfig+0x184>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2201      	movs	r2, #1
 8004202:	4013      	ands	r3, r2
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	429a      	cmp	r2, r3
 8004208:	d211      	bcs.n	800422e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800420a:	4b1b      	ldr	r3, [pc, #108]	; (8004278 <HAL_RCC_ClockConfig+0x184>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2201      	movs	r2, #1
 8004210:	4393      	bics	r3, r2
 8004212:	0019      	movs	r1, r3
 8004214:	4b18      	ldr	r3, [pc, #96]	; (8004278 <HAL_RCC_ClockConfig+0x184>)
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	430a      	orrs	r2, r1
 800421a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800421c:	4b16      	ldr	r3, [pc, #88]	; (8004278 <HAL_RCC_ClockConfig+0x184>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2201      	movs	r2, #1
 8004222:	4013      	ands	r3, r2
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	429a      	cmp	r2, r3
 8004228:	d001      	beq.n	800422e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e020      	b.n	8004270 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2204      	movs	r2, #4
 8004234:	4013      	ands	r3, r2
 8004236:	d009      	beq.n	800424c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004238:	4b10      	ldr	r3, [pc, #64]	; (800427c <HAL_RCC_ClockConfig+0x188>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	4a11      	ldr	r2, [pc, #68]	; (8004284 <HAL_RCC_ClockConfig+0x190>)
 800423e:	4013      	ands	r3, r2
 8004240:	0019      	movs	r1, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68da      	ldr	r2, [r3, #12]
 8004246:	4b0d      	ldr	r3, [pc, #52]	; (800427c <HAL_RCC_ClockConfig+0x188>)
 8004248:	430a      	orrs	r2, r1
 800424a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800424c:	f000 f820 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 8004250:	0001      	movs	r1, r0
 8004252:	4b0a      	ldr	r3, [pc, #40]	; (800427c <HAL_RCC_ClockConfig+0x188>)
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	091b      	lsrs	r3, r3, #4
 8004258:	220f      	movs	r2, #15
 800425a:	4013      	ands	r3, r2
 800425c:	4a0a      	ldr	r2, [pc, #40]	; (8004288 <HAL_RCC_ClockConfig+0x194>)
 800425e:	5cd3      	ldrb	r3, [r2, r3]
 8004260:	000a      	movs	r2, r1
 8004262:	40da      	lsrs	r2, r3
 8004264:	4b09      	ldr	r3, [pc, #36]	; (800428c <HAL_RCC_ClockConfig+0x198>)
 8004266:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004268:	2000      	movs	r0, #0
 800426a:	f7fe fbf7 	bl	8002a5c <HAL_InitTick>
  
  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	0018      	movs	r0, r3
 8004272:	46bd      	mov	sp, r7
 8004274:	b004      	add	sp, #16
 8004276:	bd80      	pop	{r7, pc}
 8004278:	40022000 	.word	0x40022000
 800427c:	40021000 	.word	0x40021000
 8004280:	00001388 	.word	0x00001388
 8004284:	fffff8ff 	.word	0xfffff8ff
 8004288:	08005770 	.word	0x08005770
 800428c:	20000010 	.word	0x20000010

08004290 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004296:	2300      	movs	r3, #0
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	2300      	movs	r3, #0
 800429c:	60bb      	str	r3, [r7, #8]
 800429e:	2300      	movs	r3, #0
 80042a0:	617b      	str	r3, [r7, #20]
 80042a2:	2300      	movs	r3, #0
 80042a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80042a6:	2300      	movs	r3, #0
 80042a8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80042aa:	4b21      	ldr	r3, [pc, #132]	; (8004330 <HAL_RCC_GetSysClockFreq+0xa0>)
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	220c      	movs	r2, #12
 80042b4:	4013      	ands	r3, r2
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	d002      	beq.n	80042c0 <HAL_RCC_GetSysClockFreq+0x30>
 80042ba:	2b08      	cmp	r3, #8
 80042bc:	d003      	beq.n	80042c6 <HAL_RCC_GetSysClockFreq+0x36>
 80042be:	e02e      	b.n	800431e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042c0:	4b1c      	ldr	r3, [pc, #112]	; (8004334 <HAL_RCC_GetSysClockFreq+0xa4>)
 80042c2:	613b      	str	r3, [r7, #16]
      break;
 80042c4:	e02e      	b.n	8004324 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	0c9b      	lsrs	r3, r3, #18
 80042ca:	220f      	movs	r2, #15
 80042cc:	4013      	ands	r3, r2
 80042ce:	4a1a      	ldr	r2, [pc, #104]	; (8004338 <HAL_RCC_GetSysClockFreq+0xa8>)
 80042d0:	5cd3      	ldrb	r3, [r2, r3]
 80042d2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80042d4:	4b16      	ldr	r3, [pc, #88]	; (8004330 <HAL_RCC_GetSysClockFreq+0xa0>)
 80042d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d8:	220f      	movs	r2, #15
 80042da:	4013      	ands	r3, r2
 80042dc:	4a17      	ldr	r2, [pc, #92]	; (800433c <HAL_RCC_GetSysClockFreq+0xac>)
 80042de:	5cd3      	ldrb	r3, [r2, r3]
 80042e0:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	23c0      	movs	r3, #192	; 0xc0
 80042e6:	025b      	lsls	r3, r3, #9
 80042e8:	401a      	ands	r2, r3
 80042ea:	2380      	movs	r3, #128	; 0x80
 80042ec:	025b      	lsls	r3, r3, #9
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d109      	bne.n	8004306 <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80042f2:	68b9      	ldr	r1, [r7, #8]
 80042f4:	480f      	ldr	r0, [pc, #60]	; (8004334 <HAL_RCC_GetSysClockFreq+0xa4>)
 80042f6:	f7fb ff07 	bl	8000108 <__udivsi3>
 80042fa:	0003      	movs	r3, r0
 80042fc:	001a      	movs	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4353      	muls	r3, r2
 8004302:	617b      	str	r3, [r7, #20]
 8004304:	e008      	b.n	8004318 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004306:	68b9      	ldr	r1, [r7, #8]
 8004308:	480a      	ldr	r0, [pc, #40]	; (8004334 <HAL_RCC_GetSysClockFreq+0xa4>)
 800430a:	f7fb fefd 	bl	8000108 <__udivsi3>
 800430e:	0003      	movs	r3, r0
 8004310:	001a      	movs	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4353      	muls	r3, r2
 8004316:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	613b      	str	r3, [r7, #16]
      break;
 800431c:	e002      	b.n	8004324 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800431e:	4b05      	ldr	r3, [pc, #20]	; (8004334 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004320:	613b      	str	r3, [r7, #16]
      break;
 8004322:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004324:	693b      	ldr	r3, [r7, #16]
}
 8004326:	0018      	movs	r0, r3
 8004328:	46bd      	mov	sp, r7
 800432a:	b006      	add	sp, #24
 800432c:	bd80      	pop	{r7, pc}
 800432e:	46c0      	nop			; (mov r8, r8)
 8004330:	40021000 	.word	0x40021000
 8004334:	007a1200 	.word	0x007a1200
 8004338:	08005780 	.word	0x08005780
 800433c:	08005790 	.word	0x08005790

08004340 <memset>:
 8004340:	0003      	movs	r3, r0
 8004342:	1882      	adds	r2, r0, r2
 8004344:	4293      	cmp	r3, r2
 8004346:	d100      	bne.n	800434a <memset+0xa>
 8004348:	4770      	bx	lr
 800434a:	7019      	strb	r1, [r3, #0]
 800434c:	3301      	adds	r3, #1
 800434e:	e7f9      	b.n	8004344 <memset+0x4>

08004350 <__errno>:
 8004350:	4b01      	ldr	r3, [pc, #4]	; (8004358 <__errno+0x8>)
 8004352:	6818      	ldr	r0, [r3, #0]
 8004354:	4770      	bx	lr
 8004356:	46c0      	nop			; (mov r8, r8)
 8004358:	20000068 	.word	0x20000068

0800435c <__libc_init_array>:
 800435c:	b570      	push	{r4, r5, r6, lr}
 800435e:	2600      	movs	r6, #0
 8004360:	4c0c      	ldr	r4, [pc, #48]	; (8004394 <__libc_init_array+0x38>)
 8004362:	4d0d      	ldr	r5, [pc, #52]	; (8004398 <__libc_init_array+0x3c>)
 8004364:	1b64      	subs	r4, r4, r5
 8004366:	10a4      	asrs	r4, r4, #2
 8004368:	42a6      	cmp	r6, r4
 800436a:	d109      	bne.n	8004380 <__libc_init_array+0x24>
 800436c:	2600      	movs	r6, #0
 800436e:	f001 f993 	bl	8005698 <_init>
 8004372:	4c0a      	ldr	r4, [pc, #40]	; (800439c <__libc_init_array+0x40>)
 8004374:	4d0a      	ldr	r5, [pc, #40]	; (80043a0 <__libc_init_array+0x44>)
 8004376:	1b64      	subs	r4, r4, r5
 8004378:	10a4      	asrs	r4, r4, #2
 800437a:	42a6      	cmp	r6, r4
 800437c:	d105      	bne.n	800438a <__libc_init_array+0x2e>
 800437e:	bd70      	pop	{r4, r5, r6, pc}
 8004380:	00b3      	lsls	r3, r6, #2
 8004382:	58eb      	ldr	r3, [r5, r3]
 8004384:	4798      	blx	r3
 8004386:	3601      	adds	r6, #1
 8004388:	e7ee      	b.n	8004368 <__libc_init_array+0xc>
 800438a:	00b3      	lsls	r3, r6, #2
 800438c:	58eb      	ldr	r3, [r5, r3]
 800438e:	4798      	blx	r3
 8004390:	3601      	adds	r6, #1
 8004392:	e7f2      	b.n	800437a <__libc_init_array+0x1e>
 8004394:	080057d8 	.word	0x080057d8
 8004398:	080057d8 	.word	0x080057d8
 800439c:	080057dc 	.word	0x080057dc
 80043a0:	080057d8 	.word	0x080057d8

080043a4 <log10>:
 80043a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a6:	0004      	movs	r4, r0
 80043a8:	000d      	movs	r5, r1
 80043aa:	f000 f8ad 	bl	8004508 <__ieee754_log10>
 80043ae:	0022      	movs	r2, r4
 80043b0:	0006      	movs	r6, r0
 80043b2:	000f      	movs	r7, r1
 80043b4:	002b      	movs	r3, r5
 80043b6:	0020      	movs	r0, r4
 80043b8:	0029      	movs	r1, r5
 80043ba:	f7fd ff59 	bl	8002270 <__aeabi_dcmpun>
 80043be:	2800      	cmp	r0, #0
 80043c0:	d115      	bne.n	80043ee <log10+0x4a>
 80043c2:	2200      	movs	r2, #0
 80043c4:	2300      	movs	r3, #0
 80043c6:	0020      	movs	r0, r4
 80043c8:	0029      	movs	r1, r5
 80043ca:	f7fb ff49 	bl	8000260 <__aeabi_dcmple>
 80043ce:	2800      	cmp	r0, #0
 80043d0:	d00d      	beq.n	80043ee <log10+0x4a>
 80043d2:	2200      	movs	r2, #0
 80043d4:	2300      	movs	r3, #0
 80043d6:	0020      	movs	r0, r4
 80043d8:	0029      	movs	r1, r5
 80043da:	f7fb ff31 	bl	8000240 <__aeabi_dcmpeq>
 80043de:	2800      	cmp	r0, #0
 80043e0:	d008      	beq.n	80043f4 <log10+0x50>
 80043e2:	f7ff ffb5 	bl	8004350 <__errno>
 80043e6:	2322      	movs	r3, #34	; 0x22
 80043e8:	2600      	movs	r6, #0
 80043ea:	4f07      	ldr	r7, [pc, #28]	; (8004408 <log10+0x64>)
 80043ec:	6003      	str	r3, [r0, #0]
 80043ee:	0030      	movs	r0, r6
 80043f0:	0039      	movs	r1, r7
 80043f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043f4:	f7ff ffac 	bl	8004350 <__errno>
 80043f8:	2321      	movs	r3, #33	; 0x21
 80043fa:	6003      	str	r3, [r0, #0]
 80043fc:	4803      	ldr	r0, [pc, #12]	; (800440c <log10+0x68>)
 80043fe:	f000 f87d 	bl	80044fc <nan>
 8004402:	0006      	movs	r6, r0
 8004404:	000f      	movs	r7, r1
 8004406:	e7f2      	b.n	80043ee <log10+0x4a>
 8004408:	fff00000 	.word	0xfff00000
 800440c:	080057a0 	.word	0x080057a0

08004410 <pow>:
 8004410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004412:	0014      	movs	r4, r2
 8004414:	001d      	movs	r5, r3
 8004416:	9000      	str	r0, [sp, #0]
 8004418:	9101      	str	r1, [sp, #4]
 800441a:	f000 f8f7 	bl	800460c <__ieee754_pow>
 800441e:	0022      	movs	r2, r4
 8004420:	0006      	movs	r6, r0
 8004422:	000f      	movs	r7, r1
 8004424:	002b      	movs	r3, r5
 8004426:	0020      	movs	r0, r4
 8004428:	0029      	movs	r1, r5
 800442a:	f7fd ff21 	bl	8002270 <__aeabi_dcmpun>
 800442e:	2800      	cmp	r0, #0
 8004430:	d13f      	bne.n	80044b2 <pow+0xa2>
 8004432:	9800      	ldr	r0, [sp, #0]
 8004434:	9901      	ldr	r1, [sp, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	2300      	movs	r3, #0
 800443a:	f7fb ff01 	bl	8000240 <__aeabi_dcmpeq>
 800443e:	2800      	cmp	r0, #0
 8004440:	d019      	beq.n	8004476 <pow+0x66>
 8004442:	2200      	movs	r2, #0
 8004444:	2300      	movs	r3, #0
 8004446:	0020      	movs	r0, r4
 8004448:	0029      	movs	r1, r5
 800444a:	f7fb fef9 	bl	8000240 <__aeabi_dcmpeq>
 800444e:	2800      	cmp	r0, #0
 8004450:	d146      	bne.n	80044e0 <pow+0xd0>
 8004452:	0020      	movs	r0, r4
 8004454:	0029      	movs	r1, r5
 8004456:	f000 f849 	bl	80044ec <finite>
 800445a:	2800      	cmp	r0, #0
 800445c:	d029      	beq.n	80044b2 <pow+0xa2>
 800445e:	2200      	movs	r2, #0
 8004460:	2300      	movs	r3, #0
 8004462:	0020      	movs	r0, r4
 8004464:	0029      	movs	r1, r5
 8004466:	f7fb fef1 	bl	800024c <__aeabi_dcmplt>
 800446a:	2800      	cmp	r0, #0
 800446c:	d021      	beq.n	80044b2 <pow+0xa2>
 800446e:	f7ff ff6f 	bl	8004350 <__errno>
 8004472:	2322      	movs	r3, #34	; 0x22
 8004474:	e01c      	b.n	80044b0 <pow+0xa0>
 8004476:	0030      	movs	r0, r6
 8004478:	0039      	movs	r1, r7
 800447a:	f000 f837 	bl	80044ec <finite>
 800447e:	2800      	cmp	r0, #0
 8004480:	d11b      	bne.n	80044ba <pow+0xaa>
 8004482:	9800      	ldr	r0, [sp, #0]
 8004484:	9901      	ldr	r1, [sp, #4]
 8004486:	f000 f831 	bl	80044ec <finite>
 800448a:	2800      	cmp	r0, #0
 800448c:	d015      	beq.n	80044ba <pow+0xaa>
 800448e:	0020      	movs	r0, r4
 8004490:	0029      	movs	r1, r5
 8004492:	f000 f82b 	bl	80044ec <finite>
 8004496:	2800      	cmp	r0, #0
 8004498:	d00f      	beq.n	80044ba <pow+0xaa>
 800449a:	0032      	movs	r2, r6
 800449c:	003b      	movs	r3, r7
 800449e:	0030      	movs	r0, r6
 80044a0:	0039      	movs	r1, r7
 80044a2:	f7fd fee5 	bl	8002270 <__aeabi_dcmpun>
 80044a6:	2800      	cmp	r0, #0
 80044a8:	d0e1      	beq.n	800446e <pow+0x5e>
 80044aa:	f7ff ff51 	bl	8004350 <__errno>
 80044ae:	2321      	movs	r3, #33	; 0x21
 80044b0:	6003      	str	r3, [r0, #0]
 80044b2:	0030      	movs	r0, r6
 80044b4:	0039      	movs	r1, r7
 80044b6:	b003      	add	sp, #12
 80044b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044ba:	2200      	movs	r2, #0
 80044bc:	2300      	movs	r3, #0
 80044be:	0030      	movs	r0, r6
 80044c0:	0039      	movs	r1, r7
 80044c2:	f7fb febd 	bl	8000240 <__aeabi_dcmpeq>
 80044c6:	2800      	cmp	r0, #0
 80044c8:	d0f3      	beq.n	80044b2 <pow+0xa2>
 80044ca:	9800      	ldr	r0, [sp, #0]
 80044cc:	9901      	ldr	r1, [sp, #4]
 80044ce:	f000 f80d 	bl	80044ec <finite>
 80044d2:	2800      	cmp	r0, #0
 80044d4:	d0ed      	beq.n	80044b2 <pow+0xa2>
 80044d6:	0020      	movs	r0, r4
 80044d8:	0029      	movs	r1, r5
 80044da:	f000 f807 	bl	80044ec <finite>
 80044de:	e7c4      	b.n	800446a <pow+0x5a>
 80044e0:	2600      	movs	r6, #0
 80044e2:	4f01      	ldr	r7, [pc, #4]	; (80044e8 <pow+0xd8>)
 80044e4:	e7e5      	b.n	80044b2 <pow+0xa2>
 80044e6:	46c0      	nop			; (mov r8, r8)
 80044e8:	3ff00000 	.word	0x3ff00000

080044ec <finite>:
 80044ec:	4b02      	ldr	r3, [pc, #8]	; (80044f8 <finite+0xc>)
 80044ee:	0048      	lsls	r0, r1, #1
 80044f0:	0840      	lsrs	r0, r0, #1
 80044f2:	18c0      	adds	r0, r0, r3
 80044f4:	0fc0      	lsrs	r0, r0, #31
 80044f6:	4770      	bx	lr
 80044f8:	80100000 	.word	0x80100000

080044fc <nan>:
 80044fc:	2000      	movs	r0, #0
 80044fe:	4901      	ldr	r1, [pc, #4]	; (8004504 <nan+0x8>)
 8004500:	4770      	bx	lr
 8004502:	46c0      	nop			; (mov r8, r8)
 8004504:	7ff80000 	.word	0x7ff80000

08004508 <__ieee754_log10>:
 8004508:	2280      	movs	r2, #128	; 0x80
 800450a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800450c:	000b      	movs	r3, r1
 800450e:	0004      	movs	r4, r0
 8004510:	000d      	movs	r5, r1
 8004512:	b085      	sub	sp, #20
 8004514:	0352      	lsls	r2, r2, #13
 8004516:	4291      	cmp	r1, r2
 8004518:	da26      	bge.n	8004568 <__ieee754_log10+0x60>
 800451a:	004a      	lsls	r2, r1, #1
 800451c:	0852      	lsrs	r2, r2, #1
 800451e:	4302      	orrs	r2, r0
 8004520:	d107      	bne.n	8004532 <__ieee754_log10+0x2a>
 8004522:	2200      	movs	r2, #0
 8004524:	2300      	movs	r3, #0
 8004526:	2000      	movs	r0, #0
 8004528:	492d      	ldr	r1, [pc, #180]	; (80045e0 <__ieee754_log10+0xd8>)
 800452a:	f7fc fc63 	bl	8000df4 <__aeabi_ddiv>
 800452e:	b005      	add	sp, #20
 8004530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004532:	2900      	cmp	r1, #0
 8004534:	da05      	bge.n	8004542 <__ieee754_log10+0x3a>
 8004536:	0002      	movs	r2, r0
 8004538:	f7fd fb18 	bl	8001b6c <__aeabi_dsub>
 800453c:	2200      	movs	r2, #0
 800453e:	2300      	movs	r3, #0
 8004540:	e7f3      	b.n	800452a <__ieee754_log10+0x22>
 8004542:	2200      	movs	r2, #0
 8004544:	4b27      	ldr	r3, [pc, #156]	; (80045e4 <__ieee754_log10+0xdc>)
 8004546:	f7fd f84f 	bl	80015e8 <__aeabi_dmul>
 800454a:	2236      	movs	r2, #54	; 0x36
 800454c:	0004      	movs	r4, r0
 800454e:	000d      	movs	r5, r1
 8004550:	000b      	movs	r3, r1
 8004552:	4252      	negs	r2, r2
 8004554:	4924      	ldr	r1, [pc, #144]	; (80045e8 <__ieee754_log10+0xe0>)
 8004556:	428b      	cmp	r3, r1
 8004558:	dd08      	ble.n	800456c <__ieee754_log10+0x64>
 800455a:	0022      	movs	r2, r4
 800455c:	002b      	movs	r3, r5
 800455e:	0020      	movs	r0, r4
 8004560:	0029      	movs	r1, r5
 8004562:	f7fc f8e7 	bl	8000734 <__aeabi_dadd>
 8004566:	e7e2      	b.n	800452e <__ieee754_log10+0x26>
 8004568:	2200      	movs	r2, #0
 800456a:	e7f3      	b.n	8004554 <__ieee754_log10+0x4c>
 800456c:	491f      	ldr	r1, [pc, #124]	; (80045ec <__ieee754_log10+0xe4>)
 800456e:	1518      	asrs	r0, r3, #20
 8004570:	1840      	adds	r0, r0, r1
 8004572:	1880      	adds	r0, r0, r2
 8004574:	0fc2      	lsrs	r2, r0, #31
 8004576:	031b      	lsls	r3, r3, #12
 8004578:	0b1b      	lsrs	r3, r3, #12
 800457a:	1880      	adds	r0, r0, r2
 800457c:	9203      	str	r2, [sp, #12]
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	f7fd fe94 	bl	80022ac <__aeabi_i2d>
 8004584:	9a03      	ldr	r2, [sp, #12]
 8004586:	4b1a      	ldr	r3, [pc, #104]	; (80045f0 <__ieee754_log10+0xe8>)
 8004588:	0006      	movs	r6, r0
 800458a:	1a9b      	subs	r3, r3, r2
 800458c:	9a00      	ldr	r2, [sp, #0]
 800458e:	051b      	lsls	r3, r3, #20
 8004590:	431a      	orrs	r2, r3
 8004592:	000f      	movs	r7, r1
 8004594:	0020      	movs	r0, r4
 8004596:	0011      	movs	r1, r2
 8004598:	f000 fece 	bl	8005338 <__ieee754_log>
 800459c:	4a15      	ldr	r2, [pc, #84]	; (80045f4 <__ieee754_log10+0xec>)
 800459e:	0004      	movs	r4, r0
 80045a0:	000d      	movs	r5, r1
 80045a2:	4b15      	ldr	r3, [pc, #84]	; (80045f8 <__ieee754_log10+0xf0>)
 80045a4:	0030      	movs	r0, r6
 80045a6:	0039      	movs	r1, r7
 80045a8:	f7fd f81e 	bl	80015e8 <__aeabi_dmul>
 80045ac:	4a13      	ldr	r2, [pc, #76]	; (80045fc <__ieee754_log10+0xf4>)
 80045ae:	9000      	str	r0, [sp, #0]
 80045b0:	9101      	str	r1, [sp, #4]
 80045b2:	4b13      	ldr	r3, [pc, #76]	; (8004600 <__ieee754_log10+0xf8>)
 80045b4:	0020      	movs	r0, r4
 80045b6:	0029      	movs	r1, r5
 80045b8:	f7fd f816 	bl	80015e8 <__aeabi_dmul>
 80045bc:	0002      	movs	r2, r0
 80045be:	000b      	movs	r3, r1
 80045c0:	9800      	ldr	r0, [sp, #0]
 80045c2:	9901      	ldr	r1, [sp, #4]
 80045c4:	f7fc f8b6 	bl	8000734 <__aeabi_dadd>
 80045c8:	4a0e      	ldr	r2, [pc, #56]	; (8004604 <__ieee754_log10+0xfc>)
 80045ca:	4b0f      	ldr	r3, [pc, #60]	; (8004608 <__ieee754_log10+0x100>)
 80045cc:	0004      	movs	r4, r0
 80045ce:	000d      	movs	r5, r1
 80045d0:	0030      	movs	r0, r6
 80045d2:	0039      	movs	r1, r7
 80045d4:	f7fd f808 	bl	80015e8 <__aeabi_dmul>
 80045d8:	0002      	movs	r2, r0
 80045da:	000b      	movs	r3, r1
 80045dc:	e7bf      	b.n	800455e <__ieee754_log10+0x56>
 80045de:	46c0      	nop			; (mov r8, r8)
 80045e0:	c3500000 	.word	0xc3500000
 80045e4:	43500000 	.word	0x43500000
 80045e8:	7fefffff 	.word	0x7fefffff
 80045ec:	fffffc01 	.word	0xfffffc01
 80045f0:	000003ff 	.word	0x000003ff
 80045f4:	11f12b36 	.word	0x11f12b36
 80045f8:	3d59fef3 	.word	0x3d59fef3
 80045fc:	1526e50e 	.word	0x1526e50e
 8004600:	3fdbcb7b 	.word	0x3fdbcb7b
 8004604:	509f6000 	.word	0x509f6000
 8004608:	3fd34413 	.word	0x3fd34413

0800460c <__ieee754_pow>:
 800460c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800460e:	b095      	sub	sp, #84	; 0x54
 8004610:	9202      	str	r2, [sp, #8]
 8004612:	9303      	str	r3, [sp, #12]
 8004614:	9b03      	ldr	r3, [sp, #12]
 8004616:	9a03      	ldr	r2, [sp, #12]
 8004618:	9304      	str	r3, [sp, #16]
 800461a:	9b02      	ldr	r3, [sp, #8]
 800461c:	0056      	lsls	r6, r2, #1
 800461e:	001a      	movs	r2, r3
 8004620:	0876      	lsrs	r6, r6, #1
 8004622:	0007      	movs	r7, r0
 8004624:	000d      	movs	r5, r1
 8004626:	4332      	orrs	r2, r6
 8004628:	d119      	bne.n	800465e <__ieee754_pow+0x52>
 800462a:	2180      	movs	r1, #128	; 0x80
 800462c:	0309      	lsls	r1, r1, #12
 800462e:	4069      	eors	r1, r5
 8004630:	0002      	movs	r2, r0
 8004632:	000b      	movs	r3, r1
 8004634:	1892      	adds	r2, r2, r2
 8004636:	415b      	adcs	r3, r3
 8004638:	4989      	ldr	r1, [pc, #548]	; (8004860 <__ieee754_pow+0x254>)
 800463a:	428b      	cmp	r3, r1
 800463c:	d806      	bhi.n	800464c <__ieee754_pow+0x40>
 800463e:	d001      	beq.n	8004644 <__ieee754_pow+0x38>
 8004640:	f000 fcb6 	bl	8004fb0 <__ieee754_pow+0x9a4>
 8004644:	2a00      	cmp	r2, #0
 8004646:	d101      	bne.n	800464c <__ieee754_pow+0x40>
 8004648:	f000 fcb2 	bl	8004fb0 <__ieee754_pow+0x9a4>
 800464c:	9a02      	ldr	r2, [sp, #8]
 800464e:	9b03      	ldr	r3, [sp, #12]
 8004650:	0038      	movs	r0, r7
 8004652:	0029      	movs	r1, r5
 8004654:	f7fc f86e 	bl	8000734 <__aeabi_dadd>
 8004658:	9000      	str	r0, [sp, #0]
 800465a:	9101      	str	r1, [sp, #4]
 800465c:	e0ad      	b.n	80047ba <__ieee754_pow+0x1ae>
 800465e:	4a81      	ldr	r2, [pc, #516]	; (8004864 <__ieee754_pow+0x258>)
 8004660:	004c      	lsls	r4, r1, #1
 8004662:	9108      	str	r1, [sp, #32]
 8004664:	9000      	str	r0, [sp, #0]
 8004666:	0864      	lsrs	r4, r4, #1
 8004668:	4294      	cmp	r4, r2
 800466a:	dc08      	bgt.n	800467e <__ieee754_pow+0x72>
 800466c:	d101      	bne.n	8004672 <__ieee754_pow+0x66>
 800466e:	2800      	cmp	r0, #0
 8004670:	d1ec      	bne.n	800464c <__ieee754_pow+0x40>
 8004672:	4a7c      	ldr	r2, [pc, #496]	; (8004864 <__ieee754_pow+0x258>)
 8004674:	4296      	cmp	r6, r2
 8004676:	dc02      	bgt.n	800467e <__ieee754_pow+0x72>
 8004678:	d10c      	bne.n	8004694 <__ieee754_pow+0x88>
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00a      	beq.n	8004694 <__ieee754_pow+0x88>
 800467e:	4b7a      	ldr	r3, [pc, #488]	; (8004868 <__ieee754_pow+0x25c>)
 8004680:	18eb      	adds	r3, r5, r3
 8004682:	433b      	orrs	r3, r7
 8004684:	d1e2      	bne.n	800464c <__ieee754_pow+0x40>
 8004686:	2180      	movs	r1, #128	; 0x80
 8004688:	9803      	ldr	r0, [sp, #12]
 800468a:	0309      	lsls	r1, r1, #12
 800468c:	4048      	eors	r0, r1
 800468e:	0003      	movs	r3, r0
 8004690:	9a02      	ldr	r2, [sp, #8]
 8004692:	e7cf      	b.n	8004634 <__ieee754_pow+0x28>
 8004694:	2200      	movs	r2, #0
 8004696:	9206      	str	r2, [sp, #24]
 8004698:	2d00      	cmp	r5, #0
 800469a:	da69      	bge.n	8004770 <__ieee754_pow+0x164>
 800469c:	4a73      	ldr	r2, [pc, #460]	; (800486c <__ieee754_pow+0x260>)
 800469e:	4296      	cmp	r6, r2
 80046a0:	dc64      	bgt.n	800476c <__ieee754_pow+0x160>
 80046a2:	4a73      	ldr	r2, [pc, #460]	; (8004870 <__ieee754_pow+0x264>)
 80046a4:	4296      	cmp	r6, r2
 80046a6:	dd11      	ble.n	80046cc <__ieee754_pow+0xc0>
 80046a8:	4972      	ldr	r1, [pc, #456]	; (8004874 <__ieee754_pow+0x268>)
 80046aa:	1532      	asrs	r2, r6, #20
 80046ac:	1852      	adds	r2, r2, r1
 80046ae:	2a14      	cmp	r2, #20
 80046b0:	dd3c      	ble.n	800472c <__ieee754_pow+0x120>
 80046b2:	2134      	movs	r1, #52	; 0x34
 80046b4:	1a89      	subs	r1, r1, r2
 80046b6:	9a02      	ldr	r2, [sp, #8]
 80046b8:	40ca      	lsrs	r2, r1
 80046ba:	0010      	movs	r0, r2
 80046bc:	4088      	lsls	r0, r1
 80046be:	4298      	cmp	r0, r3
 80046c0:	d104      	bne.n	80046cc <__ieee754_pow+0xc0>
 80046c2:	2101      	movs	r1, #1
 80046c4:	400a      	ands	r2, r1
 80046c6:	1849      	adds	r1, r1, r1
 80046c8:	1a8a      	subs	r2, r1, r2
 80046ca:	9206      	str	r2, [sp, #24]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d03c      	beq.n	800474a <__ieee754_pow+0x13e>
 80046d0:	0038      	movs	r0, r7
 80046d2:	0029      	movs	r1, r5
 80046d4:	f000 fca4 	bl	8005020 <fabs>
 80046d8:	9000      	str	r0, [sp, #0]
 80046da:	9101      	str	r1, [sp, #4]
 80046dc:	2f00      	cmp	r7, #0
 80046de:	d000      	beq.n	80046e2 <__ieee754_pow+0xd6>
 80046e0:	e094      	b.n	800480c <__ieee754_pow+0x200>
 80046e2:	2c00      	cmp	r4, #0
 80046e4:	d005      	beq.n	80046f2 <__ieee754_pow+0xe6>
 80046e6:	4a64      	ldr	r2, [pc, #400]	; (8004878 <__ieee754_pow+0x26c>)
 80046e8:	00ab      	lsls	r3, r5, #2
 80046ea:	089b      	lsrs	r3, r3, #2
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d000      	beq.n	80046f2 <__ieee754_pow+0xe6>
 80046f0:	e08c      	b.n	800480c <__ieee754_pow+0x200>
 80046f2:	9b04      	ldr	r3, [sp, #16]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	da07      	bge.n	8004708 <__ieee754_pow+0xfc>
 80046f8:	9a00      	ldr	r2, [sp, #0]
 80046fa:	9b01      	ldr	r3, [sp, #4]
 80046fc:	2000      	movs	r0, #0
 80046fe:	495e      	ldr	r1, [pc, #376]	; (8004878 <__ieee754_pow+0x26c>)
 8004700:	f7fc fb78 	bl	8000df4 <__aeabi_ddiv>
 8004704:	9000      	str	r0, [sp, #0]
 8004706:	9101      	str	r1, [sp, #4]
 8004708:	9b08      	ldr	r3, [sp, #32]
 800470a:	2b00      	cmp	r3, #0
 800470c:	da55      	bge.n	80047ba <__ieee754_pow+0x1ae>
 800470e:	4b56      	ldr	r3, [pc, #344]	; (8004868 <__ieee754_pow+0x25c>)
 8004710:	18e4      	adds	r4, r4, r3
 8004712:	9b06      	ldr	r3, [sp, #24]
 8004714:	431c      	orrs	r4, r3
 8004716:	d000      	beq.n	800471a <__ieee754_pow+0x10e>
 8004718:	e06c      	b.n	80047f4 <__ieee754_pow+0x1e8>
 800471a:	9a00      	ldr	r2, [sp, #0]
 800471c:	9b01      	ldr	r3, [sp, #4]
 800471e:	0010      	movs	r0, r2
 8004720:	0019      	movs	r1, r3
 8004722:	f7fd fa23 	bl	8001b6c <__aeabi_dsub>
 8004726:	0002      	movs	r2, r0
 8004728:	000b      	movs	r3, r1
 800472a:	e01c      	b.n	8004766 <__ieee754_pow+0x15a>
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1cf      	bne.n	80046d0 <__ieee754_pow+0xc4>
 8004730:	3314      	adds	r3, #20
 8004732:	1a9a      	subs	r2, r3, r2
 8004734:	0033      	movs	r3, r6
 8004736:	4113      	asrs	r3, r2
 8004738:	0019      	movs	r1, r3
 800473a:	4091      	lsls	r1, r2
 800473c:	42b1      	cmp	r1, r6
 800473e:	d104      	bne.n	800474a <__ieee754_pow+0x13e>
 8004740:	2201      	movs	r2, #1
 8004742:	4013      	ands	r3, r2
 8004744:	1892      	adds	r2, r2, r2
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	9306      	str	r3, [sp, #24]
 800474a:	4b4b      	ldr	r3, [pc, #300]	; (8004878 <__ieee754_pow+0x26c>)
 800474c:	429e      	cmp	r6, r3
 800474e:	d138      	bne.n	80047c2 <__ieee754_pow+0x1b6>
 8004750:	0038      	movs	r0, r7
 8004752:	0029      	movs	r1, r5
 8004754:	9b04      	ldr	r3, [sp, #16]
 8004756:	9000      	str	r0, [sp, #0]
 8004758:	9101      	str	r1, [sp, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	da2d      	bge.n	80047ba <__ieee754_pow+0x1ae>
 800475e:	003a      	movs	r2, r7
 8004760:	002b      	movs	r3, r5
 8004762:	2000      	movs	r0, #0
 8004764:	4944      	ldr	r1, [pc, #272]	; (8004878 <__ieee754_pow+0x26c>)
 8004766:	f7fc fb45 	bl	8000df4 <__aeabi_ddiv>
 800476a:	e775      	b.n	8004658 <__ieee754_pow+0x4c>
 800476c:	2202      	movs	r2, #2
 800476e:	9206      	str	r2, [sp, #24]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1ad      	bne.n	80046d0 <__ieee754_pow+0xc4>
 8004774:	4b3b      	ldr	r3, [pc, #236]	; (8004864 <__ieee754_pow+0x258>)
 8004776:	429e      	cmp	r6, r3
 8004778:	d1e7      	bne.n	800474a <__ieee754_pow+0x13e>
 800477a:	4b3b      	ldr	r3, [pc, #236]	; (8004868 <__ieee754_pow+0x25c>)
 800477c:	18e3      	adds	r3, r4, r3
 800477e:	433b      	orrs	r3, r7
 8004780:	d101      	bne.n	8004786 <__ieee754_pow+0x17a>
 8004782:	f000 fc15 	bl	8004fb0 <__ieee754_pow+0x9a4>
 8004786:	4b3a      	ldr	r3, [pc, #232]	; (8004870 <__ieee754_pow+0x264>)
 8004788:	429c      	cmp	r4, r3
 800478a:	dd09      	ble.n	80047a0 <__ieee754_pow+0x194>
 800478c:	9b04      	ldr	r3, [sp, #16]
 800478e:	2b00      	cmp	r3, #0
 8004790:	da01      	bge.n	8004796 <__ieee754_pow+0x18a>
 8004792:	f000 fc11 	bl	8004fb8 <__ieee754_pow+0x9ac>
 8004796:	9b02      	ldr	r3, [sp, #8]
 8004798:	9c03      	ldr	r4, [sp, #12]
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	9401      	str	r4, [sp, #4]
 800479e:	e00c      	b.n	80047ba <__ieee754_pow+0x1ae>
 80047a0:	9b04      	ldr	r3, [sp, #16]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	db01      	blt.n	80047aa <__ieee754_pow+0x19e>
 80047a6:	f000 fc07 	bl	8004fb8 <__ieee754_pow+0x9ac>
 80047aa:	2280      	movs	r2, #128	; 0x80
 80047ac:	0612      	lsls	r2, r2, #24
 80047ae:	4694      	mov	ip, r2
 80047b0:	9b02      	ldr	r3, [sp, #8]
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	9b03      	ldr	r3, [sp, #12]
 80047b6:	4463      	add	r3, ip
 80047b8:	9301      	str	r3, [sp, #4]
 80047ba:	9800      	ldr	r0, [sp, #0]
 80047bc:	9901      	ldr	r1, [sp, #4]
 80047be:	b015      	add	sp, #84	; 0x54
 80047c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047c2:	2380      	movs	r3, #128	; 0x80
 80047c4:	9a04      	ldr	r2, [sp, #16]
 80047c6:	05db      	lsls	r3, r3, #23
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d106      	bne.n	80047da <__ieee754_pow+0x1ce>
 80047cc:	003a      	movs	r2, r7
 80047ce:	002b      	movs	r3, r5
 80047d0:	0038      	movs	r0, r7
 80047d2:	0029      	movs	r1, r5
 80047d4:	f7fc ff08 	bl	80015e8 <__aeabi_dmul>
 80047d8:	e73e      	b.n	8004658 <__ieee754_pow+0x4c>
 80047da:	4b28      	ldr	r3, [pc, #160]	; (800487c <__ieee754_pow+0x270>)
 80047dc:	9a04      	ldr	r2, [sp, #16]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d000      	beq.n	80047e4 <__ieee754_pow+0x1d8>
 80047e2:	e775      	b.n	80046d0 <__ieee754_pow+0xc4>
 80047e4:	2d00      	cmp	r5, #0
 80047e6:	da00      	bge.n	80047ea <__ieee754_pow+0x1de>
 80047e8:	e772      	b.n	80046d0 <__ieee754_pow+0xc4>
 80047ea:	0038      	movs	r0, r7
 80047ec:	0029      	movs	r1, r5
 80047ee:	f000 fcb7 	bl	8005160 <__ieee754_sqrt>
 80047f2:	e731      	b.n	8004658 <__ieee754_pow+0x4c>
 80047f4:	9b06      	ldr	r3, [sp, #24]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d1df      	bne.n	80047ba <__ieee754_pow+0x1ae>
 80047fa:	9800      	ldr	r0, [sp, #0]
 80047fc:	2180      	movs	r1, #128	; 0x80
 80047fe:	0002      	movs	r2, r0
 8004800:	9801      	ldr	r0, [sp, #4]
 8004802:	0609      	lsls	r1, r1, #24
 8004804:	1843      	adds	r3, r0, r1
 8004806:	9200      	str	r2, [sp, #0]
 8004808:	9301      	str	r3, [sp, #4]
 800480a:	e7d6      	b.n	80047ba <__ieee754_pow+0x1ae>
 800480c:	0feb      	lsrs	r3, r5, #31
 800480e:	3b01      	subs	r3, #1
 8004810:	930e      	str	r3, [sp, #56]	; 0x38
 8004812:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004814:	9b06      	ldr	r3, [sp, #24]
 8004816:	4313      	orrs	r3, r2
 8004818:	d104      	bne.n	8004824 <__ieee754_pow+0x218>
 800481a:	003a      	movs	r2, r7
 800481c:	002b      	movs	r3, r5
 800481e:	0038      	movs	r0, r7
 8004820:	0029      	movs	r1, r5
 8004822:	e77e      	b.n	8004722 <__ieee754_pow+0x116>
 8004824:	4b16      	ldr	r3, [pc, #88]	; (8004880 <__ieee754_pow+0x274>)
 8004826:	429e      	cmp	r6, r3
 8004828:	dc00      	bgt.n	800482c <__ieee754_pow+0x220>
 800482a:	e0f1      	b.n	8004a10 <__ieee754_pow+0x404>
 800482c:	4b15      	ldr	r3, [pc, #84]	; (8004884 <__ieee754_pow+0x278>)
 800482e:	429e      	cmp	r6, r3
 8004830:	dd09      	ble.n	8004846 <__ieee754_pow+0x23a>
 8004832:	4b0f      	ldr	r3, [pc, #60]	; (8004870 <__ieee754_pow+0x264>)
 8004834:	429c      	cmp	r4, r3
 8004836:	dc0c      	bgt.n	8004852 <__ieee754_pow+0x246>
 8004838:	9b04      	ldr	r3, [sp, #16]
 800483a:	2b00      	cmp	r3, #0
 800483c:	da0c      	bge.n	8004858 <__ieee754_pow+0x24c>
 800483e:	2000      	movs	r0, #0
 8004840:	f000 fc86 	bl	8005150 <__math_oflow>
 8004844:	e708      	b.n	8004658 <__ieee754_pow+0x4c>
 8004846:	4b10      	ldr	r3, [pc, #64]	; (8004888 <__ieee754_pow+0x27c>)
 8004848:	429c      	cmp	r4, r3
 800484a:	ddf5      	ble.n	8004838 <__ieee754_pow+0x22c>
 800484c:	4b0a      	ldr	r3, [pc, #40]	; (8004878 <__ieee754_pow+0x26c>)
 800484e:	429c      	cmp	r4, r3
 8004850:	dd1c      	ble.n	800488c <__ieee754_pow+0x280>
 8004852:	9b04      	ldr	r3, [sp, #16]
 8004854:	2b00      	cmp	r3, #0
 8004856:	dcf2      	bgt.n	800483e <__ieee754_pow+0x232>
 8004858:	2000      	movs	r0, #0
 800485a:	f000 fc72 	bl	8005142 <__math_uflow>
 800485e:	e6fb      	b.n	8004658 <__ieee754_pow+0x4c>
 8004860:	fff00000 	.word	0xfff00000
 8004864:	7ff00000 	.word	0x7ff00000
 8004868:	c0100000 	.word	0xc0100000
 800486c:	433fffff 	.word	0x433fffff
 8004870:	3fefffff 	.word	0x3fefffff
 8004874:	fffffc01 	.word	0xfffffc01
 8004878:	3ff00000 	.word	0x3ff00000
 800487c:	3fe00000 	.word	0x3fe00000
 8004880:	41e00000 	.word	0x41e00000
 8004884:	43f00000 	.word	0x43f00000
 8004888:	3feffffe 	.word	0x3feffffe
 800488c:	2200      	movs	r2, #0
 800488e:	9800      	ldr	r0, [sp, #0]
 8004890:	9901      	ldr	r1, [sp, #4]
 8004892:	4b53      	ldr	r3, [pc, #332]	; (80049e0 <__ieee754_pow+0x3d4>)
 8004894:	f7fd f96a 	bl	8001b6c <__aeabi_dsub>
 8004898:	22c0      	movs	r2, #192	; 0xc0
 800489a:	4b52      	ldr	r3, [pc, #328]	; (80049e4 <__ieee754_pow+0x3d8>)
 800489c:	05d2      	lsls	r2, r2, #23
 800489e:	0004      	movs	r4, r0
 80048a0:	000d      	movs	r5, r1
 80048a2:	f7fc fea1 	bl	80015e8 <__aeabi_dmul>
 80048a6:	4a50      	ldr	r2, [pc, #320]	; (80049e8 <__ieee754_pow+0x3dc>)
 80048a8:	0006      	movs	r6, r0
 80048aa:	000f      	movs	r7, r1
 80048ac:	0020      	movs	r0, r4
 80048ae:	0029      	movs	r1, r5
 80048b0:	4b4e      	ldr	r3, [pc, #312]	; (80049ec <__ieee754_pow+0x3e0>)
 80048b2:	f7fc fe99 	bl	80015e8 <__aeabi_dmul>
 80048b6:	2200      	movs	r2, #0
 80048b8:	9000      	str	r0, [sp, #0]
 80048ba:	9101      	str	r1, [sp, #4]
 80048bc:	4b4c      	ldr	r3, [pc, #304]	; (80049f0 <__ieee754_pow+0x3e4>)
 80048be:	0020      	movs	r0, r4
 80048c0:	0029      	movs	r1, r5
 80048c2:	f7fc fe91 	bl	80015e8 <__aeabi_dmul>
 80048c6:	0002      	movs	r2, r0
 80048c8:	000b      	movs	r3, r1
 80048ca:	484a      	ldr	r0, [pc, #296]	; (80049f4 <__ieee754_pow+0x3e8>)
 80048cc:	494a      	ldr	r1, [pc, #296]	; (80049f8 <__ieee754_pow+0x3ec>)
 80048ce:	f7fd f94d 	bl	8001b6c <__aeabi_dsub>
 80048d2:	0022      	movs	r2, r4
 80048d4:	002b      	movs	r3, r5
 80048d6:	f7fc fe87 	bl	80015e8 <__aeabi_dmul>
 80048da:	0002      	movs	r2, r0
 80048dc:	000b      	movs	r3, r1
 80048de:	2000      	movs	r0, #0
 80048e0:	4946      	ldr	r1, [pc, #280]	; (80049fc <__ieee754_pow+0x3f0>)
 80048e2:	f7fd f943 	bl	8001b6c <__aeabi_dsub>
 80048e6:	0022      	movs	r2, r4
 80048e8:	002b      	movs	r3, r5
 80048ea:	9004      	str	r0, [sp, #16]
 80048ec:	9105      	str	r1, [sp, #20]
 80048ee:	0020      	movs	r0, r4
 80048f0:	0029      	movs	r1, r5
 80048f2:	f7fc fe79 	bl	80015e8 <__aeabi_dmul>
 80048f6:	0002      	movs	r2, r0
 80048f8:	000b      	movs	r3, r1
 80048fa:	9804      	ldr	r0, [sp, #16]
 80048fc:	9905      	ldr	r1, [sp, #20]
 80048fe:	f7fc fe73 	bl	80015e8 <__aeabi_dmul>
 8004902:	4a3f      	ldr	r2, [pc, #252]	; (8004a00 <__ieee754_pow+0x3f4>)
 8004904:	4b37      	ldr	r3, [pc, #220]	; (80049e4 <__ieee754_pow+0x3d8>)
 8004906:	f7fc fe6f 	bl	80015e8 <__aeabi_dmul>
 800490a:	0002      	movs	r2, r0
 800490c:	000b      	movs	r3, r1
 800490e:	9800      	ldr	r0, [sp, #0]
 8004910:	9901      	ldr	r1, [sp, #4]
 8004912:	f7fd f92b 	bl	8001b6c <__aeabi_dsub>
 8004916:	0002      	movs	r2, r0
 8004918:	000b      	movs	r3, r1
 800491a:	0004      	movs	r4, r0
 800491c:	000d      	movs	r5, r1
 800491e:	0030      	movs	r0, r6
 8004920:	0039      	movs	r1, r7
 8004922:	f7fb ff07 	bl	8000734 <__aeabi_dadd>
 8004926:	2000      	movs	r0, #0
 8004928:	0032      	movs	r2, r6
 800492a:	003b      	movs	r3, r7
 800492c:	9004      	str	r0, [sp, #16]
 800492e:	9105      	str	r1, [sp, #20]
 8004930:	f7fd f91c 	bl	8001b6c <__aeabi_dsub>
 8004934:	0002      	movs	r2, r0
 8004936:	000b      	movs	r3, r1
 8004938:	0020      	movs	r0, r4
 800493a:	0029      	movs	r1, r5
 800493c:	f7fd f916 	bl	8001b6c <__aeabi_dsub>
 8004940:	9b06      	ldr	r3, [sp, #24]
 8004942:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004944:	3b01      	subs	r3, #1
 8004946:	0006      	movs	r6, r0
 8004948:	000f      	movs	r7, r1
 800494a:	4313      	orrs	r3, r2
 800494c:	d000      	beq.n	8004950 <__ieee754_pow+0x344>
 800494e:	e1dc      	b.n	8004d0a <__ieee754_pow+0x6fe>
 8004950:	2300      	movs	r3, #0
 8004952:	4c2c      	ldr	r4, [pc, #176]	; (8004a04 <__ieee754_pow+0x3f8>)
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	9401      	str	r4, [sp, #4]
 8004958:	9c02      	ldr	r4, [sp, #8]
 800495a:	9d03      	ldr	r5, [sp, #12]
 800495c:	9802      	ldr	r0, [sp, #8]
 800495e:	9903      	ldr	r1, [sp, #12]
 8004960:	2400      	movs	r4, #0
 8004962:	002b      	movs	r3, r5
 8004964:	0022      	movs	r2, r4
 8004966:	f7fd f901 	bl	8001b6c <__aeabi_dsub>
 800496a:	9a04      	ldr	r2, [sp, #16]
 800496c:	9b05      	ldr	r3, [sp, #20]
 800496e:	f7fc fe3b 	bl	80015e8 <__aeabi_dmul>
 8004972:	9a02      	ldr	r2, [sp, #8]
 8004974:	9b03      	ldr	r3, [sp, #12]
 8004976:	9006      	str	r0, [sp, #24]
 8004978:	9107      	str	r1, [sp, #28]
 800497a:	0030      	movs	r0, r6
 800497c:	0039      	movs	r1, r7
 800497e:	f7fc fe33 	bl	80015e8 <__aeabi_dmul>
 8004982:	0002      	movs	r2, r0
 8004984:	000b      	movs	r3, r1
 8004986:	9806      	ldr	r0, [sp, #24]
 8004988:	9907      	ldr	r1, [sp, #28]
 800498a:	f7fb fed3 	bl	8000734 <__aeabi_dadd>
 800498e:	0022      	movs	r2, r4
 8004990:	002b      	movs	r3, r5
 8004992:	0006      	movs	r6, r0
 8004994:	000f      	movs	r7, r1
 8004996:	9804      	ldr	r0, [sp, #16]
 8004998:	9905      	ldr	r1, [sp, #20]
 800499a:	f7fc fe25 	bl	80015e8 <__aeabi_dmul>
 800499e:	0003      	movs	r3, r0
 80049a0:	000c      	movs	r4, r1
 80049a2:	9004      	str	r0, [sp, #16]
 80049a4:	9105      	str	r1, [sp, #20]
 80049a6:	9306      	str	r3, [sp, #24]
 80049a8:	9407      	str	r4, [sp, #28]
 80049aa:	0002      	movs	r2, r0
 80049ac:	000b      	movs	r3, r1
 80049ae:	0030      	movs	r0, r6
 80049b0:	0039      	movs	r1, r7
 80049b2:	f7fb febf 	bl	8000734 <__aeabi_dadd>
 80049b6:	4b14      	ldr	r3, [pc, #80]	; (8004a08 <__ieee754_pow+0x3fc>)
 80049b8:	0005      	movs	r5, r0
 80049ba:	000c      	movs	r4, r1
 80049bc:	9108      	str	r1, [sp, #32]
 80049be:	4299      	cmp	r1, r3
 80049c0:	dc00      	bgt.n	80049c4 <__ieee754_pow+0x3b8>
 80049c2:	e2d4      	b.n	8004f6e <__ieee754_pow+0x962>
 80049c4:	4b11      	ldr	r3, [pc, #68]	; (8004a0c <__ieee754_pow+0x400>)
 80049c6:	18cb      	adds	r3, r1, r3
 80049c8:	4303      	orrs	r3, r0
 80049ca:	d100      	bne.n	80049ce <__ieee754_pow+0x3c2>
 80049cc:	e1d6      	b.n	8004d7c <__ieee754_pow+0x770>
 80049ce:	9800      	ldr	r0, [sp, #0]
 80049d0:	9901      	ldr	r1, [sp, #4]
 80049d2:	2300      	movs	r3, #0
 80049d4:	2200      	movs	r2, #0
 80049d6:	f7fb fc39 	bl	800024c <__aeabi_dcmplt>
 80049da:	1e43      	subs	r3, r0, #1
 80049dc:	4198      	sbcs	r0, r3
 80049de:	e72f      	b.n	8004840 <__ieee754_pow+0x234>
 80049e0:	3ff00000 	.word	0x3ff00000
 80049e4:	3ff71547 	.word	0x3ff71547
 80049e8:	f85ddf44 	.word	0xf85ddf44
 80049ec:	3e54ae0b 	.word	0x3e54ae0b
 80049f0:	3fd00000 	.word	0x3fd00000
 80049f4:	55555555 	.word	0x55555555
 80049f8:	3fd55555 	.word	0x3fd55555
 80049fc:	3fe00000 	.word	0x3fe00000
 8004a00:	652b82fe 	.word	0x652b82fe
 8004a04:	bff00000 	.word	0xbff00000
 8004a08:	408fffff 	.word	0x408fffff
 8004a0c:	bf700000 	.word	0xbf700000
 8004a10:	4bbf      	ldr	r3, [pc, #764]	; (8004d10 <__ieee754_pow+0x704>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	422b      	tst	r3, r5
 8004a16:	d10a      	bne.n	8004a2e <__ieee754_pow+0x422>
 8004a18:	9800      	ldr	r0, [sp, #0]
 8004a1a:	9901      	ldr	r1, [sp, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	4bbd      	ldr	r3, [pc, #756]	; (8004d14 <__ieee754_pow+0x708>)
 8004a20:	f7fc fde2 	bl	80015e8 <__aeabi_dmul>
 8004a24:	2235      	movs	r2, #53	; 0x35
 8004a26:	9000      	str	r0, [sp, #0]
 8004a28:	9101      	str	r1, [sp, #4]
 8004a2a:	9c01      	ldr	r4, [sp, #4]
 8004a2c:	4252      	negs	r2, r2
 8004a2e:	49ba      	ldr	r1, [pc, #744]	; (8004d18 <__ieee754_pow+0x70c>)
 8004a30:	1523      	asrs	r3, r4, #20
 8004a32:	185b      	adds	r3, r3, r1
 8004a34:	189b      	adds	r3, r3, r2
 8004a36:	0324      	lsls	r4, r4, #12
 8004a38:	4db8      	ldr	r5, [pc, #736]	; (8004d1c <__ieee754_pow+0x710>)
 8004a3a:	930d      	str	r3, [sp, #52]	; 0x34
 8004a3c:	4bb8      	ldr	r3, [pc, #736]	; (8004d20 <__ieee754_pow+0x714>)
 8004a3e:	0b22      	lsrs	r2, r4, #12
 8004a40:	4315      	orrs	r5, r2
 8004a42:	2400      	movs	r4, #0
 8004a44:	429a      	cmp	r2, r3
 8004a46:	dd09      	ble.n	8004a5c <__ieee754_pow+0x450>
 8004a48:	4bb6      	ldr	r3, [pc, #728]	; (8004d24 <__ieee754_pow+0x718>)
 8004a4a:	3401      	adds	r4, #1
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	dd05      	ble.n	8004a5c <__ieee754_pow+0x450>
 8004a50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a52:	191b      	adds	r3, r3, r4
 8004a54:	2400      	movs	r4, #0
 8004a56:	930d      	str	r3, [sp, #52]	; 0x34
 8004a58:	4bb3      	ldr	r3, [pc, #716]	; (8004d28 <__ieee754_pow+0x71c>)
 8004a5a:	18ed      	adds	r5, r5, r3
 8004a5c:	4bb3      	ldr	r3, [pc, #716]	; (8004d2c <__ieee754_pow+0x720>)
 8004a5e:	00e2      	lsls	r2, r4, #3
 8004a60:	189b      	adds	r3, r3, r2
 8004a62:	9800      	ldr	r0, [sp, #0]
 8004a64:	9901      	ldr	r1, [sp, #4]
 8004a66:	920f      	str	r2, [sp, #60]	; 0x3c
 8004a68:	0029      	movs	r1, r5
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	0006      	movs	r6, r0
 8004a70:	920a      	str	r2, [sp, #40]	; 0x28
 8004a72:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a74:	f7fd f87a 	bl	8001b6c <__aeabi_dsub>
 8004a78:	0032      	movs	r2, r6
 8004a7a:	002b      	movs	r3, r5
 8004a7c:	9010      	str	r0, [sp, #64]	; 0x40
 8004a7e:	9111      	str	r1, [sp, #68]	; 0x44
 8004a80:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004a82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a84:	f7fb fe56 	bl	8000734 <__aeabi_dadd>
 8004a88:	0002      	movs	r2, r0
 8004a8a:	000b      	movs	r3, r1
 8004a8c:	2000      	movs	r0, #0
 8004a8e:	49a3      	ldr	r1, [pc, #652]	; (8004d1c <__ieee754_pow+0x710>)
 8004a90:	f7fc f9b0 	bl	8000df4 <__aeabi_ddiv>
 8004a94:	0002      	movs	r2, r0
 8004a96:	000b      	movs	r3, r1
 8004a98:	9012      	str	r0, [sp, #72]	; 0x48
 8004a9a:	9113      	str	r1, [sp, #76]	; 0x4c
 8004a9c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004a9e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004aa0:	f7fc fda2 	bl	80015e8 <__aeabi_dmul>
 8004aa4:	9008      	str	r0, [sp, #32]
 8004aa6:	9109      	str	r1, [sp, #36]	; 0x24
 8004aa8:	9a08      	ldr	r2, [sp, #32]
 8004aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aac:	9204      	str	r2, [sp, #16]
 8004aae:	9305      	str	r3, [sp, #20]
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	2180      	movs	r1, #128	; 0x80
 8004ab4:	2080      	movs	r0, #128	; 0x80
 8004ab6:	9304      	str	r3, [sp, #16]
 8004ab8:	9a04      	ldr	r2, [sp, #16]
 8004aba:	9b05      	ldr	r3, [sp, #20]
 8004abc:	9200      	str	r2, [sp, #0]
 8004abe:	9301      	str	r3, [sp, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	002f      	movs	r7, r5
 8004ac4:	0589      	lsls	r1, r1, #22
 8004ac6:	106d      	asrs	r5, r5, #1
 8004ac8:	4329      	orrs	r1, r5
 8004aca:	0300      	lsls	r0, r0, #12
 8004acc:	1809      	adds	r1, r1, r0
 8004ace:	04a0      	lsls	r0, r4, #18
 8004ad0:	180b      	adds	r3, r1, r0
 8004ad2:	9800      	ldr	r0, [sp, #0]
 8004ad4:	9901      	ldr	r1, [sp, #4]
 8004ad6:	0014      	movs	r4, r2
 8004ad8:	001d      	movs	r5, r3
 8004ada:	f7fc fd85 	bl	80015e8 <__aeabi_dmul>
 8004ade:	0002      	movs	r2, r0
 8004ae0:	000b      	movs	r3, r1
 8004ae2:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004ae4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004ae6:	f7fd f841 	bl	8001b6c <__aeabi_dsub>
 8004aea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004aec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004aee:	9010      	str	r0, [sp, #64]	; 0x40
 8004af0:	9111      	str	r1, [sp, #68]	; 0x44
 8004af2:	0020      	movs	r0, r4
 8004af4:	0029      	movs	r1, r5
 8004af6:	f7fd f839 	bl	8001b6c <__aeabi_dsub>
 8004afa:	0002      	movs	r2, r0
 8004afc:	000b      	movs	r3, r1
 8004afe:	0030      	movs	r0, r6
 8004b00:	0039      	movs	r1, r7
 8004b02:	f7fd f833 	bl	8001b6c <__aeabi_dsub>
 8004b06:	9a00      	ldr	r2, [sp, #0]
 8004b08:	9b01      	ldr	r3, [sp, #4]
 8004b0a:	f7fc fd6d 	bl	80015e8 <__aeabi_dmul>
 8004b0e:	0002      	movs	r2, r0
 8004b10:	000b      	movs	r3, r1
 8004b12:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004b14:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004b16:	f7fd f829 	bl	8001b6c <__aeabi_dsub>
 8004b1a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004b1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004b1e:	f7fc fd63 	bl	80015e8 <__aeabi_dmul>
 8004b22:	9a08      	ldr	r2, [sp, #32]
 8004b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b26:	900a      	str	r0, [sp, #40]	; 0x28
 8004b28:	910b      	str	r1, [sp, #44]	; 0x2c
 8004b2a:	0010      	movs	r0, r2
 8004b2c:	0019      	movs	r1, r3
 8004b2e:	f7fc fd5b 	bl	80015e8 <__aeabi_dmul>
 8004b32:	0006      	movs	r6, r0
 8004b34:	000f      	movs	r7, r1
 8004b36:	4a7e      	ldr	r2, [pc, #504]	; (8004d30 <__ieee754_pow+0x724>)
 8004b38:	4b7e      	ldr	r3, [pc, #504]	; (8004d34 <__ieee754_pow+0x728>)
 8004b3a:	f7fc fd55 	bl	80015e8 <__aeabi_dmul>
 8004b3e:	4a7e      	ldr	r2, [pc, #504]	; (8004d38 <__ieee754_pow+0x72c>)
 8004b40:	4b7e      	ldr	r3, [pc, #504]	; (8004d3c <__ieee754_pow+0x730>)
 8004b42:	f7fb fdf7 	bl	8000734 <__aeabi_dadd>
 8004b46:	0032      	movs	r2, r6
 8004b48:	003b      	movs	r3, r7
 8004b4a:	f7fc fd4d 	bl	80015e8 <__aeabi_dmul>
 8004b4e:	4a7c      	ldr	r2, [pc, #496]	; (8004d40 <__ieee754_pow+0x734>)
 8004b50:	4b7c      	ldr	r3, [pc, #496]	; (8004d44 <__ieee754_pow+0x738>)
 8004b52:	f7fb fdef 	bl	8000734 <__aeabi_dadd>
 8004b56:	0032      	movs	r2, r6
 8004b58:	003b      	movs	r3, r7
 8004b5a:	f7fc fd45 	bl	80015e8 <__aeabi_dmul>
 8004b5e:	4a7a      	ldr	r2, [pc, #488]	; (8004d48 <__ieee754_pow+0x73c>)
 8004b60:	4b7a      	ldr	r3, [pc, #488]	; (8004d4c <__ieee754_pow+0x740>)
 8004b62:	f7fb fde7 	bl	8000734 <__aeabi_dadd>
 8004b66:	0032      	movs	r2, r6
 8004b68:	003b      	movs	r3, r7
 8004b6a:	f7fc fd3d 	bl	80015e8 <__aeabi_dmul>
 8004b6e:	4a78      	ldr	r2, [pc, #480]	; (8004d50 <__ieee754_pow+0x744>)
 8004b70:	4b78      	ldr	r3, [pc, #480]	; (8004d54 <__ieee754_pow+0x748>)
 8004b72:	f7fb fddf 	bl	8000734 <__aeabi_dadd>
 8004b76:	0032      	movs	r2, r6
 8004b78:	003b      	movs	r3, r7
 8004b7a:	f7fc fd35 	bl	80015e8 <__aeabi_dmul>
 8004b7e:	4a76      	ldr	r2, [pc, #472]	; (8004d58 <__ieee754_pow+0x74c>)
 8004b80:	4b76      	ldr	r3, [pc, #472]	; (8004d5c <__ieee754_pow+0x750>)
 8004b82:	f7fb fdd7 	bl	8000734 <__aeabi_dadd>
 8004b86:	0032      	movs	r2, r6
 8004b88:	0004      	movs	r4, r0
 8004b8a:	000d      	movs	r5, r1
 8004b8c:	003b      	movs	r3, r7
 8004b8e:	0030      	movs	r0, r6
 8004b90:	0039      	movs	r1, r7
 8004b92:	f7fc fd29 	bl	80015e8 <__aeabi_dmul>
 8004b96:	0002      	movs	r2, r0
 8004b98:	000b      	movs	r3, r1
 8004b9a:	0020      	movs	r0, r4
 8004b9c:	0029      	movs	r1, r5
 8004b9e:	f7fc fd23 	bl	80015e8 <__aeabi_dmul>
 8004ba2:	9a00      	ldr	r2, [sp, #0]
 8004ba4:	9b01      	ldr	r3, [sp, #4]
 8004ba6:	0004      	movs	r4, r0
 8004ba8:	000d      	movs	r5, r1
 8004baa:	9808      	ldr	r0, [sp, #32]
 8004bac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004bae:	f7fb fdc1 	bl	8000734 <__aeabi_dadd>
 8004bb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004bb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bb6:	f7fc fd17 	bl	80015e8 <__aeabi_dmul>
 8004bba:	0022      	movs	r2, r4
 8004bbc:	002b      	movs	r3, r5
 8004bbe:	f7fb fdb9 	bl	8000734 <__aeabi_dadd>
 8004bc2:	9a00      	ldr	r2, [sp, #0]
 8004bc4:	9b01      	ldr	r3, [sp, #4]
 8004bc6:	9010      	str	r0, [sp, #64]	; 0x40
 8004bc8:	9111      	str	r1, [sp, #68]	; 0x44
 8004bca:	0010      	movs	r0, r2
 8004bcc:	0019      	movs	r1, r3
 8004bce:	f7fc fd0b 	bl	80015e8 <__aeabi_dmul>
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	4b62      	ldr	r3, [pc, #392]	; (8004d60 <__ieee754_pow+0x754>)
 8004bd6:	0004      	movs	r4, r0
 8004bd8:	000d      	movs	r5, r1
 8004bda:	f7fb fdab 	bl	8000734 <__aeabi_dadd>
 8004bde:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004be0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004be2:	f7fb fda7 	bl	8000734 <__aeabi_dadd>
 8004be6:	2000      	movs	r0, #0
 8004be8:	000f      	movs	r7, r1
 8004bea:	0006      	movs	r6, r0
 8004bec:	0002      	movs	r2, r0
 8004bee:	000b      	movs	r3, r1
 8004bf0:	9800      	ldr	r0, [sp, #0]
 8004bf2:	9901      	ldr	r1, [sp, #4]
 8004bf4:	f7fc fcf8 	bl	80015e8 <__aeabi_dmul>
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	9000      	str	r0, [sp, #0]
 8004bfc:	9101      	str	r1, [sp, #4]
 8004bfe:	4b58      	ldr	r3, [pc, #352]	; (8004d60 <__ieee754_pow+0x754>)
 8004c00:	0030      	movs	r0, r6
 8004c02:	0039      	movs	r1, r7
 8004c04:	f7fc ffb2 	bl	8001b6c <__aeabi_dsub>
 8004c08:	0022      	movs	r2, r4
 8004c0a:	002b      	movs	r3, r5
 8004c0c:	f7fc ffae 	bl	8001b6c <__aeabi_dsub>
 8004c10:	0002      	movs	r2, r0
 8004c12:	000b      	movs	r3, r1
 8004c14:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004c16:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004c18:	f7fc ffa8 	bl	8001b6c <__aeabi_dsub>
 8004c1c:	9a08      	ldr	r2, [sp, #32]
 8004c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c20:	f7fc fce2 	bl	80015e8 <__aeabi_dmul>
 8004c24:	0032      	movs	r2, r6
 8004c26:	0004      	movs	r4, r0
 8004c28:	000d      	movs	r5, r1
 8004c2a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004c2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c2e:	003b      	movs	r3, r7
 8004c30:	f7fc fcda 	bl	80015e8 <__aeabi_dmul>
 8004c34:	0002      	movs	r2, r0
 8004c36:	000b      	movs	r3, r1
 8004c38:	0020      	movs	r0, r4
 8004c3a:	0029      	movs	r1, r5
 8004c3c:	f7fb fd7a 	bl	8000734 <__aeabi_dadd>
 8004c40:	0004      	movs	r4, r0
 8004c42:	000d      	movs	r5, r1
 8004c44:	0002      	movs	r2, r0
 8004c46:	000b      	movs	r3, r1
 8004c48:	9800      	ldr	r0, [sp, #0]
 8004c4a:	9901      	ldr	r1, [sp, #4]
 8004c4c:	f7fb fd72 	bl	8000734 <__aeabi_dadd>
 8004c50:	22e0      	movs	r2, #224	; 0xe0
 8004c52:	2000      	movs	r0, #0
 8004c54:	4b43      	ldr	r3, [pc, #268]	; (8004d64 <__ieee754_pow+0x758>)
 8004c56:	0612      	lsls	r2, r2, #24
 8004c58:	0006      	movs	r6, r0
 8004c5a:	000f      	movs	r7, r1
 8004c5c:	f7fc fcc4 	bl	80015e8 <__aeabi_dmul>
 8004c60:	9008      	str	r0, [sp, #32]
 8004c62:	9109      	str	r1, [sp, #36]	; 0x24
 8004c64:	9a00      	ldr	r2, [sp, #0]
 8004c66:	9b01      	ldr	r3, [sp, #4]
 8004c68:	0030      	movs	r0, r6
 8004c6a:	0039      	movs	r1, r7
 8004c6c:	f7fc ff7e 	bl	8001b6c <__aeabi_dsub>
 8004c70:	0002      	movs	r2, r0
 8004c72:	000b      	movs	r3, r1
 8004c74:	0020      	movs	r0, r4
 8004c76:	0029      	movs	r1, r5
 8004c78:	f7fc ff78 	bl	8001b6c <__aeabi_dsub>
 8004c7c:	4a3a      	ldr	r2, [pc, #232]	; (8004d68 <__ieee754_pow+0x75c>)
 8004c7e:	4b39      	ldr	r3, [pc, #228]	; (8004d64 <__ieee754_pow+0x758>)
 8004c80:	f7fc fcb2 	bl	80015e8 <__aeabi_dmul>
 8004c84:	4a39      	ldr	r2, [pc, #228]	; (8004d6c <__ieee754_pow+0x760>)
 8004c86:	0004      	movs	r4, r0
 8004c88:	000d      	movs	r5, r1
 8004c8a:	0030      	movs	r0, r6
 8004c8c:	0039      	movs	r1, r7
 8004c8e:	4b38      	ldr	r3, [pc, #224]	; (8004d70 <__ieee754_pow+0x764>)
 8004c90:	f7fc fcaa 	bl	80015e8 <__aeabi_dmul>
 8004c94:	0002      	movs	r2, r0
 8004c96:	000b      	movs	r3, r1
 8004c98:	0020      	movs	r0, r4
 8004c9a:	0029      	movs	r1, r5
 8004c9c:	f7fb fd4a 	bl	8000734 <__aeabi_dadd>
 8004ca0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004ca2:	4b34      	ldr	r3, [pc, #208]	; (8004d74 <__ieee754_pow+0x768>)
 8004ca4:	189b      	adds	r3, r3, r2
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f7fb fd43 	bl	8000734 <__aeabi_dadd>
 8004cae:	9000      	str	r0, [sp, #0]
 8004cb0:	9101      	str	r1, [sp, #4]
 8004cb2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004cb4:	f7fd fafa 	bl	80022ac <__aeabi_i2d>
 8004cb8:	0004      	movs	r4, r0
 8004cba:	000d      	movs	r5, r1
 8004cbc:	9808      	ldr	r0, [sp, #32]
 8004cbe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004cc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004cc2:	4b2d      	ldr	r3, [pc, #180]	; (8004d78 <__ieee754_pow+0x76c>)
 8004cc4:	189b      	adds	r3, r3, r2
 8004cc6:	681e      	ldr	r6, [r3, #0]
 8004cc8:	685f      	ldr	r7, [r3, #4]
 8004cca:	9a00      	ldr	r2, [sp, #0]
 8004ccc:	9b01      	ldr	r3, [sp, #4]
 8004cce:	f7fb fd31 	bl	8000734 <__aeabi_dadd>
 8004cd2:	0032      	movs	r2, r6
 8004cd4:	003b      	movs	r3, r7
 8004cd6:	f7fb fd2d 	bl	8000734 <__aeabi_dadd>
 8004cda:	0022      	movs	r2, r4
 8004cdc:	002b      	movs	r3, r5
 8004cde:	f7fb fd29 	bl	8000734 <__aeabi_dadd>
 8004ce2:	2000      	movs	r0, #0
 8004ce4:	0022      	movs	r2, r4
 8004ce6:	002b      	movs	r3, r5
 8004ce8:	9004      	str	r0, [sp, #16]
 8004cea:	9105      	str	r1, [sp, #20]
 8004cec:	f7fc ff3e 	bl	8001b6c <__aeabi_dsub>
 8004cf0:	0032      	movs	r2, r6
 8004cf2:	003b      	movs	r3, r7
 8004cf4:	f7fc ff3a 	bl	8001b6c <__aeabi_dsub>
 8004cf8:	9a08      	ldr	r2, [sp, #32]
 8004cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cfc:	f7fc ff36 	bl	8001b6c <__aeabi_dsub>
 8004d00:	0002      	movs	r2, r0
 8004d02:	000b      	movs	r3, r1
 8004d04:	9800      	ldr	r0, [sp, #0]
 8004d06:	9901      	ldr	r1, [sp, #4]
 8004d08:	e618      	b.n	800493c <__ieee754_pow+0x330>
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	4c03      	ldr	r4, [pc, #12]	; (8004d1c <__ieee754_pow+0x710>)
 8004d0e:	e621      	b.n	8004954 <__ieee754_pow+0x348>
 8004d10:	7ff00000 	.word	0x7ff00000
 8004d14:	43400000 	.word	0x43400000
 8004d18:	fffffc01 	.word	0xfffffc01
 8004d1c:	3ff00000 	.word	0x3ff00000
 8004d20:	0003988e 	.word	0x0003988e
 8004d24:	000bb679 	.word	0x000bb679
 8004d28:	fff00000 	.word	0xfff00000
 8004d2c:	080057a8 	.word	0x080057a8
 8004d30:	4a454eef 	.word	0x4a454eef
 8004d34:	3fca7e28 	.word	0x3fca7e28
 8004d38:	93c9db65 	.word	0x93c9db65
 8004d3c:	3fcd864a 	.word	0x3fcd864a
 8004d40:	a91d4101 	.word	0xa91d4101
 8004d44:	3fd17460 	.word	0x3fd17460
 8004d48:	518f264d 	.word	0x518f264d
 8004d4c:	3fd55555 	.word	0x3fd55555
 8004d50:	db6fabff 	.word	0xdb6fabff
 8004d54:	3fdb6db6 	.word	0x3fdb6db6
 8004d58:	33333303 	.word	0x33333303
 8004d5c:	3fe33333 	.word	0x3fe33333
 8004d60:	40080000 	.word	0x40080000
 8004d64:	3feec709 	.word	0x3feec709
 8004d68:	dc3a03fd 	.word	0xdc3a03fd
 8004d6c:	145b01f5 	.word	0x145b01f5
 8004d70:	be3e2fe0 	.word	0xbe3e2fe0
 8004d74:	080057c8 	.word	0x080057c8
 8004d78:	080057b8 	.word	0x080057b8
 8004d7c:	4a90      	ldr	r2, [pc, #576]	; (8004fc0 <__ieee754_pow+0x9b4>)
 8004d7e:	4b91      	ldr	r3, [pc, #580]	; (8004fc4 <__ieee754_pow+0x9b8>)
 8004d80:	0030      	movs	r0, r6
 8004d82:	0039      	movs	r1, r7
 8004d84:	f7fb fcd6 	bl	8000734 <__aeabi_dadd>
 8004d88:	9a04      	ldr	r2, [sp, #16]
 8004d8a:	9b05      	ldr	r3, [sp, #20]
 8004d8c:	9002      	str	r0, [sp, #8]
 8004d8e:	9103      	str	r1, [sp, #12]
 8004d90:	0028      	movs	r0, r5
 8004d92:	0021      	movs	r1, r4
 8004d94:	f7fc feea 	bl	8001b6c <__aeabi_dsub>
 8004d98:	0002      	movs	r2, r0
 8004d9a:	000b      	movs	r3, r1
 8004d9c:	9802      	ldr	r0, [sp, #8]
 8004d9e:	9903      	ldr	r1, [sp, #12]
 8004da0:	f7fb fa68 	bl	8000274 <__aeabi_dcmpgt>
 8004da4:	2800      	cmp	r0, #0
 8004da6:	d000      	beq.n	8004daa <__ieee754_pow+0x79e>
 8004da8:	e611      	b.n	80049ce <__ieee754_pow+0x3c2>
 8004daa:	2100      	movs	r1, #0
 8004dac:	4a86      	ldr	r2, [pc, #536]	; (8004fc8 <__ieee754_pow+0x9bc>)
 8004dae:	0063      	lsls	r3, r4, #1
 8004db0:	085b      	lsrs	r3, r3, #1
 8004db2:	9102      	str	r1, [sp, #8]
 8004db4:	4293      	cmp	r3, r2
 8004db6:	dd25      	ble.n	8004e04 <__ieee754_pow+0x7f8>
 8004db8:	4a84      	ldr	r2, [pc, #528]	; (8004fcc <__ieee754_pow+0x9c0>)
 8004dba:	151b      	asrs	r3, r3, #20
 8004dbc:	189b      	adds	r3, r3, r2
 8004dbe:	2280      	movs	r2, #128	; 0x80
 8004dc0:	0352      	lsls	r2, r2, #13
 8004dc2:	0011      	movs	r1, r2
 8004dc4:	4119      	asrs	r1, r3
 8004dc6:	190b      	adds	r3, r1, r4
 8004dc8:	005c      	lsls	r4, r3, #1
 8004dca:	4981      	ldr	r1, [pc, #516]	; (8004fd0 <__ieee754_pow+0x9c4>)
 8004dcc:	4d81      	ldr	r5, [pc, #516]	; (8004fd4 <__ieee754_pow+0x9c8>)
 8004dce:	0d64      	lsrs	r4, r4, #21
 8004dd0:	1864      	adds	r4, r4, r1
 8004dd2:	4125      	asrs	r5, r4
 8004dd4:	401d      	ands	r5, r3
 8004dd6:	031b      	lsls	r3, r3, #12
 8004dd8:	0b1b      	lsrs	r3, r3, #12
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	2214      	movs	r2, #20
 8004dde:	1b12      	subs	r2, r2, r4
 8004de0:	4113      	asrs	r3, r2
 8004de2:	9302      	str	r3, [sp, #8]
 8004de4:	9b08      	ldr	r3, [sp, #32]
 8004de6:	2000      	movs	r0, #0
 8004de8:	0029      	movs	r1, r5
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	da02      	bge.n	8004df4 <__ieee754_pow+0x7e8>
 8004dee:	9b02      	ldr	r3, [sp, #8]
 8004df0:	425b      	negs	r3, r3
 8004df2:	9302      	str	r3, [sp, #8]
 8004df4:	0002      	movs	r2, r0
 8004df6:	000b      	movs	r3, r1
 8004df8:	9804      	ldr	r0, [sp, #16]
 8004dfa:	9905      	ldr	r1, [sp, #20]
 8004dfc:	f7fc feb6 	bl	8001b6c <__aeabi_dsub>
 8004e00:	9006      	str	r0, [sp, #24]
 8004e02:	9107      	str	r1, [sp, #28]
 8004e04:	9806      	ldr	r0, [sp, #24]
 8004e06:	9907      	ldr	r1, [sp, #28]
 8004e08:	0032      	movs	r2, r6
 8004e0a:	003b      	movs	r3, r7
 8004e0c:	f7fb fc92 	bl	8000734 <__aeabi_dadd>
 8004e10:	2000      	movs	r0, #0
 8004e12:	2200      	movs	r2, #0
 8004e14:	4b70      	ldr	r3, [pc, #448]	; (8004fd8 <__ieee754_pow+0x9cc>)
 8004e16:	9004      	str	r0, [sp, #16]
 8004e18:	9105      	str	r1, [sp, #20]
 8004e1a:	f7fc fbe5 	bl	80015e8 <__aeabi_dmul>
 8004e1e:	9a06      	ldr	r2, [sp, #24]
 8004e20:	9b07      	ldr	r3, [sp, #28]
 8004e22:	9008      	str	r0, [sp, #32]
 8004e24:	9109      	str	r1, [sp, #36]	; 0x24
 8004e26:	9804      	ldr	r0, [sp, #16]
 8004e28:	9905      	ldr	r1, [sp, #20]
 8004e2a:	f7fc fe9f 	bl	8001b6c <__aeabi_dsub>
 8004e2e:	0002      	movs	r2, r0
 8004e30:	000b      	movs	r3, r1
 8004e32:	0030      	movs	r0, r6
 8004e34:	0039      	movs	r1, r7
 8004e36:	f7fc fe99 	bl	8001b6c <__aeabi_dsub>
 8004e3a:	4a68      	ldr	r2, [pc, #416]	; (8004fdc <__ieee754_pow+0x9d0>)
 8004e3c:	4b68      	ldr	r3, [pc, #416]	; (8004fe0 <__ieee754_pow+0x9d4>)
 8004e3e:	f7fc fbd3 	bl	80015e8 <__aeabi_dmul>
 8004e42:	4a68      	ldr	r2, [pc, #416]	; (8004fe4 <__ieee754_pow+0x9d8>)
 8004e44:	0004      	movs	r4, r0
 8004e46:	000d      	movs	r5, r1
 8004e48:	9804      	ldr	r0, [sp, #16]
 8004e4a:	9905      	ldr	r1, [sp, #20]
 8004e4c:	4b66      	ldr	r3, [pc, #408]	; (8004fe8 <__ieee754_pow+0x9dc>)
 8004e4e:	f7fc fbcb 	bl	80015e8 <__aeabi_dmul>
 8004e52:	0002      	movs	r2, r0
 8004e54:	000b      	movs	r3, r1
 8004e56:	0020      	movs	r0, r4
 8004e58:	0029      	movs	r1, r5
 8004e5a:	f7fb fc6b 	bl	8000734 <__aeabi_dadd>
 8004e5e:	0004      	movs	r4, r0
 8004e60:	000d      	movs	r5, r1
 8004e62:	0002      	movs	r2, r0
 8004e64:	000b      	movs	r3, r1
 8004e66:	9808      	ldr	r0, [sp, #32]
 8004e68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004e6a:	f7fb fc63 	bl	8000734 <__aeabi_dadd>
 8004e6e:	9a08      	ldr	r2, [sp, #32]
 8004e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e72:	0006      	movs	r6, r0
 8004e74:	000f      	movs	r7, r1
 8004e76:	f7fc fe79 	bl	8001b6c <__aeabi_dsub>
 8004e7a:	0002      	movs	r2, r0
 8004e7c:	000b      	movs	r3, r1
 8004e7e:	0020      	movs	r0, r4
 8004e80:	0029      	movs	r1, r5
 8004e82:	f7fc fe73 	bl	8001b6c <__aeabi_dsub>
 8004e86:	0032      	movs	r2, r6
 8004e88:	9004      	str	r0, [sp, #16]
 8004e8a:	9105      	str	r1, [sp, #20]
 8004e8c:	003b      	movs	r3, r7
 8004e8e:	0030      	movs	r0, r6
 8004e90:	0039      	movs	r1, r7
 8004e92:	f7fc fba9 	bl	80015e8 <__aeabi_dmul>
 8004e96:	0004      	movs	r4, r0
 8004e98:	000d      	movs	r5, r1
 8004e9a:	4a54      	ldr	r2, [pc, #336]	; (8004fec <__ieee754_pow+0x9e0>)
 8004e9c:	4b54      	ldr	r3, [pc, #336]	; (8004ff0 <__ieee754_pow+0x9e4>)
 8004e9e:	f7fc fba3 	bl	80015e8 <__aeabi_dmul>
 8004ea2:	4a54      	ldr	r2, [pc, #336]	; (8004ff4 <__ieee754_pow+0x9e8>)
 8004ea4:	4b54      	ldr	r3, [pc, #336]	; (8004ff8 <__ieee754_pow+0x9ec>)
 8004ea6:	f7fc fe61 	bl	8001b6c <__aeabi_dsub>
 8004eaa:	0022      	movs	r2, r4
 8004eac:	002b      	movs	r3, r5
 8004eae:	f7fc fb9b 	bl	80015e8 <__aeabi_dmul>
 8004eb2:	4a52      	ldr	r2, [pc, #328]	; (8004ffc <__ieee754_pow+0x9f0>)
 8004eb4:	4b52      	ldr	r3, [pc, #328]	; (8005000 <__ieee754_pow+0x9f4>)
 8004eb6:	f7fb fc3d 	bl	8000734 <__aeabi_dadd>
 8004eba:	0022      	movs	r2, r4
 8004ebc:	002b      	movs	r3, r5
 8004ebe:	f7fc fb93 	bl	80015e8 <__aeabi_dmul>
 8004ec2:	4a50      	ldr	r2, [pc, #320]	; (8005004 <__ieee754_pow+0x9f8>)
 8004ec4:	4b50      	ldr	r3, [pc, #320]	; (8005008 <__ieee754_pow+0x9fc>)
 8004ec6:	f7fc fe51 	bl	8001b6c <__aeabi_dsub>
 8004eca:	0022      	movs	r2, r4
 8004ecc:	002b      	movs	r3, r5
 8004ece:	f7fc fb8b 	bl	80015e8 <__aeabi_dmul>
 8004ed2:	4a4e      	ldr	r2, [pc, #312]	; (800500c <__ieee754_pow+0xa00>)
 8004ed4:	4b4e      	ldr	r3, [pc, #312]	; (8005010 <__ieee754_pow+0xa04>)
 8004ed6:	f7fb fc2d 	bl	8000734 <__aeabi_dadd>
 8004eda:	0022      	movs	r2, r4
 8004edc:	002b      	movs	r3, r5
 8004ede:	f7fc fb83 	bl	80015e8 <__aeabi_dmul>
 8004ee2:	0002      	movs	r2, r0
 8004ee4:	000b      	movs	r3, r1
 8004ee6:	0030      	movs	r0, r6
 8004ee8:	0039      	movs	r1, r7
 8004eea:	f7fc fe3f 	bl	8001b6c <__aeabi_dsub>
 8004eee:	0004      	movs	r4, r0
 8004ef0:	000d      	movs	r5, r1
 8004ef2:	0002      	movs	r2, r0
 8004ef4:	000b      	movs	r3, r1
 8004ef6:	0030      	movs	r0, r6
 8004ef8:	0039      	movs	r1, r7
 8004efa:	f7fc fb75 	bl	80015e8 <__aeabi_dmul>
 8004efe:	2380      	movs	r3, #128	; 0x80
 8004f00:	9006      	str	r0, [sp, #24]
 8004f02:	9107      	str	r1, [sp, #28]
 8004f04:	2200      	movs	r2, #0
 8004f06:	0020      	movs	r0, r4
 8004f08:	0029      	movs	r1, r5
 8004f0a:	05db      	lsls	r3, r3, #23
 8004f0c:	f7fc fe2e 	bl	8001b6c <__aeabi_dsub>
 8004f10:	0002      	movs	r2, r0
 8004f12:	000b      	movs	r3, r1
 8004f14:	9806      	ldr	r0, [sp, #24]
 8004f16:	9907      	ldr	r1, [sp, #28]
 8004f18:	f7fb ff6c 	bl	8000df4 <__aeabi_ddiv>
 8004f1c:	9a04      	ldr	r2, [sp, #16]
 8004f1e:	9b05      	ldr	r3, [sp, #20]
 8004f20:	0004      	movs	r4, r0
 8004f22:	000d      	movs	r5, r1
 8004f24:	0030      	movs	r0, r6
 8004f26:	0039      	movs	r1, r7
 8004f28:	f7fc fb5e 	bl	80015e8 <__aeabi_dmul>
 8004f2c:	9a04      	ldr	r2, [sp, #16]
 8004f2e:	9b05      	ldr	r3, [sp, #20]
 8004f30:	f7fb fc00 	bl	8000734 <__aeabi_dadd>
 8004f34:	0002      	movs	r2, r0
 8004f36:	000b      	movs	r3, r1
 8004f38:	0020      	movs	r0, r4
 8004f3a:	0029      	movs	r1, r5
 8004f3c:	f7fc fe16 	bl	8001b6c <__aeabi_dsub>
 8004f40:	0032      	movs	r2, r6
 8004f42:	003b      	movs	r3, r7
 8004f44:	f7fc fe12 	bl	8001b6c <__aeabi_dsub>
 8004f48:	0002      	movs	r2, r0
 8004f4a:	000b      	movs	r3, r1
 8004f4c:	2000      	movs	r0, #0
 8004f4e:	4931      	ldr	r1, [pc, #196]	; (8005014 <__ieee754_pow+0xa08>)
 8004f50:	f7fc fe0c 	bl	8001b6c <__aeabi_dsub>
 8004f54:	9b02      	ldr	r3, [sp, #8]
 8004f56:	051b      	lsls	r3, r3, #20
 8004f58:	185b      	adds	r3, r3, r1
 8004f5a:	151a      	asrs	r2, r3, #20
 8004f5c:	2a00      	cmp	r2, #0
 8004f5e:	dc25      	bgt.n	8004fac <__ieee754_pow+0x9a0>
 8004f60:	9a02      	ldr	r2, [sp, #8]
 8004f62:	f000 f861 	bl	8005028 <scalbn>
 8004f66:	9a00      	ldr	r2, [sp, #0]
 8004f68:	9b01      	ldr	r3, [sp, #4]
 8004f6a:	f7ff fc33 	bl	80047d4 <__ieee754_pow+0x1c8>
 8004f6e:	4a2a      	ldr	r2, [pc, #168]	; (8005018 <__ieee754_pow+0xa0c>)
 8004f70:	004b      	lsls	r3, r1, #1
 8004f72:	085b      	lsrs	r3, r3, #1
 8004f74:	4293      	cmp	r3, r2
 8004f76:	dc00      	bgt.n	8004f7a <__ieee754_pow+0x96e>
 8004f78:	e717      	b.n	8004daa <__ieee754_pow+0x79e>
 8004f7a:	4b28      	ldr	r3, [pc, #160]	; (800501c <__ieee754_pow+0xa10>)
 8004f7c:	18cb      	adds	r3, r1, r3
 8004f7e:	4303      	orrs	r3, r0
 8004f80:	d008      	beq.n	8004f94 <__ieee754_pow+0x988>
 8004f82:	9800      	ldr	r0, [sp, #0]
 8004f84:	9901      	ldr	r1, [sp, #4]
 8004f86:	2300      	movs	r3, #0
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f7fb f95f 	bl	800024c <__aeabi_dcmplt>
 8004f8e:	1e43      	subs	r3, r0, #1
 8004f90:	4198      	sbcs	r0, r3
 8004f92:	e462      	b.n	800485a <__ieee754_pow+0x24e>
 8004f94:	9a04      	ldr	r2, [sp, #16]
 8004f96:	9b05      	ldr	r3, [sp, #20]
 8004f98:	f7fc fde8 	bl	8001b6c <__aeabi_dsub>
 8004f9c:	0032      	movs	r2, r6
 8004f9e:	003b      	movs	r3, r7
 8004fa0:	f7fb f972 	bl	8000288 <__aeabi_dcmpge>
 8004fa4:	2800      	cmp	r0, #0
 8004fa6:	d100      	bne.n	8004faa <__ieee754_pow+0x99e>
 8004fa8:	e6ff      	b.n	8004daa <__ieee754_pow+0x79e>
 8004faa:	e7ea      	b.n	8004f82 <__ieee754_pow+0x976>
 8004fac:	0019      	movs	r1, r3
 8004fae:	e7da      	b.n	8004f66 <__ieee754_pow+0x95a>
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	4c18      	ldr	r4, [pc, #96]	; (8005014 <__ieee754_pow+0xa08>)
 8004fb4:	f7ff fbf1 	bl	800479a <__ieee754_pow+0x18e>
 8004fb8:	2300      	movs	r3, #0
 8004fba:	2400      	movs	r4, #0
 8004fbc:	f7ff fbed 	bl	800479a <__ieee754_pow+0x18e>
 8004fc0:	652b82fe 	.word	0x652b82fe
 8004fc4:	3c971547 	.word	0x3c971547
 8004fc8:	3fe00000 	.word	0x3fe00000
 8004fcc:	fffffc02 	.word	0xfffffc02
 8004fd0:	fffffc01 	.word	0xfffffc01
 8004fd4:	fff00000 	.word	0xfff00000
 8004fd8:	3fe62e43 	.word	0x3fe62e43
 8004fdc:	fefa39ef 	.word	0xfefa39ef
 8004fe0:	3fe62e42 	.word	0x3fe62e42
 8004fe4:	0ca86c39 	.word	0x0ca86c39
 8004fe8:	be205c61 	.word	0xbe205c61
 8004fec:	72bea4d0 	.word	0x72bea4d0
 8004ff0:	3e663769 	.word	0x3e663769
 8004ff4:	c5d26bf1 	.word	0xc5d26bf1
 8004ff8:	3ebbbd41 	.word	0x3ebbbd41
 8004ffc:	af25de2c 	.word	0xaf25de2c
 8005000:	3f11566a 	.word	0x3f11566a
 8005004:	16bebd93 	.word	0x16bebd93
 8005008:	3f66c16c 	.word	0x3f66c16c
 800500c:	5555553e 	.word	0x5555553e
 8005010:	3fc55555 	.word	0x3fc55555
 8005014:	3ff00000 	.word	0x3ff00000
 8005018:	4090cbff 	.word	0x4090cbff
 800501c:	3f6f3400 	.word	0x3f6f3400

08005020 <fabs>:
 8005020:	0049      	lsls	r1, r1, #1
 8005022:	084b      	lsrs	r3, r1, #1
 8005024:	0019      	movs	r1, r3
 8005026:	4770      	bx	lr

08005028 <scalbn>:
 8005028:	b570      	push	{r4, r5, r6, lr}
 800502a:	0014      	movs	r4, r2
 800502c:	004a      	lsls	r2, r1, #1
 800502e:	000b      	movs	r3, r1
 8005030:	0d52      	lsrs	r2, r2, #21
 8005032:	d10f      	bne.n	8005054 <scalbn+0x2c>
 8005034:	004b      	lsls	r3, r1, #1
 8005036:	085b      	lsrs	r3, r3, #1
 8005038:	4303      	orrs	r3, r0
 800503a:	d011      	beq.n	8005060 <scalbn+0x38>
 800503c:	4b22      	ldr	r3, [pc, #136]	; (80050c8 <scalbn+0xa0>)
 800503e:	2200      	movs	r2, #0
 8005040:	f7fc fad2 	bl	80015e8 <__aeabi_dmul>
 8005044:	4b21      	ldr	r3, [pc, #132]	; (80050cc <scalbn+0xa4>)
 8005046:	429c      	cmp	r4, r3
 8005048:	da0b      	bge.n	8005062 <scalbn+0x3a>
 800504a:	4a21      	ldr	r2, [pc, #132]	; (80050d0 <scalbn+0xa8>)
 800504c:	4b21      	ldr	r3, [pc, #132]	; (80050d4 <scalbn+0xac>)
 800504e:	f7fc facb 	bl	80015e8 <__aeabi_dmul>
 8005052:	e005      	b.n	8005060 <scalbn+0x38>
 8005054:	4d20      	ldr	r5, [pc, #128]	; (80050d8 <scalbn+0xb0>)
 8005056:	42aa      	cmp	r2, r5
 8005058:	d107      	bne.n	800506a <scalbn+0x42>
 800505a:	0002      	movs	r2, r0
 800505c:	f7fb fb6a 	bl	8000734 <__aeabi_dadd>
 8005060:	bd70      	pop	{r4, r5, r6, pc}
 8005062:	000b      	movs	r3, r1
 8005064:	004a      	lsls	r2, r1, #1
 8005066:	0d52      	lsrs	r2, r2, #21
 8005068:	3a36      	subs	r2, #54	; 0x36
 800506a:	4d1c      	ldr	r5, [pc, #112]	; (80050dc <scalbn+0xb4>)
 800506c:	42ac      	cmp	r4, r5
 800506e:	dd0a      	ble.n	8005086 <scalbn+0x5e>
 8005070:	4c1b      	ldr	r4, [pc, #108]	; (80050e0 <scalbn+0xb8>)
 8005072:	4d1c      	ldr	r5, [pc, #112]	; (80050e4 <scalbn+0xbc>)
 8005074:	2900      	cmp	r1, #0
 8005076:	da01      	bge.n	800507c <scalbn+0x54>
 8005078:	4c19      	ldr	r4, [pc, #100]	; (80050e0 <scalbn+0xb8>)
 800507a:	4d1b      	ldr	r5, [pc, #108]	; (80050e8 <scalbn+0xc0>)
 800507c:	4a18      	ldr	r2, [pc, #96]	; (80050e0 <scalbn+0xb8>)
 800507e:	4b19      	ldr	r3, [pc, #100]	; (80050e4 <scalbn+0xbc>)
 8005080:	0020      	movs	r0, r4
 8005082:	0029      	movs	r1, r5
 8005084:	e7e3      	b.n	800504e <scalbn+0x26>
 8005086:	18a2      	adds	r2, r4, r2
 8005088:	4c18      	ldr	r4, [pc, #96]	; (80050ec <scalbn+0xc4>)
 800508a:	42a2      	cmp	r2, r4
 800508c:	dcf0      	bgt.n	8005070 <scalbn+0x48>
 800508e:	2a00      	cmp	r2, #0
 8005090:	dd05      	ble.n	800509e <scalbn+0x76>
 8005092:	4c17      	ldr	r4, [pc, #92]	; (80050f0 <scalbn+0xc8>)
 8005094:	0512      	lsls	r2, r2, #20
 8005096:	4023      	ands	r3, r4
 8005098:	4313      	orrs	r3, r2
 800509a:	0019      	movs	r1, r3
 800509c:	e7e0      	b.n	8005060 <scalbn+0x38>
 800509e:	0014      	movs	r4, r2
 80050a0:	3435      	adds	r4, #53	; 0x35
 80050a2:	da08      	bge.n	80050b6 <scalbn+0x8e>
 80050a4:	4c0a      	ldr	r4, [pc, #40]	; (80050d0 <scalbn+0xa8>)
 80050a6:	4d0b      	ldr	r5, [pc, #44]	; (80050d4 <scalbn+0xac>)
 80050a8:	2900      	cmp	r1, #0
 80050aa:	da01      	bge.n	80050b0 <scalbn+0x88>
 80050ac:	4c08      	ldr	r4, [pc, #32]	; (80050d0 <scalbn+0xa8>)
 80050ae:	4d11      	ldr	r5, [pc, #68]	; (80050f4 <scalbn+0xcc>)
 80050b0:	4a07      	ldr	r2, [pc, #28]	; (80050d0 <scalbn+0xa8>)
 80050b2:	4b08      	ldr	r3, [pc, #32]	; (80050d4 <scalbn+0xac>)
 80050b4:	e7e4      	b.n	8005080 <scalbn+0x58>
 80050b6:	4c0e      	ldr	r4, [pc, #56]	; (80050f0 <scalbn+0xc8>)
 80050b8:	3236      	adds	r2, #54	; 0x36
 80050ba:	4023      	ands	r3, r4
 80050bc:	0512      	lsls	r2, r2, #20
 80050be:	431a      	orrs	r2, r3
 80050c0:	0011      	movs	r1, r2
 80050c2:	4b0d      	ldr	r3, [pc, #52]	; (80050f8 <scalbn+0xd0>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	e7c2      	b.n	800504e <scalbn+0x26>
 80050c8:	43500000 	.word	0x43500000
 80050cc:	ffff3cb0 	.word	0xffff3cb0
 80050d0:	c2f8f359 	.word	0xc2f8f359
 80050d4:	01a56e1f 	.word	0x01a56e1f
 80050d8:	000007ff 	.word	0x000007ff
 80050dc:	0000c350 	.word	0x0000c350
 80050e0:	8800759c 	.word	0x8800759c
 80050e4:	7e37e43c 	.word	0x7e37e43c
 80050e8:	fe37e43c 	.word	0xfe37e43c
 80050ec:	000007fe 	.word	0x000007fe
 80050f0:	800fffff 	.word	0x800fffff
 80050f4:	81a56e1f 	.word	0x81a56e1f
 80050f8:	3c900000 	.word	0x3c900000

080050fc <with_errno>:
 80050fc:	b570      	push	{r4, r5, r6, lr}
 80050fe:	000d      	movs	r5, r1
 8005100:	0016      	movs	r6, r2
 8005102:	0004      	movs	r4, r0
 8005104:	f7ff f924 	bl	8004350 <__errno>
 8005108:	0029      	movs	r1, r5
 800510a:	6006      	str	r6, [r0, #0]
 800510c:	0020      	movs	r0, r4
 800510e:	bd70      	pop	{r4, r5, r6, pc}

08005110 <xflow>:
 8005110:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005112:	0015      	movs	r5, r2
 8005114:	001c      	movs	r4, r3
 8005116:	2800      	cmp	r0, #0
 8005118:	d010      	beq.n	800513c <xflow+0x2c>
 800511a:	2380      	movs	r3, #128	; 0x80
 800511c:	0010      	movs	r0, r2
 800511e:	061b      	lsls	r3, r3, #24
 8005120:	18e1      	adds	r1, r4, r3
 8005122:	9000      	str	r0, [sp, #0]
 8005124:	9101      	str	r1, [sp, #4]
 8005126:	9a00      	ldr	r2, [sp, #0]
 8005128:	9b01      	ldr	r3, [sp, #4]
 800512a:	0028      	movs	r0, r5
 800512c:	0021      	movs	r1, r4
 800512e:	f7fc fa5b 	bl	80015e8 <__aeabi_dmul>
 8005132:	2222      	movs	r2, #34	; 0x22
 8005134:	f7ff ffe2 	bl	80050fc <with_errno>
 8005138:	b003      	add	sp, #12
 800513a:	bd30      	pop	{r4, r5, pc}
 800513c:	0010      	movs	r0, r2
 800513e:	0019      	movs	r1, r3
 8005140:	e7ef      	b.n	8005122 <xflow+0x12>

08005142 <__math_uflow>:
 8005142:	2380      	movs	r3, #128	; 0x80
 8005144:	b510      	push	{r4, lr}
 8005146:	2200      	movs	r2, #0
 8005148:	055b      	lsls	r3, r3, #21
 800514a:	f7ff ffe1 	bl	8005110 <xflow>
 800514e:	bd10      	pop	{r4, pc}

08005150 <__math_oflow>:
 8005150:	23e0      	movs	r3, #224	; 0xe0
 8005152:	b510      	push	{r4, lr}
 8005154:	2200      	movs	r2, #0
 8005156:	05db      	lsls	r3, r3, #23
 8005158:	f7ff ffda 	bl	8005110 <xflow>
 800515c:	bd10      	pop	{r4, pc}
	...

08005160 <__ieee754_sqrt>:
 8005160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005162:	000a      	movs	r2, r1
 8005164:	000c      	movs	r4, r1
 8005166:	496f      	ldr	r1, [pc, #444]	; (8005324 <__ieee754_sqrt+0x1c4>)
 8005168:	0005      	movs	r5, r0
 800516a:	0003      	movs	r3, r0
 800516c:	0008      	movs	r0, r1
 800516e:	b087      	sub	sp, #28
 8005170:	4020      	ands	r0, r4
 8005172:	4288      	cmp	r0, r1
 8005174:	d111      	bne.n	800519a <__ieee754_sqrt+0x3a>
 8005176:	002a      	movs	r2, r5
 8005178:	0023      	movs	r3, r4
 800517a:	0028      	movs	r0, r5
 800517c:	0021      	movs	r1, r4
 800517e:	f7fc fa33 	bl	80015e8 <__aeabi_dmul>
 8005182:	0002      	movs	r2, r0
 8005184:	000b      	movs	r3, r1
 8005186:	0028      	movs	r0, r5
 8005188:	0021      	movs	r1, r4
 800518a:	f7fb fad3 	bl	8000734 <__aeabi_dadd>
 800518e:	0005      	movs	r5, r0
 8005190:	000c      	movs	r4, r1
 8005192:	0028      	movs	r0, r5
 8005194:	0021      	movs	r1, r4
 8005196:	b007      	add	sp, #28
 8005198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800519a:	2c00      	cmp	r4, #0
 800519c:	dc12      	bgt.n	80051c4 <__ieee754_sqrt+0x64>
 800519e:	0061      	lsls	r1, r4, #1
 80051a0:	0849      	lsrs	r1, r1, #1
 80051a2:	4329      	orrs	r1, r5
 80051a4:	d0f5      	beq.n	8005192 <__ieee754_sqrt+0x32>
 80051a6:	2100      	movs	r1, #0
 80051a8:	428c      	cmp	r4, r1
 80051aa:	d100      	bne.n	80051ae <__ieee754_sqrt+0x4e>
 80051ac:	e09f      	b.n	80052ee <__ieee754_sqrt+0x18e>
 80051ae:	002a      	movs	r2, r5
 80051b0:	0023      	movs	r3, r4
 80051b2:	0028      	movs	r0, r5
 80051b4:	0021      	movs	r1, r4
 80051b6:	f7fc fcd9 	bl	8001b6c <__aeabi_dsub>
 80051ba:	0002      	movs	r2, r0
 80051bc:	000b      	movs	r3, r1
 80051be:	f7fb fe19 	bl	8000df4 <__aeabi_ddiv>
 80051c2:	e7e4      	b.n	800518e <__ieee754_sqrt+0x2e>
 80051c4:	1521      	asrs	r1, r4, #20
 80051c6:	d100      	bne.n	80051ca <__ieee754_sqrt+0x6a>
 80051c8:	e091      	b.n	80052ee <__ieee754_sqrt+0x18e>
 80051ca:	4857      	ldr	r0, [pc, #348]	; (8005328 <__ieee754_sqrt+0x1c8>)
 80051cc:	0312      	lsls	r2, r2, #12
 80051ce:	180c      	adds	r4, r1, r0
 80051d0:	2080      	movs	r0, #128	; 0x80
 80051d2:	0b12      	lsrs	r2, r2, #12
 80051d4:	0340      	lsls	r0, r0, #13
 80051d6:	4310      	orrs	r0, r2
 80051d8:	07c9      	lsls	r1, r1, #31
 80051da:	d403      	bmi.n	80051e4 <__ieee754_sqrt+0x84>
 80051dc:	0fda      	lsrs	r2, r3, #31
 80051de:	0040      	lsls	r0, r0, #1
 80051e0:	1810      	adds	r0, r2, r0
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	2500      	movs	r5, #0
 80051e6:	1062      	asrs	r2, r4, #1
 80051e8:	0040      	lsls	r0, r0, #1
 80051ea:	2480      	movs	r4, #128	; 0x80
 80051ec:	9205      	str	r2, [sp, #20]
 80051ee:	0fda      	lsrs	r2, r3, #31
 80051f0:	1812      	adds	r2, r2, r0
 80051f2:	0029      	movs	r1, r5
 80051f4:	2016      	movs	r0, #22
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	03a4      	lsls	r4, r4, #14
 80051fa:	190e      	adds	r6, r1, r4
 80051fc:	4296      	cmp	r6, r2
 80051fe:	dc02      	bgt.n	8005206 <__ieee754_sqrt+0xa6>
 8005200:	1931      	adds	r1, r6, r4
 8005202:	1b92      	subs	r2, r2, r6
 8005204:	192d      	adds	r5, r5, r4
 8005206:	0fde      	lsrs	r6, r3, #31
 8005208:	0052      	lsls	r2, r2, #1
 800520a:	3801      	subs	r0, #1
 800520c:	18b2      	adds	r2, r6, r2
 800520e:	005b      	lsls	r3, r3, #1
 8005210:	0864      	lsrs	r4, r4, #1
 8005212:	2800      	cmp	r0, #0
 8005214:	d1f1      	bne.n	80051fa <__ieee754_sqrt+0x9a>
 8005216:	2620      	movs	r6, #32
 8005218:	2780      	movs	r7, #128	; 0x80
 800521a:	0004      	movs	r4, r0
 800521c:	9604      	str	r6, [sp, #16]
 800521e:	063f      	lsls	r7, r7, #24
 8005220:	183e      	adds	r6, r7, r0
 8005222:	46b4      	mov	ip, r6
 8005224:	428a      	cmp	r2, r1
 8005226:	dc02      	bgt.n	800522e <__ieee754_sqrt+0xce>
 8005228:	d114      	bne.n	8005254 <__ieee754_sqrt+0xf4>
 800522a:	429e      	cmp	r6, r3
 800522c:	d812      	bhi.n	8005254 <__ieee754_sqrt+0xf4>
 800522e:	4660      	mov	r0, ip
 8005230:	4666      	mov	r6, ip
 8005232:	19c0      	adds	r0, r0, r7
 8005234:	9100      	str	r1, [sp, #0]
 8005236:	2e00      	cmp	r6, #0
 8005238:	da03      	bge.n	8005242 <__ieee754_sqrt+0xe2>
 800523a:	43c6      	mvns	r6, r0
 800523c:	0ff6      	lsrs	r6, r6, #31
 800523e:	198e      	adds	r6, r1, r6
 8005240:	9600      	str	r6, [sp, #0]
 8005242:	1a52      	subs	r2, r2, r1
 8005244:	4563      	cmp	r3, ip
 8005246:	4189      	sbcs	r1, r1
 8005248:	4249      	negs	r1, r1
 800524a:	1a52      	subs	r2, r2, r1
 800524c:	4661      	mov	r1, ip
 800524e:	1a5b      	subs	r3, r3, r1
 8005250:	9900      	ldr	r1, [sp, #0]
 8005252:	19e4      	adds	r4, r4, r7
 8005254:	0fde      	lsrs	r6, r3, #31
 8005256:	0052      	lsls	r2, r2, #1
 8005258:	18b2      	adds	r2, r6, r2
 800525a:	9e04      	ldr	r6, [sp, #16]
 800525c:	005b      	lsls	r3, r3, #1
 800525e:	3e01      	subs	r6, #1
 8005260:	087f      	lsrs	r7, r7, #1
 8005262:	9604      	str	r6, [sp, #16]
 8005264:	2e00      	cmp	r6, #0
 8005266:	d1db      	bne.n	8005220 <__ieee754_sqrt+0xc0>
 8005268:	431a      	orrs	r2, r3
 800526a:	d01f      	beq.n	80052ac <__ieee754_sqrt+0x14c>
 800526c:	4e2f      	ldr	r6, [pc, #188]	; (800532c <__ieee754_sqrt+0x1cc>)
 800526e:	4f30      	ldr	r7, [pc, #192]	; (8005330 <__ieee754_sqrt+0x1d0>)
 8005270:	6830      	ldr	r0, [r6, #0]
 8005272:	6871      	ldr	r1, [r6, #4]
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	9200      	str	r2, [sp, #0]
 800527a:	9301      	str	r3, [sp, #4]
 800527c:	6832      	ldr	r2, [r6, #0]
 800527e:	6873      	ldr	r3, [r6, #4]
 8005280:	9202      	str	r2, [sp, #8]
 8005282:	9303      	str	r3, [sp, #12]
 8005284:	9a00      	ldr	r2, [sp, #0]
 8005286:	9b01      	ldr	r3, [sp, #4]
 8005288:	f7fc fc70 	bl	8001b6c <__aeabi_dsub>
 800528c:	0002      	movs	r2, r0
 800528e:	000b      	movs	r3, r1
 8005290:	9802      	ldr	r0, [sp, #8]
 8005292:	9903      	ldr	r1, [sp, #12]
 8005294:	f7fa ffe4 	bl	8000260 <__aeabi_dcmple>
 8005298:	2800      	cmp	r0, #0
 800529a:	d007      	beq.n	80052ac <__ieee754_sqrt+0x14c>
 800529c:	6830      	ldr	r0, [r6, #0]
 800529e:	6871      	ldr	r1, [r6, #4]
 80052a0:	683a      	ldr	r2, [r7, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	1c67      	adds	r7, r4, #1
 80052a6:	d127      	bne.n	80052f8 <__ieee754_sqrt+0x198>
 80052a8:	9c04      	ldr	r4, [sp, #16]
 80052aa:	3501      	adds	r5, #1
 80052ac:	4b21      	ldr	r3, [pc, #132]	; (8005334 <__ieee754_sqrt+0x1d4>)
 80052ae:	1069      	asrs	r1, r5, #1
 80052b0:	18c9      	adds	r1, r1, r3
 80052b2:	0864      	lsrs	r4, r4, #1
 80052b4:	07ed      	lsls	r5, r5, #31
 80052b6:	d502      	bpl.n	80052be <__ieee754_sqrt+0x15e>
 80052b8:	2380      	movs	r3, #128	; 0x80
 80052ba:	061b      	lsls	r3, r3, #24
 80052bc:	431c      	orrs	r4, r3
 80052be:	9b05      	ldr	r3, [sp, #20]
 80052c0:	0025      	movs	r5, r4
 80052c2:	0518      	lsls	r0, r3, #20
 80052c4:	1843      	adds	r3, r0, r1
 80052c6:	001c      	movs	r4, r3
 80052c8:	e763      	b.n	8005192 <__ieee754_sqrt+0x32>
 80052ca:	0ada      	lsrs	r2, r3, #11
 80052cc:	3815      	subs	r0, #21
 80052ce:	055b      	lsls	r3, r3, #21
 80052d0:	2a00      	cmp	r2, #0
 80052d2:	d0fa      	beq.n	80052ca <__ieee754_sqrt+0x16a>
 80052d4:	2480      	movs	r4, #128	; 0x80
 80052d6:	0364      	lsls	r4, r4, #13
 80052d8:	4222      	tst	r2, r4
 80052da:	d00a      	beq.n	80052f2 <__ieee754_sqrt+0x192>
 80052dc:	2420      	movs	r4, #32
 80052de:	001e      	movs	r6, r3
 80052e0:	1a64      	subs	r4, r4, r1
 80052e2:	40e6      	lsrs	r6, r4
 80052e4:	1e4d      	subs	r5, r1, #1
 80052e6:	408b      	lsls	r3, r1
 80052e8:	4332      	orrs	r2, r6
 80052ea:	1b41      	subs	r1, r0, r5
 80052ec:	e76d      	b.n	80051ca <__ieee754_sqrt+0x6a>
 80052ee:	2000      	movs	r0, #0
 80052f0:	e7ee      	b.n	80052d0 <__ieee754_sqrt+0x170>
 80052f2:	0052      	lsls	r2, r2, #1
 80052f4:	3101      	adds	r1, #1
 80052f6:	e7ef      	b.n	80052d8 <__ieee754_sqrt+0x178>
 80052f8:	f7fb fa1c 	bl	8000734 <__aeabi_dadd>
 80052fc:	6877      	ldr	r7, [r6, #4]
 80052fe:	6836      	ldr	r6, [r6, #0]
 8005300:	0002      	movs	r2, r0
 8005302:	000b      	movs	r3, r1
 8005304:	0030      	movs	r0, r6
 8005306:	0039      	movs	r1, r7
 8005308:	f7fa ffa0 	bl	800024c <__aeabi_dcmplt>
 800530c:	2800      	cmp	r0, #0
 800530e:	d004      	beq.n	800531a <__ieee754_sqrt+0x1ba>
 8005310:	3402      	adds	r4, #2
 8005312:	4263      	negs	r3, r4
 8005314:	4163      	adcs	r3, r4
 8005316:	18ed      	adds	r5, r5, r3
 8005318:	e7c8      	b.n	80052ac <__ieee754_sqrt+0x14c>
 800531a:	2301      	movs	r3, #1
 800531c:	3401      	adds	r4, #1
 800531e:	439c      	bics	r4, r3
 8005320:	e7c4      	b.n	80052ac <__ieee754_sqrt+0x14c>
 8005322:	46c0      	nop			; (mov r8, r8)
 8005324:	7ff00000 	.word	0x7ff00000
 8005328:	fffffc01 	.word	0xfffffc01
 800532c:	20000070 	.word	0x20000070
 8005330:	20000078 	.word	0x20000078
 8005334:	3fe00000 	.word	0x3fe00000

08005338 <__ieee754_log>:
 8005338:	2280      	movs	r2, #128	; 0x80
 800533a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800533c:	000b      	movs	r3, r1
 800533e:	b08d      	sub	sp, #52	; 0x34
 8005340:	0352      	lsls	r2, r2, #13
 8005342:	4291      	cmp	r1, r2
 8005344:	da22      	bge.n	800538c <__ieee754_log+0x54>
 8005346:	004a      	lsls	r2, r1, #1
 8005348:	0852      	lsrs	r2, r2, #1
 800534a:	4302      	orrs	r2, r0
 800534c:	d107      	bne.n	800535e <__ieee754_log+0x26>
 800534e:	2200      	movs	r2, #0
 8005350:	2300      	movs	r3, #0
 8005352:	2000      	movs	r0, #0
 8005354:	49b3      	ldr	r1, [pc, #716]	; (8005624 <__ieee754_log+0x2ec>)
 8005356:	f7fb fd4d 	bl	8000df4 <__aeabi_ddiv>
 800535a:	b00d      	add	sp, #52	; 0x34
 800535c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800535e:	2900      	cmp	r1, #0
 8005360:	da05      	bge.n	800536e <__ieee754_log+0x36>
 8005362:	0002      	movs	r2, r0
 8005364:	f7fc fc02 	bl	8001b6c <__aeabi_dsub>
 8005368:	2200      	movs	r2, #0
 800536a:	2300      	movs	r3, #0
 800536c:	e7f3      	b.n	8005356 <__ieee754_log+0x1e>
 800536e:	4bae      	ldr	r3, [pc, #696]	; (8005628 <__ieee754_log+0x2f0>)
 8005370:	2200      	movs	r2, #0
 8005372:	f7fc f939 	bl	80015e8 <__aeabi_dmul>
 8005376:	2436      	movs	r4, #54	; 0x36
 8005378:	000b      	movs	r3, r1
 800537a:	4264      	negs	r4, r4
 800537c:	4aab      	ldr	r2, [pc, #684]	; (800562c <__ieee754_log+0x2f4>)
 800537e:	4293      	cmp	r3, r2
 8005380:	dd06      	ble.n	8005390 <__ieee754_log+0x58>
 8005382:	0002      	movs	r2, r0
 8005384:	000b      	movs	r3, r1
 8005386:	f7fb f9d5 	bl	8000734 <__aeabi_dadd>
 800538a:	e7e6      	b.n	800535a <__ieee754_log+0x22>
 800538c:	2400      	movs	r4, #0
 800538e:	e7f5      	b.n	800537c <__ieee754_log+0x44>
 8005390:	4da7      	ldr	r5, [pc, #668]	; (8005630 <__ieee754_log+0x2f8>)
 8005392:	151a      	asrs	r2, r3, #20
 8005394:	1952      	adds	r2, r2, r5
 8005396:	1912      	adds	r2, r2, r4
 8005398:	031b      	lsls	r3, r3, #12
 800539a:	4ca6      	ldr	r4, [pc, #664]	; (8005634 <__ieee754_log+0x2fc>)
 800539c:	0b1b      	lsrs	r3, r3, #12
 800539e:	9302      	str	r3, [sp, #8]
 80053a0:	191b      	adds	r3, r3, r4
 80053a2:	2480      	movs	r4, #128	; 0x80
 80053a4:	0364      	lsls	r4, r4, #13
 80053a6:	4023      	ands	r3, r4
 80053a8:	4ca3      	ldr	r4, [pc, #652]	; (8005638 <__ieee754_log+0x300>)
 80053aa:	9d02      	ldr	r5, [sp, #8]
 80053ac:	405c      	eors	r4, r3
 80053ae:	151b      	asrs	r3, r3, #20
 80053b0:	189b      	adds	r3, r3, r2
 80053b2:	4325      	orrs	r5, r4
 80053b4:	2200      	movs	r2, #0
 80053b6:	9300      	str	r3, [sp, #0]
 80053b8:	0029      	movs	r1, r5
 80053ba:	4b9f      	ldr	r3, [pc, #636]	; (8005638 <__ieee754_log+0x300>)
 80053bc:	f7fc fbd6 	bl	8001b6c <__aeabi_dsub>
 80053c0:	9b02      	ldr	r3, [sp, #8]
 80053c2:	0006      	movs	r6, r0
 80053c4:	3302      	adds	r3, #2
 80053c6:	031b      	lsls	r3, r3, #12
 80053c8:	000f      	movs	r7, r1
 80053ca:	2200      	movs	r2, #0
 80053cc:	0b1b      	lsrs	r3, r3, #12
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	dc64      	bgt.n	800549c <__ieee754_log+0x164>
 80053d2:	2300      	movs	r3, #0
 80053d4:	f7fa ff34 	bl	8000240 <__aeabi_dcmpeq>
 80053d8:	2800      	cmp	r0, #0
 80053da:	d019      	beq.n	8005410 <__ieee754_log+0xd8>
 80053dc:	9b00      	ldr	r3, [sp, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d100      	bne.n	80053e4 <__ieee754_log+0xac>
 80053e2:	e11c      	b.n	800561e <__ieee754_log+0x2e6>
 80053e4:	0018      	movs	r0, r3
 80053e6:	f7fc ff61 	bl	80022ac <__aeabi_i2d>
 80053ea:	4a94      	ldr	r2, [pc, #592]	; (800563c <__ieee754_log+0x304>)
 80053ec:	4b94      	ldr	r3, [pc, #592]	; (8005640 <__ieee754_log+0x308>)
 80053ee:	0004      	movs	r4, r0
 80053f0:	000d      	movs	r5, r1
 80053f2:	f7fc f8f9 	bl	80015e8 <__aeabi_dmul>
 80053f6:	4a93      	ldr	r2, [pc, #588]	; (8005644 <__ieee754_log+0x30c>)
 80053f8:	0006      	movs	r6, r0
 80053fa:	000f      	movs	r7, r1
 80053fc:	4b92      	ldr	r3, [pc, #584]	; (8005648 <__ieee754_log+0x310>)
 80053fe:	0020      	movs	r0, r4
 8005400:	0029      	movs	r1, r5
 8005402:	f7fc f8f1 	bl	80015e8 <__aeabi_dmul>
 8005406:	0002      	movs	r2, r0
 8005408:	000b      	movs	r3, r1
 800540a:	0030      	movs	r0, r6
 800540c:	0039      	movs	r1, r7
 800540e:	e7ba      	b.n	8005386 <__ieee754_log+0x4e>
 8005410:	4a8e      	ldr	r2, [pc, #568]	; (800564c <__ieee754_log+0x314>)
 8005412:	4b8f      	ldr	r3, [pc, #572]	; (8005650 <__ieee754_log+0x318>)
 8005414:	0030      	movs	r0, r6
 8005416:	0039      	movs	r1, r7
 8005418:	f7fc f8e6 	bl	80015e8 <__aeabi_dmul>
 800541c:	0002      	movs	r2, r0
 800541e:	000b      	movs	r3, r1
 8005420:	2000      	movs	r0, #0
 8005422:	498c      	ldr	r1, [pc, #560]	; (8005654 <__ieee754_log+0x31c>)
 8005424:	f7fc fba2 	bl	8001b6c <__aeabi_dsub>
 8005428:	0032      	movs	r2, r6
 800542a:	0004      	movs	r4, r0
 800542c:	000d      	movs	r5, r1
 800542e:	003b      	movs	r3, r7
 8005430:	0030      	movs	r0, r6
 8005432:	0039      	movs	r1, r7
 8005434:	f7fc f8d8 	bl	80015e8 <__aeabi_dmul>
 8005438:	000b      	movs	r3, r1
 800543a:	0002      	movs	r2, r0
 800543c:	0029      	movs	r1, r5
 800543e:	0020      	movs	r0, r4
 8005440:	f7fc f8d2 	bl	80015e8 <__aeabi_dmul>
 8005444:	9b00      	ldr	r3, [sp, #0]
 8005446:	9002      	str	r0, [sp, #8]
 8005448:	9103      	str	r1, [sp, #12]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d106      	bne.n	800545c <__ieee754_log+0x124>
 800544e:	0002      	movs	r2, r0
 8005450:	000b      	movs	r3, r1
 8005452:	0030      	movs	r0, r6
 8005454:	0039      	movs	r1, r7
 8005456:	f7fc fb89 	bl	8001b6c <__aeabi_dsub>
 800545a:	e77e      	b.n	800535a <__ieee754_log+0x22>
 800545c:	9800      	ldr	r0, [sp, #0]
 800545e:	f7fc ff25 	bl	80022ac <__aeabi_i2d>
 8005462:	4a76      	ldr	r2, [pc, #472]	; (800563c <__ieee754_log+0x304>)
 8005464:	4b76      	ldr	r3, [pc, #472]	; (8005640 <__ieee754_log+0x308>)
 8005466:	0004      	movs	r4, r0
 8005468:	000d      	movs	r5, r1
 800546a:	f7fc f8bd 	bl	80015e8 <__aeabi_dmul>
 800546e:	4a75      	ldr	r2, [pc, #468]	; (8005644 <__ieee754_log+0x30c>)
 8005470:	9000      	str	r0, [sp, #0]
 8005472:	9101      	str	r1, [sp, #4]
 8005474:	4b74      	ldr	r3, [pc, #464]	; (8005648 <__ieee754_log+0x310>)
 8005476:	0020      	movs	r0, r4
 8005478:	0029      	movs	r1, r5
 800547a:	f7fc f8b5 	bl	80015e8 <__aeabi_dmul>
 800547e:	0002      	movs	r2, r0
 8005480:	000b      	movs	r3, r1
 8005482:	9802      	ldr	r0, [sp, #8]
 8005484:	9903      	ldr	r1, [sp, #12]
 8005486:	f7fc fb71 	bl	8001b6c <__aeabi_dsub>
 800548a:	0032      	movs	r2, r6
 800548c:	003b      	movs	r3, r7
 800548e:	f7fc fb6d 	bl	8001b6c <__aeabi_dsub>
 8005492:	0002      	movs	r2, r0
 8005494:	000b      	movs	r3, r1
 8005496:	9800      	ldr	r0, [sp, #0]
 8005498:	9901      	ldr	r1, [sp, #4]
 800549a:	e7dc      	b.n	8005456 <__ieee754_log+0x11e>
 800549c:	2380      	movs	r3, #128	; 0x80
 800549e:	05db      	lsls	r3, r3, #23
 80054a0:	f7fb f948 	bl	8000734 <__aeabi_dadd>
 80054a4:	0002      	movs	r2, r0
 80054a6:	000b      	movs	r3, r1
 80054a8:	0030      	movs	r0, r6
 80054aa:	0039      	movs	r1, r7
 80054ac:	f7fb fca2 	bl	8000df4 <__aeabi_ddiv>
 80054b0:	9004      	str	r0, [sp, #16]
 80054b2:	9105      	str	r1, [sp, #20]
 80054b4:	9800      	ldr	r0, [sp, #0]
 80054b6:	f7fc fef9 	bl	80022ac <__aeabi_i2d>
 80054ba:	9a04      	ldr	r2, [sp, #16]
 80054bc:	9b05      	ldr	r3, [sp, #20]
 80054be:	9006      	str	r0, [sp, #24]
 80054c0:	9107      	str	r1, [sp, #28]
 80054c2:	0010      	movs	r0, r2
 80054c4:	0019      	movs	r1, r3
 80054c6:	f7fc f88f 	bl	80015e8 <__aeabi_dmul>
 80054ca:	4a63      	ldr	r2, [pc, #396]	; (8005658 <__ieee754_log+0x320>)
 80054cc:	9b02      	ldr	r3, [sp, #8]
 80054ce:	4694      	mov	ip, r2
 80054d0:	4463      	add	r3, ip
 80054d2:	0002      	movs	r2, r0
 80054d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80054d6:	000b      	movs	r3, r1
 80054d8:	9008      	str	r0, [sp, #32]
 80054da:	9109      	str	r1, [sp, #36]	; 0x24
 80054dc:	f7fc f884 	bl	80015e8 <__aeabi_dmul>
 80054e0:	0004      	movs	r4, r0
 80054e2:	000d      	movs	r5, r1
 80054e4:	4a5d      	ldr	r2, [pc, #372]	; (800565c <__ieee754_log+0x324>)
 80054e6:	4b5e      	ldr	r3, [pc, #376]	; (8005660 <__ieee754_log+0x328>)
 80054e8:	f7fc f87e 	bl	80015e8 <__aeabi_dmul>
 80054ec:	4a5d      	ldr	r2, [pc, #372]	; (8005664 <__ieee754_log+0x32c>)
 80054ee:	4b5e      	ldr	r3, [pc, #376]	; (8005668 <__ieee754_log+0x330>)
 80054f0:	f7fb f920 	bl	8000734 <__aeabi_dadd>
 80054f4:	0022      	movs	r2, r4
 80054f6:	002b      	movs	r3, r5
 80054f8:	f7fc f876 	bl	80015e8 <__aeabi_dmul>
 80054fc:	4a5b      	ldr	r2, [pc, #364]	; (800566c <__ieee754_log+0x334>)
 80054fe:	4b5c      	ldr	r3, [pc, #368]	; (8005670 <__ieee754_log+0x338>)
 8005500:	f7fb f918 	bl	8000734 <__aeabi_dadd>
 8005504:	0022      	movs	r2, r4
 8005506:	002b      	movs	r3, r5
 8005508:	f7fc f86e 	bl	80015e8 <__aeabi_dmul>
 800550c:	4a59      	ldr	r2, [pc, #356]	; (8005674 <__ieee754_log+0x33c>)
 800550e:	4b5a      	ldr	r3, [pc, #360]	; (8005678 <__ieee754_log+0x340>)
 8005510:	f7fb f910 	bl	8000734 <__aeabi_dadd>
 8005514:	9a08      	ldr	r2, [sp, #32]
 8005516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005518:	f7fc f866 	bl	80015e8 <__aeabi_dmul>
 800551c:	4a57      	ldr	r2, [pc, #348]	; (800567c <__ieee754_log+0x344>)
 800551e:	9008      	str	r0, [sp, #32]
 8005520:	9109      	str	r1, [sp, #36]	; 0x24
 8005522:	4b57      	ldr	r3, [pc, #348]	; (8005680 <__ieee754_log+0x348>)
 8005524:	0020      	movs	r0, r4
 8005526:	0029      	movs	r1, r5
 8005528:	f7fc f85e 	bl	80015e8 <__aeabi_dmul>
 800552c:	4a55      	ldr	r2, [pc, #340]	; (8005684 <__ieee754_log+0x34c>)
 800552e:	4b56      	ldr	r3, [pc, #344]	; (8005688 <__ieee754_log+0x350>)
 8005530:	f7fb f900 	bl	8000734 <__aeabi_dadd>
 8005534:	0022      	movs	r2, r4
 8005536:	002b      	movs	r3, r5
 8005538:	f7fc f856 	bl	80015e8 <__aeabi_dmul>
 800553c:	4a53      	ldr	r2, [pc, #332]	; (800568c <__ieee754_log+0x354>)
 800553e:	4b54      	ldr	r3, [pc, #336]	; (8005690 <__ieee754_log+0x358>)
 8005540:	f7fb f8f8 	bl	8000734 <__aeabi_dadd>
 8005544:	0022      	movs	r2, r4
 8005546:	002b      	movs	r3, r5
 8005548:	f7fc f84e 	bl	80015e8 <__aeabi_dmul>
 800554c:	0002      	movs	r2, r0
 800554e:	000b      	movs	r3, r1
 8005550:	9808      	ldr	r0, [sp, #32]
 8005552:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005554:	f7fb f8ee 	bl	8000734 <__aeabi_dadd>
 8005558:	9a02      	ldr	r2, [sp, #8]
 800555a:	4b4e      	ldr	r3, [pc, #312]	; (8005694 <__ieee754_log+0x35c>)
 800555c:	0004      	movs	r4, r0
 800555e:	1a9b      	subs	r3, r3, r2
 8005560:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005562:	000d      	movs	r5, r1
 8005564:	4313      	orrs	r3, r2
 8005566:	2b00      	cmp	r3, #0
 8005568:	dd34      	ble.n	80055d4 <__ieee754_log+0x29c>
 800556a:	2200      	movs	r2, #0
 800556c:	4b39      	ldr	r3, [pc, #228]	; (8005654 <__ieee754_log+0x31c>)
 800556e:	0030      	movs	r0, r6
 8005570:	0039      	movs	r1, r7
 8005572:	f7fc f839 	bl	80015e8 <__aeabi_dmul>
 8005576:	0032      	movs	r2, r6
 8005578:	003b      	movs	r3, r7
 800557a:	f7fc f835 	bl	80015e8 <__aeabi_dmul>
 800557e:	0002      	movs	r2, r0
 8005580:	000b      	movs	r3, r1
 8005582:	9002      	str	r0, [sp, #8]
 8005584:	9103      	str	r1, [sp, #12]
 8005586:	0020      	movs	r0, r4
 8005588:	0029      	movs	r1, r5
 800558a:	f7fb f8d3 	bl	8000734 <__aeabi_dadd>
 800558e:	9a04      	ldr	r2, [sp, #16]
 8005590:	9b05      	ldr	r3, [sp, #20]
 8005592:	f7fc f829 	bl	80015e8 <__aeabi_dmul>
 8005596:	9b00      	ldr	r3, [sp, #0]
 8005598:	0004      	movs	r4, r0
 800559a:	000d      	movs	r5, r1
 800559c:	2b00      	cmp	r3, #0
 800559e:	d106      	bne.n	80055ae <__ieee754_log+0x276>
 80055a0:	0002      	movs	r2, r0
 80055a2:	000b      	movs	r3, r1
 80055a4:	9802      	ldr	r0, [sp, #8]
 80055a6:	9903      	ldr	r1, [sp, #12]
 80055a8:	f7fc fae0 	bl	8001b6c <__aeabi_dsub>
 80055ac:	e74f      	b.n	800544e <__ieee754_log+0x116>
 80055ae:	4a23      	ldr	r2, [pc, #140]	; (800563c <__ieee754_log+0x304>)
 80055b0:	4b23      	ldr	r3, [pc, #140]	; (8005640 <__ieee754_log+0x308>)
 80055b2:	9806      	ldr	r0, [sp, #24]
 80055b4:	9907      	ldr	r1, [sp, #28]
 80055b6:	f7fc f817 	bl	80015e8 <__aeabi_dmul>
 80055ba:	4a22      	ldr	r2, [pc, #136]	; (8005644 <__ieee754_log+0x30c>)
 80055bc:	9000      	str	r0, [sp, #0]
 80055be:	9101      	str	r1, [sp, #4]
 80055c0:	9806      	ldr	r0, [sp, #24]
 80055c2:	9907      	ldr	r1, [sp, #28]
 80055c4:	4b20      	ldr	r3, [pc, #128]	; (8005648 <__ieee754_log+0x310>)
 80055c6:	f7fc f80f 	bl	80015e8 <__aeabi_dmul>
 80055ca:	0022      	movs	r2, r4
 80055cc:	002b      	movs	r3, r5
 80055ce:	f7fb f8b1 	bl	8000734 <__aeabi_dadd>
 80055d2:	e754      	b.n	800547e <__ieee754_log+0x146>
 80055d4:	0002      	movs	r2, r0
 80055d6:	000b      	movs	r3, r1
 80055d8:	0030      	movs	r0, r6
 80055da:	0039      	movs	r1, r7
 80055dc:	f7fc fac6 	bl	8001b6c <__aeabi_dsub>
 80055e0:	9a04      	ldr	r2, [sp, #16]
 80055e2:	9b05      	ldr	r3, [sp, #20]
 80055e4:	f7fc f800 	bl	80015e8 <__aeabi_dmul>
 80055e8:	9b00      	ldr	r3, [sp, #0]
 80055ea:	0004      	movs	r4, r0
 80055ec:	000d      	movs	r5, r1
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d102      	bne.n	80055f8 <__ieee754_log+0x2c0>
 80055f2:	0002      	movs	r2, r0
 80055f4:	000b      	movs	r3, r1
 80055f6:	e72c      	b.n	8005452 <__ieee754_log+0x11a>
 80055f8:	4a10      	ldr	r2, [pc, #64]	; (800563c <__ieee754_log+0x304>)
 80055fa:	4b11      	ldr	r3, [pc, #68]	; (8005640 <__ieee754_log+0x308>)
 80055fc:	9806      	ldr	r0, [sp, #24]
 80055fe:	9907      	ldr	r1, [sp, #28]
 8005600:	f7fb fff2 	bl	80015e8 <__aeabi_dmul>
 8005604:	4a0f      	ldr	r2, [pc, #60]	; (8005644 <__ieee754_log+0x30c>)
 8005606:	9000      	str	r0, [sp, #0]
 8005608:	9101      	str	r1, [sp, #4]
 800560a:	9806      	ldr	r0, [sp, #24]
 800560c:	9907      	ldr	r1, [sp, #28]
 800560e:	4b0e      	ldr	r3, [pc, #56]	; (8005648 <__ieee754_log+0x310>)
 8005610:	f7fb ffea 	bl	80015e8 <__aeabi_dmul>
 8005614:	0002      	movs	r2, r0
 8005616:	000b      	movs	r3, r1
 8005618:	0020      	movs	r0, r4
 800561a:	0029      	movs	r1, r5
 800561c:	e733      	b.n	8005486 <__ieee754_log+0x14e>
 800561e:	2000      	movs	r0, #0
 8005620:	2100      	movs	r1, #0
 8005622:	e69a      	b.n	800535a <__ieee754_log+0x22>
 8005624:	c3500000 	.word	0xc3500000
 8005628:	43500000 	.word	0x43500000
 800562c:	7fefffff 	.word	0x7fefffff
 8005630:	fffffc01 	.word	0xfffffc01
 8005634:	00095f64 	.word	0x00095f64
 8005638:	3ff00000 	.word	0x3ff00000
 800563c:	fee00000 	.word	0xfee00000
 8005640:	3fe62e42 	.word	0x3fe62e42
 8005644:	35793c76 	.word	0x35793c76
 8005648:	3dea39ef 	.word	0x3dea39ef
 800564c:	55555555 	.word	0x55555555
 8005650:	3fd55555 	.word	0x3fd55555
 8005654:	3fe00000 	.word	0x3fe00000
 8005658:	fff9eb86 	.word	0xfff9eb86
 800565c:	df3e5244 	.word	0xdf3e5244
 8005660:	3fc2f112 	.word	0x3fc2f112
 8005664:	96cb03de 	.word	0x96cb03de
 8005668:	3fc74664 	.word	0x3fc74664
 800566c:	94229359 	.word	0x94229359
 8005670:	3fd24924 	.word	0x3fd24924
 8005674:	55555593 	.word	0x55555593
 8005678:	3fe55555 	.word	0x3fe55555
 800567c:	d078c69f 	.word	0xd078c69f
 8005680:	3fc39a09 	.word	0x3fc39a09
 8005684:	1d8e78af 	.word	0x1d8e78af
 8005688:	3fcc71c5 	.word	0x3fcc71c5
 800568c:	9997fa04 	.word	0x9997fa04
 8005690:	3fd99999 	.word	0x3fd99999
 8005694:	0006b851 	.word	0x0006b851

08005698 <_init>:
 8005698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800569a:	46c0      	nop			; (mov r8, r8)
 800569c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800569e:	bc08      	pop	{r3}
 80056a0:	469e      	mov	lr, r3
 80056a2:	4770      	bx	lr

080056a4 <_fini>:
 80056a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056a6:	46c0      	nop			; (mov r8, r8)
 80056a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056aa:	bc08      	pop	{r3}
 80056ac:	469e      	mov	lr, r3
 80056ae:	4770      	bx	lr
